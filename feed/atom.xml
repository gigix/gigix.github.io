<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>透明思考</title>
  <subtitle>Transparent Thoughts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gigix.thoughtworkers.org/"/>
  <updated>2018-02-23T06:32:05.632Z</updated>
  <id>http://gigix.thoughtworkers.org/</id>
  
  <author>
    <name>Jeff Xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习项目如何管理：工作内容</title>
    <link href="http://gigix.thoughtworkers.org/2018/2/23/managing-ml-projects/"/>
    <id>http://gigix.thoughtworkers.org/2018/2/23/managing-ml-projects/</id>
    <published>2018-02-23T05:01:00.000Z</published>
    <updated>2018-02-23T06:32:05.632Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2018/1/28/machine-learning-for-managers/">前一篇文章</a>介绍了机器学习的基本过程，然后讨论了如何对机器学习项目设置期望的问题。我们了解到，度量准确率的指标可以有多种，需要根据应用场景来选择。一旦选好了度量指标，接下来就可以围绕这个指标来划分任务、监控进度、管理风险。</p>
<h2 id="机器学习项目涉及哪些工作"><a href="#机器学习项目涉及哪些工作" class="headerlink" title="机器学习项目涉及哪些工作"></a>机器学习项目涉及哪些工作</h2><p>站在非常宏观的角度，机器学习系统工作的方式是：你有一个模型，你把一堆数据输入给它，然后你以某种方式使用它提供给你的输出。所以机器学习项目要完成的任务也是三大块：处理输入；获得模型；提供产出。</p>
<ol>
<li><strong>处理输入</strong><br> a. 你需要获得已有的数据<br> b. 你需要对数据做矢量化操作，把原本丰富多样的数据变成有若干列的矢量<br> c. 你需要对数据做<a href="https://en.wikipedia.org/wiki/Feature_engineering" target="_blank" rel="external">特征工程</a>，找出可能蕴涵了知识、值得被学习的那些特征项</li>
<li><strong>获得模型</strong><br> a. 实际上很多时候你可以使用现成的模型，包括：（i）下载现成的离线模型，或者（ii）使用<a href="https://mp.weixin.qq.com/s/szVt6C9q1rChRMXX97ynTA" target="_blank" rel="external">在线的人工智能服务</a><br> b. 如果没有现成的模型，你也可以考虑使用现有的数据来自行训练模型</li>
<li><strong>提供产出</strong><br> a. 机器学习的结果可能通过某种人-机（UI）或机-机界面（API）被用户直接使用<br> b. 作为项目的产出，机器学习模型需要被嵌入到整个数据流水线中<br> c. 作为项目的产出，机器学习模型的开发、测试、部署需要有DevOps的支撑</li>
</ol>
<p><img src="/assets/2018/1/28/ml-process.png"></p>
<p>在所有这些任务中，只有2.b“自行训练模型”（上图右下角标星星的部分）需要新的技能和管理方法，其他都是传统的软件开发任务，可以用标准的Scrum等敏捷方法拆分任务和管理。也就是说，如果你需要的人工智能能力已经有一个现成的模型提供，那么整个项目就是一个传统的软件开发项目，只是需要使用一些新的工具或API而已。</p>
<p>下面我们聚焦讨论需要自行训练模型时，这部分工作应该如何拆分、如何管理进度和风险。</p>
<h2 id="自行训练模型的流程"><a href="#自行训练模型的流程" class="headerlink" title="自行训练模型的流程"></a>自行训练模型的流程</h2><p>在自行训练模型的情况下，如上图所示，你会用历史数据（X和Y）来训练一个模型，然后用这个模型对未来的生产数据（X-hat）做预测（算出Y-hat）。不论采用什么指标来度量准确率，模型在训练数据上的表现一定好于在生产数据上的表现，这是因为模型从训练数据中“学到”的知识不一定在生产数据中完全重现，或者用黑话来说，模型在训练过程中“拟合”了训练数据的特征。也就是说，如果一个模型对训练数据表现出了95%的准确率（先不管采用哪个准确率指标），其实你并不知道这个模型对生产数据会表现什么水平的准确率，于是你也不知道这个模型是否好到可以上线运行。</p>
<p>为了更有效地衡量模型的表现，我们会在开始训练模型之前先拿出一小部分历史数据（例如全部历史数据的10%）用于测试，整个训练过程不接触这部分数据。于是我们就有了“训练集”（training set）和“测试集”（test set）。很多时候我们还会分出一小部分数据作为“验证集”（validation set），为了简化问题，我们可以先采用“训练集+测试集”这种设置。</p>
<p>把历史数据分成训练集和测试集以后，可以预期，模型在训练集上的表现会优于在测试集上的表现，这两个表现通常都会低于项目期望值。我们把“【模型在训练集上的表现】与【期望值】之间的差距”叫做Bias，把“【模型在训练集上的表现】与【模型在测试集上的表现】之间的差距”叫做Variance。</p>
<p><img src="/assets/2018/2/23/bias-variance.png"></p>
<p>于是就有3种可能的情况：</p>
<ol>
<li><strong>High Bias</strong>：模型在训练集上的表现远低于期望，模型还不能实用（此时Variance如何并不重要）；</li>
<li><strong>Low Bias, High Variance</strong>：模型在训练集上表现好，但是在测试集上表现差，模型还不能实用；</li>
<li><strong>Low Bias, Low Variance</strong>：模型在训练集和测试集上表现都好，可以投入实用。</li>
</ol>
<p>我们通常会从简单的机器学习算法、手边立即能获得的数据开始尝试。这时候通常Bias会高，因为过于简单的模型不足以呈现数据背后的知识，这时我们说模型“拟合不足”（Under-fitting）。在这种情况下，可以采用的措施包括：</p>
<ul>
<li>使用更复杂的机器学习算法</li>
<li>使用更复杂的神经网络架构</li>
</ul>
<p><img src="/assets/2018/2/23/under-fitting.png"></p>
<p>用更复杂的机器学习算法和神经网络训练出来的模型，通常能更好地拟合训练集，进入“Low Bias”的状态。这时我们再关注模型在测试集上的表现，如果测试集的表现远差于训练集的表现，就说明模型过度地针对训练集的特征做了优化，我们说模型“过度拟合”（Over-fitting）训练数据。在这种情况下可以采用的措施包括：</p>
<ul>
<li>引入<a href="https://codeburst.io/what-is-regularization-in-machine-learning-aed5a1c36590" target="_blank" rel="external">Regularization</a>通常能降低over-fitting的程度</li>
<li>通过特征工程可以避免一些over-fitting的情况，例如排除掉一些严重过度拟合的特征</li>
<li>引入更多的训练数据，包括数据量和特征量</li>
</ul>
<p>最终我们的目标是得到Bias和Variance双低的模型。</p>
<p><img src="/assets/2018/2/23/over-fitting.png"></p>
<h2 id="潜在风险点"><a href="#潜在风险点" class="headerlink" title="潜在风险点"></a>潜在风险点</h2><p>从上述的工作流程中，我们可以预先识别一些潜在的风险：</p>
<ul>
<li>在Under-fitting的状态下，如果人员能力不足，就无法应用更复杂的算法</li>
<li>在Under-fitting的状态下，如果计算资源不足，就无法训练更复杂的模型</li>
<li>在Over-fitting的状态下，如果数据质量不足，就无法开展有效的特征工程</li>
<li>在Over-fitting的状态下，如果数据数量不足，就无法训练高效的模型</li>
<li>如果整个项目涉及的数据基础设施不足，就无法快速迭代实验</li>
</ul>
<p><img src="/assets/2018/2/23/risks.png"></p>
<p>于是，训练一个机器学习模型就不再是一个神秘的、盲目的、随机的过程。借助Bias、Variance、迭代实验的频率等量化数据，IT管理者和不懂技术的业务代表能更清晰地看到项目的进展，整个团队能更好地判断接下来需要做什么：是需要尝试更高级的神经网络呢？还是需要想办法获得更多的数据？或者是需要更多的计算资源？还是需要寻找某些特定的知识和技能？这样就避免了业务代表怀有不切实际的期望、又不知道技术团队在做什么而感到恐慌。</p>
<p>在下一篇文章里，我会更加具体地介绍，如何借鉴Scrum和看板等敏捷方法的思路，把训练一个机器学习模型的工作拆分成更小粒度、更易于管理的任务，以及如何对机器学习项目进行可视化管理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2018/1/28/machine-learning-for-managers/&quot;&gt;前一篇文章&lt;/a&gt;介绍了机器学习的基本过程，然后讨论了如何对机器学习项目设置期望的问题。我们了解到，度量准确率的指标可以有多种，需要根据应用场景来选择。一旦选好了度量指标
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>精准投放的原理及其担忧</title>
    <link href="http://gigix.thoughtworkers.org/2018/2/17/precise-deliverying/"/>
    <id>http://gigix.thoughtworkers.org/2018/2/17/precise-deliverying/</id>
    <published>2018-02-17T05:01:00.000Z</published>
    <updated>2018-02-17T05:37:19.406Z</updated>
    
    <content type="html"><![CDATA[<p>从WWW网站发源之初，网站的经营者们就清楚地认识到，自己经营的是一份媒体，就跟报刊杂志一样。媒体的收入，第一是来自读者付费，第二也是更主要的，是来自广告。于是站长们在自己的网站页面上开辟出或大或小、或纵或横的广告位，广告主则可以采购广告位。据笔者亲眼所见，迟至2001年，中国很多网站的广告销售方式仍然是由销售人员拿着一份打印出来的“刊例”（这个词也同样是来自报刊出版领域），直接向广告主介绍。购买广告位的方式，也通常是一家广告主承包一个广告位一段时间（通常是几天，有时长达几周），只有在最热门的广告位（例如首页顶部Banner）才有简单的轮换机制。广告收费是按照广告位与放置时长计算，网站几乎不向广告主反馈投放的效果。简而言之，这是在线广告的初创阶段，网站基本上是被当做报刊来经营的。</p>
<p>这种投放方式显然是很原始的，最大的问题有两个：首先，广告主需要自己接洽多家媒体，分配各家媒体的投放预算，媒体则要自己管理多家广告主的投放排期，这对于广告主和媒体都是个很大的工作量；而且，广告投放出去以后效果如何，哪些媒体效果更好，后续投放应该如何调整，这些信息广告主无法获得，即使媒体有回馈数据，其中有多大成分的数据夸大，广告主也无从知晓。在这两个痛点的催生下，就出现了“媒体采买平台”的服务形式：经营这个平台的广告代理公司向大量媒体（即网站）购买广告位，广告主只要把广告投放到这一家代理公司，代理公司自会通过软件程序把广告派发到媒体。如此一来，广告主和媒体不用彼此一对一接洽，工作量都减少很多。并且在这个阶段，广告收费模式也改为按点击付费（通常会承诺一定浏览流量），广告主可以更准确地知道广告的效果，按实际效果付费。</p>
<p>在媒体采买平台的基础上，相关的技术与业态又不断升级，逐渐形成了广告交易平台（ADvertisement eXchange，ADX）、供给方平台（Supply Side Platform，SSP）和需求方平台（Demand Side Platform，DSP）三大类平台协作的格局。供给方平台（SSP）为媒体服务，它负责汇集媒体广告位资源，尽量把广告位卖出最高价；需求方平台（DSP）为广告主服务，它负责汇集广告投放诉求，尽量以最低价格投放达到最佳效果；广告交易平台（ADX）则保持中立态度，为供需两方撮合交易，就像股市一样：只要有一个最高买价能匹配到一个符合条件的最低卖价，就会完成一次广告交易，DSP就会向SSP进行一次投放。</p>
<p>IT技术创造的奇迹在于，这一系列看似复杂的竞价采购、交易撮合，可以在极短的时间内完成，因此交易的单元可以极小、交易量可以极大。在ADX发生的一次交易，标的物通常是“一次投放”，或者说是“一次浏览”。当你轻点鼠标，打开一个网页时，这个页面上的几个、十几个广告位就分别被SSP发送给ADX“叫卖”，匹配到出价最高的DSP“卖主”，然后把广告呈现在你面前。这整个投放决策的过程，业界标准要求在0.4秒以内完成。</p>
<p>由于广告投放已经被细化到按次采购，于是广告位本身是否热门变得不再重要，竞价采购的对象变成了流量本身。当然，即使在网站发展初期、甚至在报刊杂志上，广告主和广告代理也会选择流量。例如雷克萨斯不会选择在城市晚报上投广告，而是会更多地在时尚杂志和飞机杂志上出现，这就是对“流量”（也即读者）做过筛选的结果。在这个例子里，丰田公司（或者其广告代理）从媒体属性上对读者的身份、职业、收入水平（统称为“流量属性”）有一个大致的推测，基于这个推测做了投放决定。然而受限于纸媒的技术特质，这个投放决定是非常粗糙的：第一，它能够获得的流量属性信息非常有限；第二，它只能对相当大的人群、在相当长的时间段上做决定；第三，它能得到的效果反馈非常少。</p>
<p>而程序化的广告投放则完全克服了这三个局限：投放决定是基于每一次浏览、每一个流量来做出的；投放效果（有多大比例的用户点击广告）可以当天回馈给广告主；最重要的是，在线广告业务的经营者能够获得空前丰富的关于“流量”的信息。比如说，当你在微信中点开一个带广告的页面，DSP就有可能获得下列关于你的信息：</p>
<ul>
<li>你是谁：你的微信ID，你的手机号，你的性别、生日、星座、身高、体重、血型……</li>
<li>你是个什么样的人：你的收入，你的生活方式，你的价值观世界观，你的意识形态，你的观点态度……</li>
<li>你做哪些事：你上网看什么内容，你喜欢什么品牌，你买什么东西、在哪里买，你跟谁交朋友……</li>
<li>你身边的环境：你在什么地方，你周围在发生什么，你在什么时间上网，你在乘坐地铁、公交车、还是滴滴专车……</li>
</ul>
<p>在线广告行业里把这些信息都称为“标签”，DSP就是基于这些标签来判断，现在点开网页的这个流量值多少钱，并在0.4秒内决定是否要投标竞价。所以当你听到“流量经济”、“流量就是钱”这样的说法，你应该意识到：这说的就是字面上的意思，每次浏览、每个流量都是有价的。</p>
<p>也许你会怀疑，DSP怎么会知道我这么多信息？笔者可以透露，上面列举的这些标签，都是一个真实的IT系统中已经存在的标签，实际上DSP能获得的信息比这个列表只多不少。而且DSP非常有意愿知道更多流量属性，因此又衍生出了“数据管理平台”（Data Management Platform，DMP）。这些平台专门从各种来源收集与用户相关的信息，并把这些信息汇集起来形成“统一客户视图”（Single Customer View）——也就是给这个用户、这个流量贴上更加丰富的标签。</p>
<p>举个例子来说明DMP的工作方式。当你在机场连上免费WIFI，你会看到一个登录页面，你输入手机号获得验证码，连上网络，这时WIFI热点背后的程序已经知道你的手机号、你用的手机款式、你所在的地点，这些信息马上被发送给一个DMP。这时你的朋友从微信发给你一篇文章，是介绍大明星的座驾，你细细欣赏了贝克汉姆的腹肌和他的奔驰G系越野车，于是这个网页背后的埋点程序知道了你对汽车品牌的偏好，这个信息和你的微信ID一起也被发送给一个DMP——很可能是同一个DMP。看完文章，你打开购物软件，买了几样水果送到家里，于是电商平台知道了你的消费能力和居住的小区，这些信息和你的手机号一起同样被发送给DMP。通过手机号、微信ID、身份证号……这些唯一身份标识，DMP建立起了关于你的统一顾客视图，可能会给你贴上成百上千个标签。</p>
<p>基于这些标签，DSP就可以展开非常精确的广告投放。例如对于奔驰投放的Banner广告，DSP可能会优先考虑这样一些标签：30~40岁，年收入40~60万，居住在一二线城市，本科以上学历，从事IT、金融、房地产等职业，现在车龄6年以上，近期流露换车意向……一旦高度符合这些标签的流量出现，DSP就会高价拍下广告位。一些技术领先的DSP已经开始使用机器学习技术，不用人手挑选投放目标标签，而是由人工智能自动识别目标流量，使广告投放更加精准。</p>
<p>然后，当你开始跟老婆讨论是不是该换台新车的时候，你无意间发现，手机上打开的网页里有一辆漂亮的奔驰C200休旅车，你点开广告链接，跟老婆一起左看右看，觉得这辆车既有面子又实惠，跟你家的风格简直是天作之合，于是你开心地按下了“预约试驾”。你大概不会多想，这个广告出现的时机怎么那么恰到好处。最终你买下了这辆车，就好像这完全是你自己的决定一样——就在你快要付款的一刻，你又瞥见手机网银的界面上有一个刷信用卡买车免息分期的活动，多巧呀。</p>
<p>既然广告可以定制，有什么道理媒体上呈现的内容本身不能被定制呢？感兴趣的话，你可以自己做一个实验：首先看看你的知乎首页上有哪些内容，一般来说不会出现跟火影忍者相关的问答，毕竟火影大结局也有段日子了；然后下载腾讯动漫，每天看上几十话火影，用不了几天，你的知乎首页上就会出现一堆讨论鸣人和佐助的帖子。笔者亲身观察到这个现象，好奇地搜索知乎的投资方，腾讯果然在列。大胆猜测一下，知乎即使不是直接使用腾讯的DMP“广点通”，技术原理也相去不远。既然都看见“小樱的实力能到影级吗”这么有吸引力的帖子，怎么能不打开看看呢？于是现在笔者的知乎首页上，各种忍术已经连绵不绝了。</p>
<p>内容定制正在成为数字化营销的主流工具。和纸媒不同，数字化产品的每次打开、每次浏览都可以是动态的、个性化的。DMP已经掌握了如此丰富的用户洞察，媒体没有道理继续保持一成不变的内容呈现，一定会利用DMP的数据来达成更高的转化率——可能是转化为购车的消费者，也可能是转化为支持某个政策的变革、某种意识形态的观点。于是我们看到，像今日头条这样的媒体，呈现内容的原则不是“外面在发生什么”，而是“读者喜欢看什么”——当然纸媒也有过度迎合读者的风险，但纸媒毕竟只能面向大群读者做一个粗糙的推测，而互联网媒体（和社交网络）则在技术的推动下形成了一个完美的、牢不可破的回音壁。至于传统意义上媒体要客观中立地展现世界样貌的职责，在转化率这个KPI的驱动下显得有些苍白无力。</p>
<p>精准投放可能带来什么危害呢？数据科学家Cathy O’Neil在《<a href="https://book.douban.com/subject/26785866/" target="_blank" rel="external">数学大杀器</a>》（Weapons of Math Destruction）一书中介绍了一些已经现实发生的场景。其一，基于数据的精准投放如果被用于教育、医疗、保险等与生活休戚相关的“商品”上，就可能造成对特定人群、尤其是弱势人群的歧视和损害。在美国，有一些质量低劣的教育机构，把自己的广告定向投放到收入低、教育程度低、并且新近遭遇人生重大打击的人群——例如刚离婚、或刚被解雇。这样的人群、处于这样的心理状态下，更容易被这些心灵鸡汤式的广告吸引，从自己原本就已经拮据的经济中再拿出一笔不菲的资金，来参加一个对自身能力没有提升、也不被人才市场承认的培训计划。在中国我们也看到，尽管百度宣称其中立性，但莆田系在百度上投放的医疗广告同样精准地找到了教育程度较低、经济状况较差、已经饱受疾病损害的那些弱势家庭。</p>
<p>另一方面，当精准投放被应用于政治目的，它能够强化大型利益团体对群众观点和政治议程的操控。2011年奥巴马的竞选团队与IT咨询公司埃森哲合作，首次在美国总统选举中引入了大数据和精准投放技术。在2015年的大选中，“共和党犹太人联盟”的领导者们在拉斯维加斯的威尼斯人酒店开会，在酒店上网时他们看到候选人泰德·克鲁兹承诺加大对以色列安全支持力度的广告宣传。他们不知道的是，这条广告只在这家酒店、只在他们开会的这几天播放。当政治家和利益团体可以不必保持连贯统一的公众形象、而是可以针对受众“定制”其形象和政治观点，这种变化究竟会给公共生活带来什么影响，可能答案还并不清晰。</p>
<p>在《数学大杀器》中，O’Neil提出了一些限制大企业过度利用个人数据的途径，例如效仿欧洲对互联网数据的管制模式：只有在用户明确同意的情况下，企业才能采集用户数据，且采集到的数据不能用于其他用途。“明确同意”的规定，可能仍然容易通过隐晦的用户协议等方式来绕过；但“不作它用”的规定，对于数据滥用是一个很好的预防措施。至于国内的相关管制会在何时、以何种形式出现，目前仍是未知。在可见的将来，恐怕我们还得继续享受互联网提供给我们的精准得有点细思极恐的广告和内容。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从WWW网站发源之初，网站的经营者们就清楚地认识到，自己经营的是一份媒体，就跟报刊杂志一样。媒体的收入，第一是来自读者付费，第二也是更主要的，是来自广告。于是站长们在自己的网站页面上开辟出或大或小、或纵或横的广告位，广告主则可以采购广告位。据笔者亲眼所见，迟至2001年，中
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习项目如何管理：设置期望</title>
    <link href="http://gigix.thoughtworkers.org/2018/1/28/machine-learning-for-managers/"/>
    <id>http://gigix.thoughtworkers.org/2018/1/28/machine-learning-for-managers/</id>
    <published>2018-01-28T05:01:00.000Z</published>
    <updated>2018-01-27T01:17:48.962Z</updated>
    
    <content type="html"><![CDATA[<p>我在之前的一篇文章中提到，<a href="/2017/12/12/ml-project-management-current-situation/">机器学习项目如何管理</a>，目前在行业内是一个普遍存在的难题。具体而言，对于这类项目，我们需要一套行之有效的工作办法，帮助一线工作者：(1)知道什么时候该做什么事；(2)知道什么时候该看什么指标；(3)知道什么时候可能有什么风险。这样一套工作办法的第一步，就是对一个机器学习项目设置合理的期望。</p>
<h2 id="机器学习到底是在做什么"><a href="#机器学习到底是在做什么" class="headerlink" title="机器学习到底是在做什么"></a>机器学习到底是在做什么</h2><p>机器学习的基本过程可以用下面这张图来呈现：</p>
<p><img src="/assets/2018/1/28/ml-process.png"></p>
<p>拿到已有的历史数据作为训练数据，我们需要对训练数据进行<strong>矢量化</strong>处理，把输入的不论什么形态的数据（例如文本、音频、图片、棋盘盘面）都转化成包含若干列的矢量。从矢量中我们再分出<strong>特征</strong>（X）和结果（Y），通常特征的列数远多于结果。</p>
<p>我们把X部分交给一个<strong>模型</strong>，算出与每一行训练数据对应的预测值Y’。所谓模型，就是一系列的权重系数，把这些权重系数用在一行输入数据上，就会得到针对这一行输入数据的结果预测。我们把Y’与Y对比，评判这一轮预测的效果。这个效果，我们用<strong>损失</strong>来度量。</p>
<p>然后我们用一个机器学习<strong>算法</strong>来尝试优化损失。所谓优化，就是不断尝试调整模型中的权重参数。调一次，再计算出一组新的Y’，再与Y比较效果。如此迭代，直到损失不再降低，或者达到预设的迭代次数。</p>
<p>所以，首先必须要记住：机器学习是一种优化任务。优化任务的目标不是找到“正确”的答案，而是找到一个“看起来不错”的答案。这一点会对我们看待这类项目的方式产生深远的影响。</p>
<h2 id="如何为优化任务设置期望"><a href="#如何为优化任务设置期望" class="headerlink" title="如何为优化任务设置期望"></a>如何为优化任务设置期望</h2><p>传统意义上的软件开发（例如开发一个电商网站、开发一个社交app）是能够得到确定结果的：只要需求分析得够细致、原型设计得够保真、测试进行得够周全，你就可以准确地框定一个软件开发过程的产出结果，点击哪个按钮得到什么效果都是可以预先定义的。而机器学习项目则不然：不论分类、回归、聚类，本质上都是对某个损失函数迭代优化的过程。它没有唯一正确的答案，只是有希望得到看起来不错的答案。优化任务的逻辑不是因果，而是概率。</p>
<p>对于优化任务，我们不能问“是否正确”这个问题。有意义的问题是，模型的预测准确率能达到多少。一个缺乏经验的管理者可能会说“越高越好”，或者拍脑袋说出一个数字“90%”，显然这都不太有助于合理地管理期望和把控进展。暂时放下“准确率”的定义不谈，我们如何知道对于一个机器学习得出的模型应该期望什么样的准确率呢？显然大多数情况下预测准确率不可能达到100%，那么这个期望应该如何设置？</p>
<p>我们需要引入一个概念：<a href="https://en.wikipedia.org/wiki/Bayes_error_rate" target="_blank" rel="external">贝叶斯错误率</a>。简单说，贝叶斯错误率是对于一个问题有可能达到的最好的预测效果。贝叶斯错误率通常不是那么容易直接获得的，所以我们用人类的判断作为一个代理指标：一般来说，我们认为人类的判断错误率高于贝叶斯错误率，但是也相差不大。于是前面的问题变成了：对于一个机器学习得到的模型，我们期望它的预测准确率与人类的判断相比如何？</p>
<p>这个问题没有唯一正确的答案。有些时候我们希望模型的准确率高于、甚至远高于人类的判断；另一些时候，我们只需要模型的准确率勉强接近人类的判断，这样的模型就可以帮人类完成大量繁琐的工作量。对模型的期望设置不是一个技术问题，而是一个业务问题，在开始一个机器学习项目之前，就需要先与业务的负责人展开相关的对话。</p>
<h2 id="如何定义“准确”"><a href="#如何定义“准确”" class="headerlink" title="如何定义“准确”"></a>如何定义“准确”</h2><p>仍然以最简单的分类问题为例，模型的判别分为阳性（positive）和阴性（negative）两种，两种判别都有正确和错误的可能，于是总共就有了四种可能的情况：</p>
<ul>
<li>True Positive（TP）：判别为阳性，实际也是阳性</li>
<li>False Positive（FP）：判别为阳性，实际却是阴性</li>
<li>True Negative（TN）：判别为阴性，实际也是阴性</li>
<li>False Negative（FN）：判别为阴性，实际却是阳性</li>
</ul>
<p>一种朴素的“准确率”定义方法是“判别正确的比例”，即：</p>
<p><img src="/assets/2018/1/28/accuracy.png"></p>
<p>但是当样本的分布极其不均衡时，这个对准确率的定义会很有误导性。例如我们假设10000人里有150人患胃癌（阳性），经过对血样的分析，一个模型识别出100名患者（TP），有50名患者没有发现（FN），同时误报了另外没有患病的150人（FP）；另一个模型则不做任何判断，直接宣称所有人都没有胃癌。我们直觉会认为前一个模型优于后一个，但朴素的准确率定义却给了我们相反的结论：</p>
<p><img src="/assets/2018/1/28/accuracy-paradox.png"></p>
<p>因为<a href="https://en.wikipedia.org/wiki/Accuracy_paradox" target="_blank" rel="external">朴素的准确率定义有这样的问题</a>，实践中更常用的指标是“精确率”（Precision）和“召回率”（Recall）。它们的定义分别是：</p>
<ul>
<li>Precision = TP/(TP+FP)：在预测的阳性个例中，有多少是预测正确的？</li>
<li>Recall = TP/(TP+FN)：在所有的阳性个例中，总共找出了多少？</li>
</ul>
<p><img src="/assets/2018/1/28/precision-recall.png"></p>
<p>可以看出，Precision和Recall往往是互相矛盾的：如果追求找出更多阳性个例（提高Recall），那么阴性个例被误判为阳性的情况也会增加（降低Precision），反之亦然。在不同的业务场景下，需要追求的指标也会不同。例如在前面的体检场景下，我们会追求更高的Recall：尽量找出所有患病的人，有一些人被误报也没关系。而另一个极端场景是推荐顾客可能会卖的商品，这时我们会追求更高的Precision：推荐位只有5个，我们必须保证推荐的每一件商品都打中用户的兴趣点，至于还有几千个他可能感兴趣的商品没有被推荐，那并不重要。</p>
<p>以上我们看到的只是最简单的分类问题的场景。对于其他场景，可能需要引入其他度量准确率的指标。所以我们再次看到，采用什么指标来定义“准确”、应该如何权衡指标的取舍，这同样是一个与场景高度相关的业务问题。项目的管理者和业务代表需要清晰理解指标的含义、并合理设置对指标的期望。</p>
<h2 id="然后呢……"><a href="#然后呢……" class="headerlink" title="然后呢……"></a>然后呢……</h2><p>如果项目的管理者和业务方代表能懂得机器学习是一类优化任务、能理解优化任务的度量方式、能针对这类任务设置合理的期望，在理解和把握项目进度与风险的路上他们就迈出了第一步。在下一篇文章里，我会拆解出机器学习类项目涉及的工作内容。读者将会看到，看起来高大上的机器学习、人工智能，实际上需要特殊技能和高中以上数学能力的只有极小一部分，其他都是普通的、确定性的软件开发工作，可以用典型的软件开发过程和管理方法来对待。针对份额极小、但有时非常重要的“自行训练模型”部分，我会给出更加细化的工作内容拆解，并提出任务拆分、进度管理、风险管理的相关办法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在之前的一篇文章中提到，&lt;a href=&quot;/2017/12/12/ml-project-management-current-situation/&quot;&gt;机器学习项目如何管理&lt;/a&gt;，目前在行业内是一个普遍存在的难题。具体而言，对于这类项目，我们需要一套行之有效的工作办法，帮
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字化企业的数据自服务</title>
    <link href="http://gigix.thoughtworkers.org/2018/1/13/dps-self-service-data/"/>
    <id>http://gigix.thoughtworkers.org/2018/1/13/dps-self-service-data/</id>
    <published>2018-01-13T05:04:00.000Z</published>
    <updated>2018-01-13T07:34:26.036Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/4/25/ditigal-platform-strategy-intro/">前文</a>中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱。今天我们讨论的主题是“数据自服务”，看看一个倡导消除摩擦、建设生态、推动创新的数字化平台如何处理数据。</p>
<blockquote>
<p><strong>前情回顾</strong></p>
<ul>
<li><a href="/2017/4/25/ditigal-platform-strategy-intro/">什么是数字平台战略</a> </li>
<li><a href="/2017/5/7/dps-delivery-infrastructure/">数字化企业的交付基础设施</a></li>
<li><a href="/2017/5/22/dps-api-architecture-remediation/">数字化企业的API架构治理</a></li>
</ul>
</blockquote>
<h2 id="什么是数据自服务"><a href="#什么是数据自服务" class="headerlink" title="什么是数据自服务"></a>什么是数据自服务</h2><p>数据在企业中的处理过程，能清晰地映射出<a href="http://www.melconway.com/Home/Conways_Law.html" target="_blank" rel="external">康威定律</a>对IT系统的影响。在各个部门分别建设IT系统、组织内部大量存在信息筒仓（silo）的年代，数据的操作由OLTP应用系统的开发团队同步开发，那时几乎每个政府信息化、企业信息化系统都会有一块“报表需求”。随后众多组织认识到筒仓系统导致信息在组织内不能拉通，不能产生对整体业务流程的洞察，于是开始建设以数据仓库为代表的OLAP系统。</p>
<p>这些系统在支撑更高级、更复杂的数据分析的同时，也对应地在组织中造就了一支专业的“数据团队”。这些人使用非常专业的技术和工具对数据进行提取、转换、装载、建立数据立方、多维钻取、生成报表。这些专业的技术和工具，普通的软件开发人员并不掌握，因此对数据处理、分析和呈现的变更都必须归集到这个数据团队来完成。结果是，数据团队的backlog里累积了来自各个部门的需求，需求的响应能力下降，IT系统从上线到获得市场洞察的周期变长。</p>
<p>微服务架构鼓励小型的、全功能的团队拥有一个完整的服务（及其对应的业务）。这样的全功能团队不光要开发和运维IT系统，还要能从数据中获得洞察——而且要快，不然就会跟不上市场变化，甚至使一些重要的业务场景无法得到支撑。因此他们不能坐等一支集中式的、缓慢的数据团队来响应他们的需求，他们需要数据自服务能力。</p>
<p>要赋能数据自服务，企业的数字化平台要考虑“两个披萨团队”的下列诉求：</p>
<ul>
<li>需要定义<strong>数据流水线</strong>，使数据能够顺畅地流过收集、转换、存储、探索/预测、可视化等阶段，产生业务价值。</li>
<li>需要用<strong>实时的架构和API</strong>在短时间内处理大量、非结构化的数据，从中获得洞见，并实时影响决策。</li>
<li>为了提高应变能力，系统中的数据不做ETL预处理，而是以“生数据”的形式首先存入<strong>数据湖</strong>，等有了具体的问题要回答时，再去组织和筛选数据，从中找出答案。</li>
<li>更进一步把数据包装成能供外人使用的<strong>数据产品</strong>，让第三方从数据中获得新的洞见与价值。</li>
<li>为了支持数据产品的运营，需要实现<strong>细粒度授权</strong>，针对不同的用户身份，授权访问不同范围的数据。</li>
</ul>
<h2 id="数据自服务解读"><a href="#数据自服务解读" class="headerlink" title="数据自服务解读"></a>数据自服务解读</h2><p>下面是ThoughtWorks的<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>第三个支柱“数据自服务”中所蕴涵的具体内容。</p>
<p><img src="/assets/2017/6/13/self-service-data.jpg"></p>
<h3 id="数据流水线设计"><a href="#数据流水线设计" class="headerlink" title="数据流水线设计"></a>数据流水线设计</h3><p>所谓流水线，是指用大数据创造价值的整个数据流。流水线从数据采集开始，随后是数据的清洗或过滤，再然后是将数据结构化到存储仓库中以便访问和查询，这之后就可以通过探索或预测的方式从数据中找到业务问题的答案，并可视化呈现出来。</p>
<p><img src="/assets/2017/6/13/data-pipeline.jpg"></p>
<p>一条运转良好的数据流水线，能有效处理移动/物联网等新技术制造出的极其大量的数据，缩短数据从获取到产生洞见的反馈周期，并以开发者友好的方式完成数据各个环节的处理，赋能一体化团队。</p>
<p>数据流水线的实现有两种可能的方式。一种方式是在各个环节采用各种特定的工具，例如<a href="https://www.thoughtworks.com/insights/blog/scala-symposium-big-data-pipeline-powered-scala" target="_blank" rel="external">前面介绍的数据流水线</a>，各个环节都可以用开源的工具来实现。当然，<a href="http://www.techrepublic.com/article/manage-complex-big-data-pipeline-challenges-with-these-approaches/" target="_blank" rel="external">选择这种方式也并非没有挑战</a>：组织必须自己编写和维护“胶水代码”，把各种专用工具组合成一个内聚的整体。对组织的技术能力有较高的要求。</p>
<p><img src="/assets/2017/6/13/data-pipeline-impl.jpg"></p>
<p>除了基于开源软件实现自己的数据流水线，也可以考虑采用云上的数据流水线PaaS服务，例如<a href="https://databricks.com/" target="_blank" rel="external">Databricks</a>、<a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/what-is-datapipeline.html" target="_blank" rel="external">AWS Data Pipeline</a>、<a href="https://docs.microsoft.com/en-us/azure/data-factory/data-factory-introduction" target="_blank" rel="external">Azure Data Factory</a>等。这个方式的优点是对技术能力要求较低，缺点则是造成对特定云平台/PaaS提供商的依赖。</p>
<h3 id="实时架构和API"><a href="#实时架构和API" class="headerlink" title="实时架构和API"></a>实时架构和API</h3><p>实时的数据架构和API支持短时间内处理大量、非结构化的数据，从中获得洞见，并“实时”影响决策。正如<a href="http://www.oreilly.com/data/free/files/big-data-analytics.pdf" target="_blank" rel="external">Mike Barlow所说</a>：“这是关于在正确时间做出更好决定并采取行动的能力，例如在顾客刷卡的时候识别信用卡欺诈，或者当顾客在排队结账的时候给个优惠，或者当用户在阅读某篇文章的时候推送某个广告。”</p>
<p>在<a href="http://blog.cloudera.com/blog/2015/06/architectural-patterns-for-near-real-time-data-processing-with-apache-hadoop/" target="_blank" rel="external">Cloudera的一篇文章</a>中介绍了实时数据处理的4个架构模式，整个流水线架构在Flume/Kafka基础上：</p>
<ul>
<li>数据流吸收：低延迟将事件持久化到HDFS、HBase、Solr等存储机制</li>
<li>近实时（100毫秒以下）的事件处理：数据到达时立即采取警告、标记、转换、过滤等初步行动</li>
<li>近实时的事件分片处理：与前一个模式类似，但是先对数据分片</li>
<li>复杂而灵活的聚合或机器学习拓扑，使用Spark</li>
</ul>
<h3 id="数据湖设计"><a href="#数据湖设计" class="headerlink" title="数据湖设计"></a>数据湖设计</h3><p>数据湖概念最初提出是在<a href="https://www.forbes.com/sites/edddumbill/2014/01/14/the-data-lake-dream/#28439a1869c0" target="_blank" rel="external">2014年Forbes的一篇文章</a>中。它的概念是：不对数据做提前的“优化”处理，而是直接把生数据存储在容易获得的、便宜的存储环境中；等有了具体的问题要回答时，再去组织和筛选数据，从中找出答案。按照<a href="https://www.thoughtworks.com/radar/techniques/data-lake" target="_blank" rel="external">ThoughtWorks技术雷达的定义</a>，数据湖中的数据应该是不可修改（immutable）的。</p>
<p>数据湖试图解决数据仓库几方面的问题：</p>
<ul>
<li>预先的ETL处理终归会损失信息，如果事后才发现需要生数据中的某些信息、但是这些信息又没有通过ETL进入数据仓库，那么信息就无法寻回了。</li>
<li>ETL的编写相当麻烦。数据仓库的schema发生改变，ETL也要跟着改变；应用程序的schema发生改变，ETL也要跟着改变。因此数据仓库通常由一个单独的团队负责，于是形成一个function team，响应速度慢。</li>
<li>数据仓库的分析需要专门的技能，大部分应用程序开发者不掌握，再度强化了数据仓库专门团队；而数据仓库团队其实离业务很远，并不能快速准确地响应业务对数据分析的需求。</li>
</ul>
<p>在数据湖概念背后是康威法则的体现：数据能力与业务需求对齐。它要解决的核心问题是专门的数据仓库团队成为响应力瓶颈。当IT能力与业务需求组合形成一体化团队以后，数据的产生方不再假设未来要解决什么问题，因此也不对数据做预处理，只是直接存储生数据；数据的使用方以通用编程语言（例如Java或Python）来操作数据，从而无需依赖专门的、集中式的数据团队。</p>
<p><a href="https://www.forbes.com/sites/edddumbill/2014/01/14/the-data-lake-dream/#28439a1869c0" target="_blank" rel="external">数据湖实施</a>的第一步是把生数据存储在廉价的存储介质（可能是HDFS，也可能是S3，或者FTP等）。对于每份生数据，应该有一份元数据描述其来源、用途、和哪些数据相关等等。元数据允许整个组织查看和搜索，让每个一体化团队能够自助式寻找自己需要的数据。任何团队都可以在生数据的基础上开发自己的微服务，微服务处理之后的数据可以作为另一份生数据回到数据湖。维护数据湖的团队只做很少的基础设施工作，生数据的输入和使用都由与业务强关联的开发团队来进行。传统数据仓库的多维分析、报表等功能同样可以作为一个服务接入数据湖。</p>
<p>在实施数据湖的时候，有一种常见的反模式：企业有了一个名义上的数据湖（例如一个非常大的HDFS），但是数据只进不出，成了“数据泥沼”（或数据墓地）。在这种情况下，尽管数据湖的存储做得很棒，但是组织并没有很好地消化这些数据（可能是因为数据科学家不具备分析生数据的技术能力，而是更习惯于传统的、基于数据仓库的分析方式），从而不能很好地兑现数据湖的价值。</p>
<h3 id="数据即产品"><a href="#数据即产品" class="headerlink" title="数据即产品"></a>数据即产品</h3><p><a href="http://www.juiceanalytics.com/writing/turning-data-into-product" target="_blank" rel="external">数据产品</a>是指将企业已经拥有或能够采集的数据资产，转变成能帮助用户解决具体问题的产品。Forbes列举了<a href="https://www.forbes.com/sites/lutzfinger/2014/08/19/3-data-products-you-need-to-know/#7f497e0566f6" target="_blank" rel="external">几类值得关注的数据产品</a>：</p>
<ul>
<li>用于benchmark的数据</li>
<li>用于推荐系统的数据</li>
<li>用于预测的数据</li>
</ul>
<p><a href="https://datafloq.com/read/simplest-way-monetize-data-product/980" target="_blank" rel="external">数据产品是数据资产变现的快速途径</a>。因为数据产品有几个优势：开发快，不需要开发出完整的模型，只要做好数据整理就可以对外提供；顾客面宽，一份数据可以产生多种用途；数据可以再度加工。数据产品给企业创造的收益既可以是直接的（用户想要访问数据或分析时收费）也可以是间接的（提升顾客忠诚度、节省成本、或增加渠道转化率）。</p>
<p>在实现数据产品的时候，不仅要把数据打包，更重要的是提供数据之间的关联。数据产品的供应者需要提出洞见、指导用户做决策，而不仅仅是提供数据点。数据产品需要考虑用户的场景和体验，并在使用过程中不断演进。</p>
<h3 id="细粒度授权"><a href="#细粒度授权" class="headerlink" title="细粒度授权"></a>细粒度授权</h3><p>当数据以产品或服务的形式对外提供时，企业可能需要针对不同的用户身份，授权访问不同范围的数据，对应不同的服务水平和不同的安全级别。一些典型的细粒度授权的场景可能包括：企业内部和外部用户能够访问的数据范围不同；供应链上不同环节的合作伙伴能够访问的数据范围不同；付费与免费的用户能够访问的数据范围不同；不同会员级别能够访问的数据范围不同；等等。</p>
<p>允许访问的数据范围属于数据产品/服务自身的业务规则。《微服务设计》的第9章建议，“[服务]网关可以提供相当有效的粗粒度的身份验证……不过，比允许（或禁止）的特定资源或端点更细粒度的访问控制，可以留给微服务本身来处理”。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>为了加速“构建-度量-学习”的精益创业循环，业务与IT共同组成的一体化团队不能依赖于集中式的数据团队来获得对业务的洞察。他们需要规划适宜自己的数据流水线，在必要时引入实时数据架构和API，用数据湖来支撑自服务的数据操作，从而更快、更准确地从数据中获得洞察，影响业务决策。更进一步，数据本身也可以作为产品对内部用户乃至外部用户提供服务，并通过细粒度授权体现服务的差异化和安全性需求。通过建设“数据自服务”这个支柱，企业将真正能够盘活数据资产，使其在创新的数字化业务中发挥更大的价值，这是企业数字化旅程的第三步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/4/25/ditigal-platform-strategy-intro/&quot;&gt;前文&lt;/a&gt;中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2017年读过的好书</title>
    <link href="http://gigix.thoughtworkers.org/2018/1/1/2017-readings/"/>
    <id>http://gigix.thoughtworkers.org/2018/1/1/2017-readings/</id>
    <published>2018-01-01T05:01:00.000Z</published>
    <updated>2018-01-01T04:09:32.786Z</updated>
    
    <content type="html"><![CDATA[<p>今年读了66本书，不过有很大部分是工作需要。而且不知道什么原因，中间读的很多关于内亚性的书都只标了四星……</p>
<h2 id="仅存的内亚性"><a href="#仅存的内亚性" class="headerlink" title="仅存的内亚性"></a>仅存的内亚性</h2><ul>
<li><a href="https://book.douban.com/subject/25883305/" target="_blank" rel="external">阿拉伯的劳伦斯 : 战争、谎言、帝国愚行与现代中东的形成</a> - 一战武器的先进和指挥、情报等其他技术的落后形成一个古怪的组合，让人觉得好多事情都不可理喻。这种对世界充满未知的感觉恐怕未来很多年不会再有了。</li>
</ul>
<h2 id="科技与社会的交集"><a href="#科技与社会的交集" class="headerlink" title="科技与社会的交集"></a>科技与社会的交集</h2><ul>
<li><a href="https://book.douban.com/subject/27021779/" target="_blank" rel="external">智慧转型：重新思考商业模式</a> - 有理论有工具有案例，实在，好用</li>
<li><a href="https://book.douban.com/subject/26916525/" target="_blank" rel="external">Goodbye iSlave : A Manifesto for Digital Abolition</a> - 不仅谈了工厂里的奴隶，还谈到了作为消费者被成瘾性数字产品捆绑而创造无偿内容的另一种奴隶，从而完整展现了数字奴隶制的生态系统。极具洞见，并且只有在中国才能写出。#<a href="https://www.douban.com/update/topic/%E6%95%B0%E5%AD%97%E5%8C%96" target="_blank" rel="external">数字化</a># #<a href="https://www.douban.com/update/topic/%E6%99%BA%E8%83%BD%E8%B5%8B%E6%9D%83" target="_blank" rel="external">智能赋权</a>#</li>
<li><a href="https://book.douban.com/subject/6435517/" target="_blank" rel="external">路易·波拿巴的雾月十八日</a> - 感觉就跟邱林川讲的保守主义回潮有异曲同工之妙，历史第一次是正剧、第二次是闹剧，第三次是什么呢？</li>
</ul>
<h2 id="早就想看的好故事"><a href="#早就想看的好故事" class="headerlink" title="早就想看的好故事"></a>早就想看的好故事</h2><ul>
<li><a href="https://book.douban.com/subject/25796066/" target="_blank" rel="external">恶棍列传</a> - 超级漂亮的小故事，最爱博尔赫斯的故事了</li>
<li><a href="https://book.douban.com/subject/20515828/" target="_blank" rel="external">傅科摆</a> - 太博大了…艾柯编造的神学阴谋论让达芬奇密码就像刺客信条一样直白</li>
<li><a href="https://book.douban.com/subject/26318111/" target="_blank" rel="external">麦田里的守望者</a> - 这才叫中二嘛……我是为素子姐来看塞林格的。</li>
<li><a href="https://book.douban.com/subject/1858513/" target="_blank" rel="external">月亮和六便士</a> - 所谓四十不惑的“不惑”，大概就该是这样的形式吧，知道自己要做什么而不惑于其他，多么令人羡慕。</li>
<li><a href="https://book.douban.com/subject/2035162/" target="_blank" rel="external">刀锋</a> - 求财的得财，求死的得死，求解脱的得解脱，真是一场欢喜大戏。</li>
<li><a href="https://book.douban.com/subject/2165037/" target="_blank" rel="external">荒原狼</a> - 最后终于和荒原狼和解了，这还真是一个美好的故事。</li>
</ul>
<h2 id="比日系推理更好的国产推理"><a href="#比日系推理更好的国产推理" class="headerlink" title="比日系推理更好的国产推理"></a>比日系推理更好的国产推理</h2><ul>
<li><a href="https://book.douban.com/subject/26614581/" target="_blank" rel="external">暗黑者外传：惩罚</a> - 这个故事比欧门尼德系列还好，诡计设置很妙</li>
<li><a href="https://book.douban.com/subject/26923390/" target="_blank" rel="external">长夜难明</a> - 推理其实稍微有点弱，但是故事设置得好，抓人。</li>
<li><a href="https://book.douban.com/subject/26612116/" target="_blank" rel="external">真相推理师：幸存</a> - 这已经甩东野十条街了好吗！瞬间爱上这个作者！（虽然感情戏写得很挫…）</li>
<li><a href="https://book.douban.com/subject/6794021/" target="_blank" rel="external">红手指</a> - 谜题很棒，对人性的描写更是精彩，看完心里堵得慌。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年读了66本书，不过有很大部分是工作需要。而且不知道什么原因，中间读的很多关于内亚性的书都只标了四星……&lt;/p&gt;
&lt;h2 id=&quot;仅存的内亚性&quot;&gt;&lt;a href=&quot;#仅存的内亚性&quot; class=&quot;headerlink&quot; title=&quot;仅存的内亚性&quot;&gt;&lt;/a&gt;仅存的内亚性&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>保持现状与有意为之的无知</title>
    <link href="http://gigix.thoughtworkers.org/2017/12/12/minded-unmindedness/"/>
    <id>http://gigix.thoughtworkers.org/2017/12/12/minded-unmindedness/</id>
    <published>2017-12-12T05:01:00.000Z</published>
    <updated>2017-12-11T10:43:43.343Z</updated>
    
    <content type="html"><![CDATA[<p><em>（本文同时发表于<a href="http://tootopia.me/article/8761" target="_blank" rel="external">土逗公社</a>）</em></p>
<p>1970年9月，萨尔瓦多·阿连德当选智利总统。智利人民用自己的选票，选择了他倡导的社会主义路线。执政之后，阿连德政府开始收购智利最重要的工业企业，将它们纳入国家控制。到1971年底，国家开发公司已经必须负责指导下属150多家企业，包括智利20家最大企业中的12家。国有经济的高速发展创造了一个笨重的、智利政府从未见过的怪兽，管理已经成为国有化进程的一个核心问题。为此，阿连德政府联系到了英国控制论学者斯塔福·比尔。比尔发现，控制论中关于反馈与掌控的思想能够指导开发一套新的科技系统来改善国有经济的管理，从车间直到国家开发公司办公室。这样一个系统将会搭建起实时信息交换的网络，管理者和政府官员将能够基于实时数据来做决策，并能够快速调整行动。这个系统，就是传奇的Cybersyn，距今<a href="/2016/12/24/cybersyn-1/">半个世纪前出现在智利的大数据系统</a>。</p>
<p><img src="http://7xpvay.com1.z0.glb.clouddn.com/ec8ebcd0-b3ec-11e6-96cf-69a982993485"></p>
<p>按照比尔的构想，这个基于他的“自由机器”和“可生存系统模型”理论构建起来的大数据系统，将能够兼顾国家经济整体方向的一致性与企业的自主性，并且充分调动一线工人参与企业管理体制的设计与执行。然而在Cybersyn系统实施的过程中，智利科技专家们的实践与政府的政治理念并不吻合。虽然阿连德坚持要系统鼓励工人参与管理，但工人在Cybersyn实施中扮演的角色实际上是被边缘化的。更多时候，技术官僚主义在基层车间压倒了意识形态。尽管收到明确的指示要与工人委员会协作，但工程师们经常并不这样做，而是带着优越感看待工人，或是完全忽视工人、只和管理者打交道。</p>
<p>1973年9月，皮诺切特的军事政变推翻了智利社会主义政府，阿连德本人丧生于总统官邸。政变之后，军队中止了Cybersyn项目，团队的工作成果要么被抛弃、要么被破坏。在新的军政府和新自由主义“休克疗法”背景下，Cybersyn没有任何意义。然而客观地说，即使没有军事政变，Cybersyn是否就能如起初设计的成为对劳工赋权、鼓励工人参与管理、兼顾民主与集中的信息系统，比尔对此也并非没有怀疑。为何科技系统——甚至是那些原本为了革命的目标而建立的科技系统——常常倾向于维持社会与经济的现状，这是Cybersyn留下的值得反思的若干问题之一。</p>
<p>1973年，比尔反复思考了Cybersyn遭遇的各种问题，包括项目团队在科技上花的心思多过组织变革、智利工人没能用Cybersyn来辅助生产组织和管理等，并把自己的思考写成了《现状》（<em>Status Quo</em>）一文。他在文中写道：</p>
<blockquote>
<p>对于马克思而言，资本是邪恶的敌人；对我们而言，资本仍然是邪恶的，然而敌人是<strong>保持现状</strong>。</p>
</blockquote>
<p>比尔认为，科技的发展，尤其是通信与计算机领域的发展，使得资本主义已经发展出了新的生产形式与新的剥削关系。在这个新的关系中，不仅有资本家与劳动者的对立，受过高等教育的专业人士扮演了一个重要的角色。比尔从控制论的角度指出，官僚体系总是偏爱保持现状，而专业人士扮演的则往往是保持现状的力量、而非推动革命的力量。</p>
<p>仍然以Cybersyn为例：尽管顶层设计把它视为一个“革命的装置”，但在科技团队内部，很多人认为应该把意识形态放在一边，专注于科技性的目标，例如提升政府监管经济的能力、解决经济的效率问题、消灭官僚主义。Cybersyn项目主管埃斯佩霍说，很多科技专家想要加入这个项目是因为它“充满智力挑战”，这些科技专家对于科技与政治之间的关系有着不同的解读，并非所有人都赞同阿连德的政治理念。这个团队得以持续“健康”运转的基础，也许就是——如埃斯佩霍所做的——搁置意识形态的目标，专注于科技的目标。于是，专业人士团队基于自身利益角度出发的“求生意志”，就成为了一种保持现状的动力。</p>
<p>时隔四十多年以后，我们在今天的科技-社会的讨论中看到，这种来自专业人士角度的保持现状的动力变得更加强大，甚至时常被称为“科技本身的逻辑”（凯文·凯利还专门写了一本书来讨论“科技要什么”）。比尔在1970年代的反思让我们看到，这种“科技本身的逻辑”，经常是来自专业人士有意而为之的对意识形态、对社会问题的搁置。专业人士倾向于将自己的工作描述为纯粹科技的、“政治中立的”，使得自己不必接受“我的工作对社会有何影响”的追问。在快播案、魏则西案等一系列关于互联网伦理的讨论中，我们皆听到了这种纯粹科技论的辩解。我把这种“将自己的专业工作与社会/政治/伦理问题划清界限”的努力，称为<strong>“有意而为之的无知”（minded unmindedness）</strong>。</p>
<p>这种有意而为之的无知，部分出自科技本身的复杂性与抽象性。例如广为讨论的人工智能技术，无论是向读者推荐视频、还是在读者的搜索页面显示广告，从技术的角度都可以归约为一系列在高维矩阵上进行的线性代数运算（以及与之相关的特征工程、算法优化等工作）。这种高度的复杂性与抽象性，使得科技专业人士能够埋头于诸如“计算稀疏矩阵中向量间的欧氏距离”这样的纯技术问题，而毫无愧疚地无视技术的应用对社会产生何种影响，并且在面临来自人文社科领域的置疑时轻易地给自己构建起坚固的保护壳。</p>
<p>然而问题并非只出在科技专业人士这一边。人文社科领域的专业人士同样有自己的有意而为之的无知，表现为对新技术的盲目恐惧，或者说是“将自己的专业工作与科技问题划清界限”。于是我们看到，来自人文社科领域的关于科技伦理的讨论经常流于表面，例如用科幻小说的方式讨论“强人工智能”，而缺乏对机器学习、神经网络等核心技术及其应用场景和局限性的基本了解。其结果是，来自人文社科领域对新科技的批评要么“脱靶”，要么在科技人士实用主义的反问“那你说该怎么办”面前黯然失语。像<a href="https://www.ted.com/talks/cathy_o_neil_the_era_of_blind_faith_in_big_data_must_end" target="_blank" rel="external">Cathy O’Neil</a>这样能准确地指出科技系统中问题所在、能提出行之有效的解决方案、能持续量化监督科技公司改进的跨学科左翼人士，实在是太稀缺了。</p>
<p>解决这个困境需要科技与人文社科两边专业人士的共同努力。科技的专业人士当然需要更多地了解社会的问题及其渊源、更多地反思自己工作与社会/政治/伦理问题之间的关系。另一方面，我在这里想强调的是，人文社科的专业人士应该打破自己对新技术的盲目恐惧，不能坐等科技专业人士的觉醒，他们需要立即开始学习编程和人工智能的基础，使自己掌握有效批判的武器。</p>
<p>实际上这两项技术的门槛比很多人想象的要低得多。除了克服入门时的恐惧与不适，Python编程需要的理科知识基础约等于0——我曾经与同事半开玩笑地说，我们开发的软件只需要小学高年级数学水平，四则运算都用不全，主要是除法不怎么用。另一个学习编程的门槛是英语，然而人文社科领域的年轻学者大多具备相当良好的英语读写能力。自学一门编程语言（例如Python）这件事，我认为每位人文社科学者应该都能做到。</p>
<p>人工智能技术所需的理科基础则更高一些：如果想要比较深入地了解其原理（而不止是使用几个工具），需要微积分和线性代数的基础知识。以高中水平的数学能力，在一学期时间里重新捡回这两门课应该是可以做到的。（听说一些高校的文科院系大一已经不上高数课，我认为这是一个错误的导向。）</p>
<p>除了这一点数学基础以外，大部分数据处理和机器学习算法可以说是出人意料地简单。John Foreman的<a href="https://book.douban.com/subject/24550921/" target="_blank" rel="external">Data Smart</a>一书教它的读者用Excel（是的，你没看错，就是你每天用的Excel）实现分类、推荐、预测等典型的机器学习算法，我认为这本书非常有助于破除笼罩在“人工智能”这个概念之上的神秘感。另外我也强烈推荐人文社科学者在学了一点Python基础之后尝试一下华盛顿大学的<a href="https://www.coursera.org/specializations/machine-learning" target="_blank" rel="external">机器学习公开课</a>。学完它的第一门课程，你就会发现，机器学习（乃至“人工智能”）其实是一件很简单、毫不神秘的事情——这一点，对岸的科技工作者们其实一直都知道。</p>
<p>科技与人文社科的失联，会导致整个左翼运动陷入一种尴尬的境地：对于资本用以牟利并同时制造社会不公的科技工具，科技工作者看不到其社会危害所在，人文学者又无法提出有效的批判和改进方向。无形之中，双方对于对方专业领域的有意为之的无知，都在帮助保持当前科技-社会结构的现状。要打破这种现状，需要双方都开始努力了解对方的专业领域，包括——我今天特别想强调的——人文社科学者学一点编程和人工智能技术。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;（本文同时发表于&lt;a href=&quot;http://tootopia.me/article/8761&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;土逗公社&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1970年9月，萨尔瓦多·阿连德当选智利总统。智利人民用自己
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习项目如何管理：现状</title>
    <link href="http://gigix.thoughtworkers.org/2017/12/12/ml-project-management-current-situation/"/>
    <id>http://gigix.thoughtworkers.org/2017/12/12/ml-project-management-current-situation/</id>
    <published>2017-12-12T05:01:00.000Z</published>
    <updated>2017-12-08T12:23:10.376Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.atlassian.com/blog/software-teams/3-ways-ai-will-change-project-management-better" target="_blank" rel="external">Atlassian今年4月的一篇博客</a>提出，到2020年有87%的Jira用户认为他们的工作会被AI改变。具体到项目管理上，Atlassian的观点是，AI首先会作为项目管理助手进入我们的视野，然后透过数据拓展我们对项目的理解，更进一步还能通过主动猜测、倡导优秀实践、创造新的元数据层等方式弥补数据的缺失，最终对项目提出有益的建议。</p>
<p><img src="https://orhachaim.co.il/wp-content/uploads/thumbs/1-338ubis538emc7477jajgq.jpg"></p>
<p>然而愿望是美好的现实是骨感的。还不要说在项目管理中使用机器学习，关于机器学习的项目应该怎么管理，业界似乎已经有很多不甚圆满的经历。例如一位创业者谈他们如何<a href="https://medium.com/xeneta/boosting-sales-with-machine-learning-fbcf2e618be3" target="_blank" rel="external">用自然语言处理技术推动销售</a>。看起来他们尝试了各种不同的数据源、多种特征工程的方法、以及多种算法，接下来还有很多想要尝试的东西。从这个故事中我们看不到的是，他们给自己设置的目标是什么、目前的进展是什么、基于什么原则在指导每一次的尝试。简而言之，这位创业者的机器学习项目并没有任何有效的管理。</p>
<p>另一个<a href="https://zhuanlan.zhihu.com/p/26435192" target="_blank" rel="external">同样缺乏管理的机器学习项目</a>就没有那么幸运。年薪百万的数据科学家被认为“没有给公司带来实际价值。高管们不知道他们具体做了什么，业务人员每周都给他们提出预测需求，却很少能在短时间得到回应”。与前面一个故事相比，这里的数据科学家需要在别人的管理之下开展工作，管理方法的欠缺无疑是矛盾累积和激化的原因之一。针对这个故事，作者提出了五点非常抽象的建议：1.从最简单的模型开始；2.探索更多问题；3.用全部的数据和特征训练模型；4.业务驱动模型；5.专注于自动化。我认为这几点并不能引导这家公司的管理者更有效地管理他们的数据科学家。</p>
<p>这种缺乏管理方法的现象，一个重要的原因是典型的IT管理者对机器学习缺乏必要的了解（甚至更糟糕，有一些似是而非的半吊子的了解）。目前而论，咨询公司和商业/科技传媒在普及“必要的了解”方面并没有起到很好的作用。<a href="https://www.mckinsey.com/industries/high-tech/our-insights/an-executives-guide-to-machine-learning" target="_blank" rel="external">麦肯锡2015年的文章</a>说，关于机器学习，企业领导层需要了解的问题还是“传统行业能通过机器学习获得什么新的洞察”这种高层面的，提出的建议也是“机器学习要分描述、预测、处方三步走”这样的宏观建议。当然麦记的建议历来是面向CxO级别的，不落到项目管理层面也很正常。</p>
<p>HBR也在2015年讨论“<a href="https://hbr.org/2015/07/what-every-manager-should-know-about-machine-learning" target="_blank" rel="external">每个管理者都需要了解的机器学习知识</a>”，提出了一些很重要的点：不光需要大数据、还需要广泛的数据；机器学习只是做预测、不提供因果性；要区分信号与噪音（还提到了特征提取、规则化、交叉验证等具体技术）；以及一些容易犯的错误（例如强行归因、不恰当的期望、迷信大数据量、对人的判断利用不足等）。但这篇文章的问题在于，它没有提供一套成型的工作方法。这些技术应该什么时候用，这些错误会在什么时候犯，文章没有提供出来，于是读者仍然被置于一个“等你该知道的时候你就知道了”的状态，很难对项目管理带来立竿见影的改变。</p>
<p><a href="https://machinelearningmastery.com/how-to-layout-and-manage-your-machine-learning-project/" target="_blank" rel="external">2014年的一篇博客</a>着重谈机器学习项目的布置，包括应该有哪些目录、数据怎么管理、代码怎么组织等非常具体的实践。作者提出了项目流程的几个原则：透明；可维护；模块化；可迁移；可复制；效率。关于项目的可复制性，作者也从工程实践角度<a href="https://machinelearningmastery.com/reproducible-machine-learning-results-by-default/" target="_blank" rel="external">提出了10条原则</a>。在工程实践这个角度，这位作者给出的指导原则具有很好的可操作性。</p>
<p>但是在项目管理角度，行业仍在继续探索。今年7月InfoQ的一篇文章讨论<a href="http://www.infoq.com/cn/articles/agile-development-of-artificial-intelligence-applications" target="_blank" rel="external">如何开发机器学习的MVP</a>，作者总结了四个思考步骤：第一问题是否能转化成分类/回归的问题；第二目标是否是容易获取、客观无偏差的数据；第三是问题的预测目标，因果关系是什么；第四是这个问题是不是一个真的业务需求。这也是几个很重要的思考点，不足之处仍然是缺乏系统性，并且缺落地的方法指导。</p>
<p>有一篇博客提出了很有意义的问题：<a href="https://zhuanlan.zhihu.com/p/20729176" target="_blank" rel="external">机器学习项目为什么未实现敏捷开发</a>？作者发现算法类项目流程漫长，并结合之前实践Scrum的经验，提出了一些可能可以优化的方面，尤其是在团队组织形式上，是否可以参考敏捷的全功能团队经验。作者并且提出了一个重要的问题：对算法模型的评估是否必须在线上进行？或者换个角度来问这个问题：如何降低线下模型评估的偏差程度？</p>
<p>敏捷软件开发之所以成为一种被广泛接受的软件开发方法论，不仅仅是因为它有高阶的思想支撑和指导原则，更重要的是它有一系列非常具体、非常可落地的实践。这些实践对于一线工作者的意义在于：(1)知道什么时候该做什么事；(2)知道什么时候该看什么指标；(3)知道什么时候可能有什么风险。机器学习类的项目要真正普及，也会需要这么一套具体可落地的实践指导。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/blog/software-teams/3-ways-ai-will-change-project-management-better&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;At
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据管理平台（DMP）综述</title>
    <link href="http://gigix.thoughtworkers.org/2017/12/3/dmp-overview/"/>
    <id>http://gigix.thoughtworkers.org/2017/12/3/dmp-overview/</id>
    <published>2017-12-03T05:01:00.000Z</published>
    <updated>2017-12-02T16:55:25.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在线广告技术生态"><a href="#在线广告技术生态" class="headerlink" title="在线广告技术生态"></a>在线广告技术生态</h2><p>ADN（广告网络）批量地运营媒体的广告位资源，按照人群或上下文标签售卖给需求方，并用竞价的方式决定流量分配。广告网络的结算以按点击付费（Cost per Click，CPC）的方式为主。面向多个ADN或媒体按人群一站式采买广告并优化投入产出比的需求方产品叫交易终端（Trading Desk，TD）。</p>
<p>在ADN中，核心的竞价逻辑是封闭的，不能满足需求方越来越明确的利益要求，于是市场上产生了大量聚合各媒体剩余流量并采用实时竞价方式为他们变现的产品形态——广告交易平台（AD Exchange，ADX）。</p>
<p>在ADX上通过实时竞价的方式，按照定制化人群标签购买广告，这样的产品就是需求方平台（Demand Side Platform，DSP）。对应的管理媒体广告位的产品就是供给方平台（Supply Side Platform，SSP）。</p>
<p>DSP会向DMP（数据管理平台）寻求数据支持，达到更精准的投放。</p>
<p><img src="http://www.rtbchina.com/wp-content/uploads/2017/10/China-Programmatic-Ad-Tech_2017Q3_R-1.png"></p>
<h2 id="在线广告业务中数据的价值"><a href="#在线广告业务中数据的价值" class="headerlink" title="在线广告业务中数据的价值"></a>在线广告业务中数据的价值</h2><p>对精准广告业务产生直接贡献的数据有以下几类：</p>
<ol>
<li>用户标识。对广告而言，如何确定哪些行为来自于同一个用户是非常关键的问题。</li>
<li>用户行为。转化、预转化、搜索广告点击、展示广告点击、搜索点击、搜索、分享、页面浏览、广告浏览等在线行为是可以被广泛采集并且对于受众定向或广告决策有明显作用。这些行为又可以分为决策行为（转化、预转化）、主动行为（广告点击、搜索、搜索点击）、半主动行为（分享、网页浏览）、被动行为（广告浏览）。</li>
<li>人口属性。一般来说只有与用户实名身份绑定的服务可以得到此信息，也可以利用网络行为数据进行人口属性标签的预测，但准确程度有限，而且仍然需要标定的数据用于训练。</li>
<li>地理位置。地理位置信息随能获得的精度不同，其用途也有相当大的差异。</li>
<li>社交关系。社交关系可用于用户兴趣的平滑。</li>
</ol>
<h2 id="数据管理平台的功能"><a href="#数据管理平台的功能" class="headerlink" title="数据管理平台的功能"></a>数据管理平台的功能</h2><p>DMP日渐火爆源于广告主对投放效果的更高追求以及对营销浪费更低的容忍度，DMP即是为解决这些问题而生。广告主希望更精准的对目标人群进行广告投放，如果投放的对象对某些广告不感兴趣，却反复被广告轰炸只会适得其反。如果企业能够在投放广告或其他营销手段前就能对受众进行具体、精准的识别，广告投放的效果会因此增强。</p>
<p>数据的来源分为三类：</p>
<ul>
<li>第一方数据：广告主自有用户数据，包括网站/APP监测数据、CRM数据、电商交易数据等。</li>
<li>第二方数据：广告商在广告投放过程中积累的业务数据，如DSP平台业务中积累的受众浏览广告、点击广告等相关数据。</li>
<li>第三方数据：非直接合作方拥有的数据，如运营商数据等。</li>
</ul>
<p>第三方数据中，BAT的数据只能应用于各自的生态圈，实际产生效果并不容易；运营商的数据不一定总能通过商务关系得到，又有各地军阀割据的问题、有流量劫持等争议问题，而且越来越多网站和APP采用加密，运营商看不到了；垂直领域的数据相对比较细和专，质量高。</p>
<p>DMP有下面几个核心的产品功能：</p>
<ol>
<li>它可以为网站（可以是媒体也可以是广告主网站）提供受众定向功能，并将得到的用户标签应用于网站业务。</li>
<li>如果媒体网站授权，DMP可以提供接口对加工出来的用户标签进行变现，并与网站分成。</li>
<li>广告主网站可以通过DMP广告采买渠道进行更方便的数据对接。</li>
</ol>
<p><img src="http://www.iyunying.org/wp-content/uploads/2017/03/1e471f277c0d6bf12d49bef4dc7cb780.png"></p>
<p>可以从以下几个角度对DMP进行评估：</p>
<ol>
<li>数据来源。有多少优质的数据源可以利用。在中国能使用BAT的数据是一个重要因素，腾讯广点通和阿里达摩盘在这方面有优势。</li>
<li>数据处理。进入DMP的数据（包括结构化的和非结构化的）能多灵活地处理。</li>
<li>ID联结。DMP能多准确地联结来自不同数据源的用户信息。</li>
<li>受众区分。对受众分群的多样性和准确性。受众定向标签可以分为人口学标签、上下文标签、行业定制标签三类。</li>
<li>数据建模。通过对数据的分析提供look-alike或其他更深度的洞察和投放指导。</li>
<li>与程序化广告平台的整合度。</li>
</ol>
<p><img src="https://media.licdn.com/mpr/mpr/AAEAAQAAAAAAAAerAAAAJDIxODdmZjBmLTJiYzItNDNhNi04M2U2LTY1Y2EwOTBkYjJmNg.png"></p>
<p>这里有一个<a href="https://adexchanger.com/data-exchanges/oracle-dmp-still-recognized-used-salesforce-dmp-others-ascending/" target="_blank" rel="external">国外DMP产品的排名</a>。Oracle收购的BlueKai排名第一。SalesForce收购的Krux紧随其后。</p>
<p>针对BAT各自DMP的功能，这里有一个<a href="http://www.pmcaff.com/article/index/630074472566912" target="_blank" rel="external">分析对比</a>。</p>
<h2 id="为何企业要自建DMP"><a href="#为何企业要自建DMP" class="headerlink" title="为何企业要自建DMP"></a>为何企业要自建DMP</h2><p>自建程序化广告系统的主要目的是增加透明度、控制力和效率：</p>
<ul>
<li>透明度：企业希望清楚知道广告投放的效果，不想被欺诈。据<a href="http://adage.com/article/digital/ana-report-7-2-billion-lost-ad-fraud-2015/302201/" target="_blank" rel="external">ANA的统计</a>，可能有多达37%的在线广告点击是虚假的。</li>
<li>控制力：企业拥有越来越多的第一方数据，希望有更强的数据掌控，尤其不希望自己的第一方数据被广告平台用来帮助竞争对手投放（以增强广告平台DMP能力的形式）。</li>
<li>效率：企业希望基于DMP能做更复杂的分析、更多的实验、与市场营销更紧密配合。</li>
</ul>
<p>Target选择自建DMP，分析师认为除了以上理由之外，Target还希望充分利用自己已有的客源流量，把自己变成数字化媒体。</p>
<p>自建DMP需要有以下功能模块：</p>
<ul>
<li>数据的获取入口</li>
<li>数据的清洗，整合</li>
<li>标签的计算，挖掘</li>
<li>打标签及标签的展示</li>
<li>用户分群</li>
</ul>
<p>前三块是DMP的基础，虽然看不见，但是决定了一个DMP的质量。后两块是比较偏产品前端的内容，DMP是否简单易用，是否友好易懂就是这部分体现出来的。</p>
<p><img src="http://img.pmcaff.com/fetch_fileecf894d68088f1fd6a51c2da6faab00a-picture"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/24808308" target="_blank" rel="external">程序化广告生态实用手册</a></li>
<li><a href="http://www.chinawebanalytics.cn/dmp-review-and-how-to-implement-dmp-in-an-enterprise/" target="_blank" rel="external">DMP全面剖析以及企业DMP应用可执行指南</a></li>
<li><a href="http://www.pmcaff.com/article/index/630074472566912" target="_blank" rel="external">DMP（数据管理平台）产品之我见</a></li>
<li><a href="http://www.pmcaff.com/article/index/1034496870584448" target="_blank" rel="external">关于DMP数据管理平台的认知和浅析</a></li>
<li><a href="https://book.douban.com/subject/26596778/" target="_blank" rel="external">计算广告</a></li>
<li><a href="http://adage.com/article/digital/ana-report-7-2-billion-lost-ad-fraud-2015/302201/" target="_blank" rel="external">ANA: Ad Fraud Will Cost $7.2 Billion in 2016, Up From 2015</a></li>
<li><a href="https://www.linkedin.com/pulse/how-build-good-dmp-platform-dan-zhang/" target="_blank" rel="external">How to build a good DMP platform</a></li>
<li><a href="http://adage.com/article/cmo-strategy/advertise-a-target-shopper-luck/305753/" target="_blank" rel="external">Is Target The Next Digital Media Giant?</a>* <a href="https://adexchanger.com/data-exchanges/oracle-dmp-still-recognized-used-salesforce-dmp-others-ascending/" target="_blank" rel="external">Oracle DMP: Still The Most Recognized And Used, But Salesforce DMP And Others Are Ascending</a></li>
<li><a href="http://www.thedrum.com/opinion/2016/04/15/outsourced-or-house-advertisers-shift-their-thinking-about-house-programmatic" target="_blank" rel="external">Outsourced or in-house? Advertisers shift their thinking about in-house programmatic</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在线广告技术生态&quot;&gt;&lt;a href=&quot;#在线广告技术生态&quot; class=&quot;headerlink&quot; title=&quot;在线广告技术生态&quot;&gt;&lt;/a&gt;在线广告技术生态&lt;/h2&gt;&lt;p&gt;ADN（广告网络）批量地运营媒体的广告位资源，按照人群或上下文标签售卖给需求方，并用竞价的方
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>智能技术的伦理风险：研究框架</title>
    <link href="http://gigix.thoughtworkers.org/2017/11/28/intelligent-disempowerment-research-framework/"/>
    <id>http://gigix.thoughtworkers.org/2017/11/28/intelligent-disempowerment-research-framework/</id>
    <published>2017-11-28T05:01:00.000Z</published>
    <updated>2017-11-26T16:16:23.771Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/11/27/intelligent-disempowerment/">前一篇文章</a>中我们已经提到，当下常见的关于智能技术伦理危害与风险的讨论总体上强调人工智能对人类整体的影响，并不凸显其对当前社会不同人群造成不同影响的情况，并且在分析这些风险时往往聚焦于技术层面，而并未将社会和政治层面的因素纳入考虑。从这个角度出发的分析难免失于片面，无法充分认识智能技术的潜在风险。由于缺乏一个全面的、结合科技与人文视角的研究框架，使得对于这一问题的研究普遍零散而不成体系，且容易陷入“机器 vs. 人类”的未来学视角。</p>
<p>例如在分析智能技术对就业造成的影响时，以<a href="https://www.wired.com/2012/12/ff-robots-will-take-our-jobs/" target="_blank" rel="external">Kevin Kelly</a>为代表的未来学家认为人工智能取代人类工作是必然趋势，并乐观地相信“被失业”的人群能找到更有价值的工作。另一些研究者则认为应对大规模结构性失业的关键是社会保障，例如<a href="https://www.brookings.edu/blog/techtank/2015/10/26/how-robots-artificial-intelligence-and-machine-learning-will-affect-employment-and-public-policy/" target="_blank" rel="external">在就业之外提供全民最低收入保障</a>。然而更早的计算机伦理学、乃至科技伦理学研究已经指出，就业对于人而言不仅是提供生活保障的方式。正如<a href="https://book.douban.com/subject/4928961/" target="_blank" rel="external">维纳在70多年前就已经指出</a>的，人需要发挥创造力和灵活性，人需要做决策、需要感受到自己为社会与他人做出的贡献，而工作是满足这些需求、使人获得尊严与成就感的重要途径。如果只看到失业对收入的影响，忽视智能技术在其他方面对人的影响，便无法全面理解智能技术的潜在风险。</p>
<p>Peter Cullen提出了一个用于<a href="http://informationaccountability.org/the-need-for-an-ethical-framework/" target="_blank" rel="external">讨论伦理问题的框架</a>。在这个框架中，抽象的“伦理”被表述为“价值观”——即个人与群体定义人生意义或集体目标所基于的核心信念与理想，随后价值观再以“原则”的形式具体表述出来，从原则引申出“政策”或“指导方针”，最后通过规则、流程、评估、培训、工具等方式得以“实现”。</p>
<p><img src="http://informationaccountability.org/wp-content/uploads/Ethical-Framework-Slide-JPEG-640x421.jpg"></p>
<p>早在1950年代，<a href="https://book.douban.com/subject/4928961/" target="_blank" rel="external">维纳就已经指出</a>，在与自动化机器并存和协作这个上下文中，需要关注人的一些核心价值，例如生命、健康、快乐、安全、资源、机会、知识等。基于对这些价值观的重视，他提出了计算机伦理的4条基本原则：</p>
<ul>
<li><strong>自由原则</strong>：人应该有选择各种可能性的自由。</li>
<li><strong>平等原则</strong>：不同的人群应该享有同样的权利。</li>
<li><strong>博爱原则</strong>：人与人之间的善良愿望应该得到鼓励。</li>
<li><strong>最小侵犯自由原则</strong>：团体对个人自由的侵犯应当限制在最低程度。</li>
</ul>
<p>基于类似于这些被普遍认同的价值观和基本原则，在智能技术的上下文里，不同的研究者提出了大致相似的一些指导原则。例如IBM在“<a href="http://www.ibmbigdatahub.com/whitepaper/ethics-big-data-and-analytics" target="_blank" rel="external">大数据与分析的伦理要求</a>”中指出，技术本身可能是技术中立的，但技术的使用者不仅应该考虑技术的可能性、组织的诉求和法律的约束，还应该考虑一系列伦理的指导原则，包括适应社会环境、给人们选择的权利、使用合理的数据深度和广度、适当的数据和分析结果所有权、公正性、访问权、可追责等。再例如，King和Richards提出了几条<a href="https://papers.ssrn.com/sol3/papers.cfm?abstract_id=2384174" target="_blank" rel="external">大数据伦理规范</a>：</p>
<ol>
<li>隐私应该是信息规则的基础</li>
<li>分享出来的私人信息应该仍然保密</li>
<li>大数据需要透明性</li>
<li>大数据可能导致身份泄露</li>
</ol>
<p>针对“隐私”这个受到广泛关注的话题，Rijmenam提出了几条<a href="https://datafloq.com/read/big-data-ethics-4-principles-follow-organisations/221" target="_blank" rel="external">大数据隐私指导原则</a>：企业应该更主动地提供透明度；从系统设计之初就考虑简明性；为潜在的安全事故做好准备；在所有环节全面关注数据隐私。英国商业伦理研究所（IBE）则提出了<a href="http://www.ibe.org.uk/userassets/briefings/b52_bigdata.pdf" target="_blank" rel="external">6个与隐私相关的问题</a>，包括数据如何使用、如何采集个人数据、如何评估风险、如何保护数据等。</p>
<p>除了隐私之外，另一个重要的问题是智能技术的可追责性（accountability）。正如Harpin所说，在社会越来越多地由算法运转的同时，机器学习等智能技术使支撑社会运转的<a href="http://caa-ins.org/archives/442" target="_blank" rel="external">算法变得越来越不透明</a>。<a href="https://www.technologyreview.com/s/602933/how-to-hold-algorithms-accountable/" target="_blank" rel="external">MIT的两位研究者指出</a>，智能算法可能在人无法理解的情况下强化结构性歧视、拒绝为某些人群服务、甚至破坏民主制度的根基。因此他们提出了算法可追责性的五项指导原则：算法应该负责任、可解释、精确、可审查、公平。围绕着这五项指导原则，他们又提出了更加<a href="http://www.fatml.org/resources/principles-for-accountable-algorithms#social-impact" target="_blank" rel="external">具体的实施策略</a>，建议至少在系统设计、上线前和上线后分别进行一次评估，并列举了一些基本的评估问题。</p>
<p>这种将“系统生命周期”作为一个维度纳入伦理框架的方式，在Etlinger这里得到了进一步发挥，形成了一个二维的<a href="https://www.prophet.com/thinking/2015/06/new-report-the-trust-imperative-a-framework-for-ethical-data-use/" target="_blank" rel="external">大数据伦理框架</a>：数据使用的伦理原则（例如有益于人群、推动进步、可持续、尊重、公平）构成一个坐标，数据的生命周期（例如数据采集、处理、分析、存储、治理、使用、交流）构成另一个维度，两个维度交织形成一个完善的伦理框架。</p>
<p><img src="https://ci5.googleusercontent.com/proxy/vtbKA28j-O_SbXi1ZM2fdRwUMPLyY73exwuM69pLG14HQVOmgsNPvAchGxaq8pZIeLxc3lUsqSIJls2ckxUNRPPs6r8uL0npd7rpbGRsVFDlGrfJT0cxLdc3HTGbJ0fO1D-88jc91JhnwF5cFfRGn5-U=s0-d-e1-ft#https://susanetlinger.files.wordpress.com/2015/06/screen-shot-2015-06-25-at-9-55-06-am-1.png"></p>
<p>伦理框架的落实仍然是一个难题。在层出不穷的新技术和新挑战面前，传统的机构审查委员会（IRB）明显<a href="https://www.wired.com/2016/05/scientists-just-confused-ethics-big-data-research/" target="_blank" rel="external">缺乏大数据时代伦理判断的能力</a>。与此同时，又有像<a href="http://www.oneilrisk.com/" target="_blank" rel="external">ORCAA</a>这样专门从事算法审计的企业。<a href="http://bdes.datasociety.net/council-output/perspectives-on-big-data-ethics-and-society/" target="_blank" rel="external">“数据与社会”研究机构</a>的建议是，应对智能技术带来的伦理问题，需要政策、教学和业界网络共同努力。在“平等、可追责和透明的机器学习”研讨会上，<a href="http://blog.geomblog.org/2015/07/the-2nd-workshop-on-fairness-accuracy.html" target="_blank" rel="external">研究者指出</a>：平等和偏见等问题不是抽象的概念，而是与实际的人和人群相关的，因此智能技术的伦理问题必须由科技专家与人文学者共同研究，包括有意图地设计实验，才能深入理解问题并找到解决办法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/11/27/intelligent-disempowerment/&quot;&gt;前一篇文章&lt;/a&gt;中我们已经提到，当下常见的关于智能技术伦理危害与风险的讨论总体上强调人工智能对人类整体的影响，并不凸显其对当前社会不同人群造成不同影响的情况，并且在分析这
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>智能技术的伦理风险</title>
    <link href="http://gigix.thoughtworkers.org/2017/11/27/intelligent-disempowerment/"/>
    <id>http://gigix.thoughtworkers.org/2017/11/27/intelligent-disempowerment/</id>
    <published>2017-11-27T05:01:00.000Z</published>
    <updated>2017-11-26T16:13:38.033Z</updated>
    
    <content type="html"><![CDATA[<p><em>（旧文一篇，已发表于<a href="https://zhuanlan.zhihu.com/p/25854862" target="_blank" rel="external">土逗公社</a>）</em></p>
<p>人工智能的风险已经不再是一个新话题。在过去几年中，很多研究者提及了人工智能（以及与之紧密相关的技术，尤其是机器学习和大数据技术）可能带来的危害与风险。值得注意的现象是：在公众话语空间中流行的关于智能技术伦理危害与风险的讨论，大多将“人类”整体视为潜在的被损害的对象。大量的叙事被构建为“机器 vs. 人类”的形式。而关于智能技术如何被当前社会的权力结构主导、并反过来强化当前社会的权力结构、加深对弱势边缘群体的压迫，这一方面的讨论数量较少，且较缺乏系统性。本文将介绍一些关于智能技术伦理危害与风险的讨论，并着重介绍一些智能技术强化社会与经济不公正的案例。</p>
<p>一些关于智能技术伦理危害与风险的讨论已经进入了流行文化空间，吸引了大众的兴趣。这类讨论通常呈现未来学的形式，试图推测人工智能技术成熟、尤其是具备了自我完善的能力之后可能的未来图景。如<a href="https://book.douban.com/subject/26308917/" target="_blank" rel="external">超级智能</a>、<a href="https://futureoflife.org/background/benefits-risks-of-artificial-intelligence/" target="_blank" rel="external">人工智能毁灭人类</a>、<a href="https://www.washingtonpost.com/opinions/matt-miller-artificial-intelligence-our-final-invention/2013/12/18/26ed6be8-67e6-11e3-8b5b-a77187b716a3_story.html?utm_term=.c6ab1f756972" target="_blank" rel="external">技术奇点</a>等讨论吸引了大众对于智能技术的伦理问题的广泛关注。</p>
<p>比起这些事关人类存亡、略带科幻感的宏大叙事，另一些由智能技术带来的伦理危害与风险正在更加现实地发生。例如智能技术对就业的影响，是一个经常被提及的主题。<a href="https://www.wired.com/2012/12/ff-robots-will-take-our-jobs/" target="_blank" rel="external">Kevin Kelly认为</a>，机器在工作中对人的取代是一个不可逆的过程，有一些工作暂时只有人类能做或做得比机器更好，但机器终将胜过人类，绝大多数人类在几十年后将不再需要从事生产工作。<a href="http://www.mckinsey.com/business-functions/digital-mckinsey/our-insights/where-machines-could-replace-humans-and-where-they-cant-yet" target="_blank" rel="external">麦肯锡的一个研究</a>则更具体地列出了各种职业被机器取代的可能性，其中生产线工作、准备食物、包装物品等“可预测的物理工作”是最容易被机器取代的。</p>
<p>除了造成大面积、结构性失业，<a href="https://jsteinhardt.wordpress.com/2015/06/24/long-term-and-short-term-challenges-to-ensuring-the-safety-of-ai-systems/" target="_blank" rel="external">对人工智能的常见担忧</a>还包括赛博空间和物理空间的战争：控制了大量资源甚至自动化武器的人工智能是否会攻击它们本不应该攻击的对象？这种危险甚至不必以战争的形式出现：人工智能的错误行为、甚至只是不恰当的优化，考虑到它们已经在社会经济中扮演如此重要的角色，是否会造成极端恶劣的结果？</p>
<p>可以注意到，以上几类常见的关于智能技术伦理危害与风险的讨论总体上强调人工智能对人类整体的影响，并不凸显其对当前社会不同人群造成不同影响的情况。同样的趋势也出现在对智能技术的风险进行的分析当中。众多这类分析聚焦于技术层面，而并未将社会和政治层面的因素纳入考虑。例如<a href="https://jsteinhardt.wordpress.com/2015/06/24/long-term-and-short-term-challenges-to-ensuring-the-safety-of-ai-systems/" target="_blank" rel="external">一位斯坦福大学的研究者</a>认为，通过机器学习尤其是深度学习得到的统计学模型具有以下特征，使得它们存有安全隐患：</p>
<ul>
<li>不透明：很难、甚至根本无法看懂其中的逻辑；</li>
<li>整体不可分：无法通过局部分拆理解输入输出之间的关系；</li>
<li>脆弱：输入的微小变化可能引起输出的重大且无法预测的变化；</li>
<li>不被充分理解。</li>
</ul>
<p>作为对比，《<a href="https://book.douban.com/subject/26785866/" target="_blank" rel="external">Weapons of Math Destruction</a>》一书的作者Cathy O’Neil也提到了广泛影响人们日常工作与生活的众多智能算法工具的<a href="http://boingboing.net/2016/01/06/weapons-of-math-destruction-h.html" target="_blank" rel="external">几个危险的特征</a>：</p>
<ol>
<li>它们是秘密的，经常是某家公司的商业秘密；</li>
<li>它们是不透明的，被它们影响的人群不了解这些算法如何运行；</li>
<li>它们应用的范围很广；</li>
<li>它们对“成功”的定义值得置疑，被它们影响的人们未必赞同</li>
<li>它们制造了有害的反馈环。</li>
</ol>
<p>相比前一组特征，O’Neil识别的这一组特征具有一个值得注意的要点：她在其中提及了特定的人群。尤其是在第4点中，O’Neil指出了一个极其重要、但绝非总是明显的问题：智能技术对人的影响是有区别的，同一个技术可能让一部分人受益、同时让另一部分人受损。她举了这样一个例子：2010年在伊利诺伊州开始实施的教师绩效评估算法引发了芝加哥教师的<a href="https://www.revealnews.org/article/the-strike-over-student-growth-chicago-teachers-protest-reflects-a-national-feud/" target="_blank" rel="external">广泛反对乃至游行抗议</a>。正如<a href="https://linnettaylor.wordpress.com/2016/11/01/why-datas-not-a-public-good/" target="_blank" rel="external">Linnet Taylor不无洞见地指出</a>的，在进行伦理评估时，人们倾向于抽象地谈论智能技术可能造成的伤害，而具体地谈论它带来的收益，于是实在的收益总能压倒模糊未知的伤害，从而使项目通过评估。通过将社会和政治因素纳入讨论范围，O’Neil提出的对具体人群的关注给了我们一个重要的视角，来重新审视智能技术可能带来的损害和风险。</p>
<p>透过这个视角，我们首先可以注意到，智能技术对劳动力市场的影响并非均质。正如Erik Brynjolfsson和Andrew McAfee在《<a href="http://book.douban.com/subject/21326266/" target="_blank" rel="external">与机器赛跑</a>》一书中指出的，教育程度较低、薪酬较低的劳动者更易被智能技术取代，同时也是这部分劳动者更难以获得新的职业技能，从而加重他们在结构性失业中受到的损害。正如<a href="https://krugman.blogs.nytimes.com/2012/12/26/is-growth-over/?_r=0" target="_blank" rel="external">Paul Krugman一针见血地指出</a>的，全能且高效的工作机器人（workbot）的出现未必会让世界变得美好，因为没有能力拥有机器人的那些人的处境将非常悲惨。尽管这方面的研究还很少，但一些现有的研究显示：在高度自动化、智能化的工作环境下，教育和技能水平较低的劳动者正在面临劳动环境恶化、劳动强度增大、收入降低、缺乏劳动和社会保障等挑战。此种现象<a href="http://gigix.thoughtworkers.org/2016/4/30/dark-side-of-sharing-economy/">在“分享经济”形态中普遍可见</a>。在一些极端的情况下，劳动者被异化成“<a href="https://www.thenation.com/article/how-crowdworkers-became-ghosts-digital-machine/" target="_blank" rel="external">数字机器上的幽灵</a>”和“<a href="https://book.douban.com/subject/26916525/" target="_blank" rel="external">生产线上的奴隶</a>”。</p>
<p>实际上，智能技术可能正在加深对社会弱势群体的偏见和歧视。正如<a href="http://caa-ins.org/archives/1258" target="_blank" rel="external">Wendy Chun所说</a>，“机器学习就像偏见的洗钱”。通过机器学习，偏见和歧视被包装成模型和算法，使不公正变得更加隐秘而影响深远。职场社交网站<a href="http://www.seattletimes.com/business/microsoft/how-linkedins-search-engine-may-reflect-a-bias/" target="_blank" rel="external">LinkedIn的搜索引擎更青睐男性求职者</a>，Google的广告平台<a href="https://www.technologyreview.com/s/510646/racism-is-poisoning-online-ad-delivery-says-harvard-professor/" target="_blank" rel="external">Adsense存在种族偏见</a>，饱受争议的“预测性执法”（predictive policing）<a href="http://www.cnsnews.com/news/article/barbara-hollingsworth/coalition-predictive-policing-supercharges-discrimination" target="_blank" rel="external">对非裔美国人和穆斯林形成结构性歧视</a>，低收入人群会因为智能技术<a href="https://www.theatlantic.com/technology/archive/2016/04/how-big-data-harms-poor-communities/477423/" target="_blank" rel="external">更难从贫困中逃脱</a>。性别、种族、宗教信仰、收入……现实中的各种偏见与歧视，似乎都在智能技术中找到了落脚点。</p>
<p>智能技术不仅被用于实施对弱势群体的损害、歧视和隔离，而且被用于控制大众情绪。通过<a href="http://bdes.datasociety.net/council-output/perspectives-on-big-data-ethics-and-society/" target="_blank" rel="external">操控用户从新闻订阅渠道看到的信息</a>，Facebook成功地调节了用户发帖的情绪，从而证明情绪可以在大量在线用户之间传染。<a href="https://theintercept.com/2015/06/22/controversial-gchq-unit-domestic-law-enforcement-propaganda/" target="_blank" rel="external">一份曝光的材料</a>显示，JTRIG（联合威胁研究智能小组，隶属于英国情报和国家安全机关政府通信总部)已经在通过Youtube、Facebook、Twitter、博客、论坛、电子邮件、短信、自建网站等渠道操纵大众情绪，从而消除“犯罪、安全和国防威胁”。当用于政治领域，正如<a href="http://boingboing.net/2016/01/06/weapons-of-math-destruction-h.html" target="_blank" rel="external">Cathy O’Neil指出</a>的，智能技术可以诱导选民做出片面的判断；当用于商业领域，<a href="https://book.douban.com/subject/26916525/" target="_blank" rel="external">邱林川则指出</a>，智能技术可以向消费者灌输消费理念，使他们成为对不断更新换代的消费品上瘾的“被制造的奴隶”（manufactured slave）。</p>
<p>早在1980年代中期，研究者们就围绕“计算机伦理是否具有独特性”这一问题展开了讨论。<a href="http://journals.sagepub.com/doi/abs/10.1177/2053951714559253" target="_blank" rel="external">Johnson认为</a>，计算机伦理只是把标准的道德问题以新形式呈现，逼迫我们在新的领域中延续旧的道德规范，它本身不是一个独特的新题目。而<a href="http://faculty.usfsp.edu/gkearns/Articles_Fraud/computer_ethics.pdf" target="_blank" rel="external">Moor则认为</a>，计算机会大幅度转化/强化现有的伦理问题，并且造成过去未曾出现过的新的伦理问题，因此计算机伦理本身就是一个独特的新题目。这两种观点对于我们全面认识智能技术的伦理问题有着重要的启发意义。我们既需要充分了解智能技术的独特性、及其对伦理问题带来的独特影响，又必须认清新技术背后潜藏的旧有的冲突、斗争和伦理准则，这样才能准确把握智能技术的伦理方向，使其向着对广大民众有益的方向发展。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;（旧文一篇，已发表于&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25854862&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;土逗公社&lt;/a&gt;）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;人工智能的风险已经不再是一个新话题。在过去几
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字化转型与平台战略</title>
    <link href="http://gigix.thoughtworkers.org/2017/11/15/digitization-and-digital-platform/"/>
    <id>http://gigix.thoughtworkers.org/2017/11/15/digitization-and-digital-platform/</id>
    <published>2017-11-15T05:01:00.000Z</published>
    <updated>2017-11-15T03:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>数字化浪潮对传统行业的冲击已经被越来越多的企业领导者所感知。据《<a href="https://hbr.org/2016/03/the-industries-that-are-being-disrupted-the-most-by-digital" target="_blank" rel="external">哈佛商业评论</a>》的调查，半数以上的企业高管认为自己的业务将在12个月内受到数字化浪潮较大程度的冲击，其中媒体、通信、消费者金融服务、零售、科技、保险、消费者产品、专业服务和教育等10个行业受到的影响最大。</p>
<p><img src="https://hbr.org/resources/images/article_assets/2016/03/W160311_GROSSMAN_EXECUTIVESWHO1-850x505.png"></p>
<h2 id="数字化对企业的要求"><a href="#数字化对企业的要求" class="headerlink" title="数字化对企业的要求"></a>数字化对企业的要求</h2><p>数字化到底对企业提出了什么要求？可以从一个真实的案例中看出端倪。一家全球知名的快消品企业，在京东618购物节之前花了大量的成本和精力设计促销计划，细到优惠力度、广告Banner等每个具体环节都经过多次论证。市场部从领导到一线员工都如临大敌，力求方案精益求精。对待一次重要的促销机会，当然需要重视，但是从上到下如此关注、投入如此多的精力，这是为什么？原来这家企业对市场数据的处理能力还停留在相当初级的阶段，电商平台提供的数据还在用Excel归集处理。在这种数据处理能力的支撑下，市场部的促销举措至少需要两周时间才能看到数据反馈。也就是说，一旦促销举措设计失误，在购物节的时间窗口内就没有再次调整的机会。</p>
<p>这家公司的情况让我联想起几年前看过的<a href="https://www.thoughtworks.com/insights/blog/case-continuous-delivery" target="_blank" rel="external">一组数据</a>：Etsy在2012年平均每天能往生产系统部署超过30次；Amazon在工作日平均每11.6秒就有一次生产系统部署发生，峰值时一小时内部署超过1000次。当这家快消品企业响应一次变化、进行一次实验的周期需要以两周计，领先的互联网企业几年前就已经能够以小时、分钟为单位响应变化和开展实验。这种快速响应变化的能力，是数字化企业的核心竞争力。</p>
<p>为了打造快速响应的能力，海尔把传统的层级管理体制改造成了三级的自主经营体机制。海尔将7万名员工自我组织成了2000多个自主经营体，最大的自主经营体数百人，最小的只有7人，如果一个员工在海尔内部找不到一个自营体能够接受他，海尔就会和他解除劳动合同。海尔的首席执行官<a href="http://www.it-times.com.cn/xwss/39791.jhtml" target="_blank" rel="external">张瑞敏说</a>：“每个小微（团队）都要变成一个个的小团体，所有相关人员都在这里头，负责开发某一个地方的市场，或某一个地区的市场。”直接来自顾客和市场的信息，就像鲶鱼一样激活了小团队的响应能力。</p>
<p><img src="/assets/2017/11/15/haier.jpg"></p>
<p>芬兰的游戏公司<a href="http://supercell.com/en/" target="_blank" rel="external">Supercell</a>也倡导以小团队模式进行游戏开发，一般来说两个员工、或者5个员工、最多不超过7个员工组成独立的开发团队，称之为Cell（细胞），这也是公司名字Supercell（超级细胞）的由来。团队自己决定做什么样的产品，然后最快的时间推出产品的公测版，看看游戏是否受用户欢迎。如果用户不欢迎，迅速放弃这个产品，再进行新的尝试，期间几乎没有管理角色的介入。这家公司在2015年手机游戏排行Top10中曾占据榜单大半江山，2016年腾讯以86亿美元收购了员工数不到200人的Supercell公司84.3%的股份。</p>
<p>从海尔、Supercell以及其他很多小团队的成功经验中，我们看到直面市场与顾客的具有四大优势，使得他们能很好地应对数字化浪潮带来的对响应力的要求：</p>
<ol>
<li><strong>协作高效</strong>。小团队协同效率最高，能全力提供顾客所需，避免组织内耗。</li>
<li><strong>目标清晰</strong>。小团队对战机（商机）的把握更加敏锐。</li>
<li><strong>调整快捷</strong>。当情况发生变化或获得新信息，小团队能更快调整。</li>
<li><strong>迅速扩展</strong>。一旦找准目标，小团队能全力投入，迅速扩大战果。</li>
</ol>
<h2 id="小团队需要大平台"><a href="#小团队需要大平台" class="headerlink" title="小团队需要大平台"></a>小团队需要大平台</h2><p>然而，并非所有小团队都能天生地具备这四大优势。实际上，我们看到很多创业小团队并没有很强的感知和响应变化的能力。成都的一支小团队在2016年创办了“<a href="http://www.lieyunwang.com/archives/147235" target="_blank" rel="external">翘翘动感沙拉</a>”品牌，针对有轻餐食及塑形需求的白领人士，一方面能够作为一道主食满足都市白领的午餐需求，另一方面为有塑形减脂需求的人士提供热量较低且健康的食物。翘翘沙拉斥资30多万装修厨房，邀请了国际五星级酒店主厨加盟，筹备用了近半年时间。上市后才发现产品定位与市场不符，4个月后就停止了经营。这支小团队规模虽小，却没能发挥出预期的响应力。</p>
<p>再次放眼站在数字化潮流前端的企业，我们会发现：原来他们不止是倡导小团队模式，而且为小团队建立了一整套的支撑平台。在海尔的自主经营体结构中，有三个层次的自主经营体。其中一线经营体经营体直接面对顾客，为所负责的顾客群创造价值；二级经营体（或称平台经营体）则为一线经营体提供资源和专业的服务支持，包括人力资源管理、供应链、市场营销、质量体系、战略管理等，所以，平台经营体是一级经营体的资源平台、流程平台、专业化服务平台。平台的存在让一线经营体获得了响应力。</p>
<p><img src="http://pic2.pedaily.cn/201609/20169680137734.jpg"></p>
<p>阿里巴巴则是用共享服务体系支撑前端业务。今天的阿里巴巴已经将集团20多个核心业务中公共的、通用的业务以服务的形式沉淀到了共享业务事业部，整个集团的核心业务能力均建立在这样一套共享服务体系之上。共享服务体系从会员、商品、交易、支付四大中心开始建设，支撑1688、淘宝、聚划算、闲鱼及全集团超过2000个应用。共享服务体系强调的能力包括：服务分布的能力；数据分布的能力；数字化运营的能力；平台稳定的能力；平台开放的能力等。</p>
<p><img src="/assets/2017/11/15/ali.png"></p>
<p>华为也在强调用大平台炮火支撑前线指战员。任正非在华为质量与流程IT管理部员工座谈会上说，华为内部IT要做到“能力模块化和微服务化，使能公司实现数字化转型和大平台下的精兵作战，在研发、销服、供应等业务领域要率先实现ROADS体验（实时、按需服务、在线、自助、社交化连接）”。</p>
<p>透过对各种小团队的观察我们发现，独立自主、直面顾客的小团队，在具备组织灵活性的同时，也必定面对基础能力的局限。那些走在数字化潮流前端的企业，都是以平台形式为小团队提供了四大能力的支撑，才能发挥出小团队精准、灵活、高效的优势：</p>
<ol>
<li><strong>洞察顾客</strong>的能力。小团队需要透过多种数字化渠道获得对顾客的全面了解。</li>
<li><strong>服务供给</strong>的能力。小团队需要迅速整合企业内部的资源和能力为顾客提供服务。</li>
<li><strong>数据决策</strong>的能力。小团队需要随时捕获市场反馈，根据真实数据做决策。</li>
<li><strong>实验创新</strong>的能力。小团队需要开展受控实验，通过实验检验创新假设。</li>
</ol>
<h2 id="数字平台战略"><a href="#数字平台战略" class="headerlink" title="数字平台战略"></a>数字平台战略</h2><p>企业数字平台，是基于云计算“基础设施即服务”（IaaS）能力之上，为企业数字化战略提供能力支撑的一系列平台服务（PaaS），涵盖IT系统研发与运营全生命周期。企业数字平台为直面市场与顾客的精益团队提供顾客洞察、服务供给、数据决策、实验创新四大能力支撑，赋能团队快速创新和响应变化。而这四大能力的基础，是IT组织的精益研发能力和相应的基础设施。</p>
<p><img src="/assets/2017/11/15/digital-capabilities.png"></p>
<p>对众多成功的数字化企业的调研显示，这些企业有着一些引人注目的共性。他们逐步构建自己的数字平台，以此为基础激活企业核心资产。数字平台支撑小团队迅速响应市场和顾客的变化、高效地实验创新，给这些企业带来了显著的改变：</p>
<ul>
<li>提升IT效能，为产品和技术团队赋能，更快更好地为客户交付产品。</li>
<li>构建行业生态，使得新业务、新产品、新服务能充分利用服务化后的企业核心能力和资源。</li>
<li>促进业务创新，充分利用核心资产进行高效、快速的创新实验，保持企业竞争力。</li>
</ul>
<p>特别针对数字化小团队需要的四大能力，ThoughtWorks的<a href="https://www.thoughtworks.com/cn/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>提出了一个基础设施、四个平台的框架结构：</p>
<ol>
<li>精益研发需要的<strong>交付基础设施</strong>。</li>
<li><strong>顾客触点平台</strong>全方位洞察顾客所需。</li>
<li><strong>资源服务化平台</strong>快速供给数字化服务。</li>
<li><strong>数据自服务平台</strong>支持基于数据的决策。</li>
<li><strong>实验测量平台</strong>赋能受控创新实验。</li>
</ol>
<p><img src="/assets/2017/11/15/digital-platforms.png"></p>
<p>基于数字平台战略提出的框架，企业可以结合自身情况，逐步建设当前数字化进程所需的支撑平台，用平台助推企业的数字化战略。</p>
<p><em>（更多关于数字平台战略的信息，请下载我们的《<a href="https://info.thoughtworks.com/DPS-subscription.html" target="_blank" rel="external">数字平台战略</a>》白皮书）</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数字化浪潮对传统行业的冲击已经被越来越多的企业领导者所感知。据《&lt;a href=&quot;https://hbr.org/2016/03/the-industries-that-are-being-disrupted-the-most-by-digital&quot; target=&quot;_bl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>企业IT的经营模式及其与企业架构师的关系</title>
    <link href="http://gigix.thoughtworkers.org/2017/11/10/operating-models/"/>
    <id>http://gigix.thoughtworkers.org/2017/11/10/operating-models/</id>
    <published>2017-11-10T05:01:00.000Z</published>
    <updated>2017-11-11T13:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>企业IT的经营模式可以由两个维度来定义。第一个维度是标准化，第二个维度是整合。这两个维度划分出的四个象限，定义了四种不同的经营模式。不同的经营模式，有各自不同的聚焦重心，对企业架构师的关注点也有不同的要求。</p>
<p>经营模式的第一个维度是标准化（standardization），即企业的各个业务单元之间在多大程度上复用业务流程与系统。高标准化程度能带来业务的效率与可预测性，但同时高标准化程度需要投入成本来达到，包括建设可复用的IT系统、替代业务上可以运作但不够标准的系统等。并且高标准化程度有可能局限各个业务单元的本地创新能力。</p>
<p>经营模式的第二个维度是整合（integration），即各个业务单元之间在多大程度上复用数据。高整合度也能提高业务的效率，更重要的是能促成业务单元之间更有效的协作，增加整个组织的透明度与敏捷度。另一方面，提高整合度也需要成本，这种成本主要来自于对数据的语法（格式）和语义（术语含义、领域模型）在全组织范围达成一致。</p>
<p>标准化和整合两个维度定义出了四种不同的经营模式。</p>
<p><img src="/assets/2017/11/11/operating-models.png"></p>
<p><strong>第一种经营模式是低标准度、低整合度的差异（Diversification）模式</strong>。在这种模式下，各个业务单元根据自己的需要各自建设IT系统，既不特别在意使用统一的、连贯的技术（例如有些系统用Java开发、另一些用PHP开发，而且没有明确的原则判断应该如何选择），也不特别在意数据的共享（例如不同的保险品牌和种类各自保存各自的顾客、保单等信息，彼此之间不共享）。</p>
<p>在业务早期试错和快速扩张的阶段，差异模式使IT与业务诉求高度对齐，从而带来很好的响应能力：业务有什么需求，直接告诉IT；IT采用自己最擅长的技术手段快速实现。并且差异模式对于系统外包也是最简单的，外包商只要按时交付预先要求的功能，项目内部的运作不需要多操心。差异模式的缺点也很明显：它造成业务筒仓（silo），使技术能力和业务能力无法积累和复用。</p>
<p>如果差异模式是企业有意识的选择，此时就不要过早地引入过多标准化的要求，以免拖慢业务试错的节奏。这时企业架构师应该关注项目运作方法论的标准化，例如推行一套轻量级、非侵入的项目流程和度量方法，对几个项目关键节点进行监控和治理。至于业务筒仓造成的重复开发、信息不整合等问题，暂时只需保持警惕即可。</p>
<p><strong>第二种经营模式是高标准度、低整合度的复制（Replication）模式</strong>。在这种模式下，降低IT成本成为IT治理的一个关键点，各业务单元在建设IT系统时需要共享技术平台、基础设施、技术架构等技术组件。例如澳洲某保险集团在2012年时建立了一套基于Maven和Spring Flow的前端应用模板，当时启动的大量在线渠道系统全部要求采用这套模板，并不断提取各个项目的技术经验回到这套模板中。</p>
<p>复制模式最大的优势是系统建设成本的快速降低。仍然以这家保险集团为例，它的第一个在线渠道系统（房屋险）用了6个月时间开发上线，第二个在线渠道系统（车险）只用3个月。越到后来，新建一个在线渠道和将一个在线渠道复制到不同品牌所需的工作量就越少。而且对于运维团队而言，当所有在线渠道系统都采用同样的技术模板以后，运维的难度和工作量大大降低了。不过为了从技术与工具的标准化中受益，初期的架构选型与规范成本必不可少，并且需要持续不断地抽取项目中的最佳实践反哺到共享标准中。实际上，该保险集团的第一个在线渠道系统之所以需要较长的时间建设，其中一部分原因就是需要在该项目过程中建立起最初的技术模板。</p>
<p>在复制模式下，企业架构师的主要关注点是标准和共享服务/工具的建设，包括初期的标准化努力和持续的抽取/重构过程。企业架构师需要建立起一个横跨各个系统、各个项目的技术社区网络，确保技术标准能在各个系统中落地，并且能了解各个系统的反馈与创新。</p>
<p><strong>第三种经营模式是低标准度、高整合度的协作（Coordination）模式</strong>。这种模式聚焦的目标是商业运营的成本和质量，IT的成本则不是最优先的考量。为了向顾客提供更高效、更优质的服务（以及创造潜在的交叉销售和向上销售机会），各业务单元之间有共享标准的业务流程与数据的要求，这是协作模式的原动力。</p>
<p>协作模式的优势是不同业务单元之间的协同效应，给顾客提供更完善的服务。这家澳洲的保险集团从2011年启动了数据整合的行动，将原来的十多个后台核心保险系统整合成两个，并建立“顾客数据总线”来汇集顾客在若干保险品牌、种类、渠道、乃至银行等其他金融服务中留下的数据，建立对顾客的全面认知。当在线渠道领域以复制模式发展的同时，该保险集团的线下电销领域以协作模式优化其服务。</p>
<p>协作模式的最大挑战是对齐各个系统对于数据的语法和语义，这背后涉及的不仅是IT，还有业务单元的权力之争。企业架构师在这种模式下应该关注的重心是企业核心应用和/或中台系统的建设：用什么样的中台功能承载各业务单元目前的业务需求、并为各业务单元创造价值，可能是促使业务数据整合的重要推手。例如阿里中台的建设过程中，淘宝和天猫之所以有动力把用户、商品、交易、店铺等核心数据归拢到共享中台，起初的契机是因为中台提供的团购能力能够立即为它们所用。</p>
<p><strong>第四种经营模式是高标准度、高整合度的统一（Unification）模式</strong>。在这种模式下，新系统会采用标准的技术模板、工具、方法，基于已有的数据和业务流程来构建，企业所追求的目标将是新业务的上市速度和战略敏捷度。</p>
<p>当技术的标准化和业务的整合都达到很高水平，IT组织就有能力把现有的业务功能包装成即插即用的业务流程和能力模块，以微服务的形式提供给前端系统的使用者（包括企业外的第三方开发者）。此时企业IT已经成为行业领域的平台，前端应用的开发者能够快速开发新的应用、借助平台数据迅速触达用户、并立即获知顾客反馈。不过这种模式也并非没有风险：规划与建设这样一个平台需要的成本非常高，并且高度统一化的IT系统建设与运营流程潜在地有可能限制技术与业务创新的涌现，甚至使企业错失颠覆性创新的机遇。</p>
<p>在统一模式下，企业架构师需要关注几个方面的问题。首先，他需要关注建设可复用的业务流程与能力组件；同时，他也需要关注建设覆盖软件全生命周期的开发-运维支撑体系；最后，他还要时刻留意技术与业务趋势的动向，考虑是否需要主动引入创新要素。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;企业IT的经营模式可以由两个维度来定义。第一个维度是标准化，第二个维度是整合。这两个维度划分出的四个象限，定义了四种不同的经营模式。不同的经营模式，有各自不同的聚焦重心，对企业架构师的关注点也有不同的要求。&lt;/p&gt;
&lt;p&gt;经营模式的第一个维度是标准化（standardiza
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从海尔模式看数字化平台</title>
    <link href="http://gigix.thoughtworkers.org/2017/10/17/haier-and-digital-platform/"/>
    <id>http://gigix.thoughtworkers.org/2017/10/17/haier-and-digital-platform/</id>
    <published>2017-10-17T05:01:00.000Z</published>
    <updated>2017-10-17T04:11:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于数字化、网络化转型的目标，海尔的定义是：企业无边界、管理无领导、供应链无尺度。企业无边界，意味着要让全球第一流的资源进入海尔，并能够持续动态优化。管理无领导，即打破科层制组织，让员工与用户零距离连接，拥有自主权，快速响应市场，最终实现“无为而治”的最高境界。供应链无尺度，要探索按需设计、按需制造和按需配送的体系，实现从大规模制造向大规模定制的转变。</p>
<p>与这个定义相对应的运营体系是人单合一管理模式，其中包括了顾客价值、自主经营体、日清体系和人单酬四个基本要素，分别体现了业务经营的目标、组织形态、工作方式、度量方法。对顾客价值负责的自主经营体，抢单进人、按单获酬，日常工作讲究日清日高，那么自主经营体必然就会进化为与顾客、与市场、与业务价值高度对齐的“双创小微”。</p>
<p>双创小微具有驱动力强、响应灵活的优势，潜在的劣势则有两个方面：第一是小微目标与公司目标缺乏对齐、彼此之间形不成协作效应；第二是基础能力缺失或重复建设，不能保障服务交付的高效与高质量。经过多年的探索，海尔发现三层结构既能体现足够的控制，又能够维持各个系统自身的活力。所以，在海尔的自主经营体结构中，有三个层次的自主经营体，分别是一级经营体、二级经营体和三级经营体。</p>
<p><img src="http://pic2.pedaily.cn/201609/20169680137734.jpg"></p>
<ul>
<li>一级经营体，又称为一线经营体，这些经营体直接面对顾客，为所负责的顾客群创造价值。</li>
<li>二级经营体，又称为平台经营体，它们为一线经营体提供资源和专业的服务支持，包括人力资源管理、供应链、市场营销、质量体系、战略管理等，所以，平台经营体是一级经营体的资源平台、流程平台、专业化服务平台。</li>
<li>三级经营体，又称为战略经营体，主要负责制定战略方向，解决内部的协同和发现新的市场机会，同时为经营体配置资源，帮助一级经营体和平台经营体达成目标。</li>
</ul>
<p>这个结构与1960年代英国控制论学家斯塔福·比尔提出的“<a href="https://en.wikipedia.org/wiki/Viable_system_model" target="_blank" rel="external">可生存系统模型</a>”有异曲同工之处。如果将可生存系统模型简化为“肌肉（系统1）-神经（系统2/3）-脑（系统4/5）”的三级，它的落地形态就会类似于海尔的三级自主经营体。</p>
<p><img src="http://7xpvay.com1.z0.glb.clouddn.com/d04bd630-b32d-11e6-96cf-69a982993485"></p>
<p>双创小微有三个基础：制度之基是用户体验交互制，人才之基是创业者，平台之基是云平台。云平台可以看作是二级经营体的IT替身：为了面向大量、变化频繁的小微（海尔8万多员工分为<a href="http://data.book.hexun.com/chapter-18474-2-7.shtml" target="_blank" rel="external">2千多个自主经营体</a>），为了跨越企业边界支持企业内外的创业者，平台经营体不可能再靠人工提供服务，必须以云平台的形式提供小微需要的资源和服务。</p>
<p>于是人单合一管理模式就演变为一个创业平台模式，它包括一个主题和两个功能。海尔人单合一创业平台模式的主题是“人和机会的匹配”，即创业者和创业机会的匹配。为了服务这个主题，它有两个主要功能：创业机会的识别和创造（Opportunity Creation）和创业机会的转化和实现（Opportunity Capture）。前者聚焦于创业者如何把市场上的潜在需求转化和升级为消费者的实际需求，从而识别、发现或者创造出新的商业机会；后者则强调通过一系列机制设计、制度安排、创新策略等将战略机会进行转化，从而为消费者创造价值。</p>
<p>基于机会创造和机会捕捉这两个功能，海尔交互与协同平台是人单合一管理模式最为重要的信息支持平台。海尔交互与协同平台包括6大系统：以顾客为主的虚实交互平台、开放式创新平台、供应链信息平台；以员工为主的电子损益表、电子人单酬表、信息化日清平台。</p>
<p>用《<a href="https://book.douban.com/subject/27021779/" target="_blank" rel="external">智慧转型</a>》的框架来分析，这些系统帮助一线经营体获得4种能力，从而更好地为顾客创造价值：</p>
<ol>
<li>准确掌握顾客和市场需要的能力</li>
<li>快速、高质量、低成本地交付顾客所需价值的能力</li>
<li>基于数据了解并改进工作状态的能力</li>
<li>通过受控实验快速验证创新的能力</li>
</ol>
<p><img src="https://brandleadership.files.wordpress.com/2016/02/5-domains-of-digital-transformation-diagram.png?w=398&h=308"></p>
<p>在创业平台模式下，顾客、企业和员工都被重新定义。顾客被重新定义为“资源”，员工被重新定义为“创客”，企业则被重新定义为数字平台。在海尔组织中只有平台主、小微主和小微成员三类角色，小微成为为用户负责的独立运营主体，只有为用户创造价值才能获得报酬，充分享有决策权、用人权和分配权。小微和平台之间是市场结算关系，平台的报酬源自小微。从这个角度，海尔的组织变革不是简单的扁平化、跨部门和跨层级通道的建立，或者新设部门。海尔组织变革核心是在一流资源和用户之间架构起快速配置资源的平台，释放平台的同边和跨边网络价值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于数字化、网络化转型的目标，海尔的定义是：企业无边界、管理无领导、供应链无尺度。企业无边界，意味着要让全球第一流的资源进入海尔，并能够持续动态优化。管理无领导，即打破科层制组织，让员工与用户零距离连接，拥有自主权，快速响应市场，最终实现“无为而治”的最高境界。供应链无尺度
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>毕业设计中使用敏捷方法的尝试</title>
    <link href="http://gigix.thoughtworkers.org/2017/8/23/agile-in-graduation-projects/"/>
    <id>http://gigix.thoughtworkers.org/2017/8/23/agile-in-graduation-projects/</id>
    <published>2017-08-23T05:04:00.000Z</published>
    <updated>2017-08-23T13:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>从CNKI收录的共计超过1000篇与敏捷软件开发相关的论文中，我找到了5篇关于在毕业设计中使用敏捷方法的文章，从一个侧面勾勒出高校教育工作者看待敏捷的一种视角。</p>
<p><img src="/assets/2017/8/23/scholarship.jpg"></p>
<p>最早谈这个话题的是广东工业大学计算机学院的刘竹松、李振坤、王文彦三位作者。他们于2007年发表的《极限编程在计算机本科毕业设计中的应用》一文中认为，“将极限编程应用到计算机专业本科毕业设计中”的主要目的是“有助于学生形成团队合作的精神”，从而“促进学生学习的兴趣，加强学生综合应用各方面知识的能力，增强学生之间的相互交流、相互学习，提高毕业设计的整体效果”。从这个出发点，作者们认为“极限编程的核心是结对编程”，具体实施时谈的也是“合理设计结对”和“合理分配任务”。</p>
<p>（这篇文章先后发表在《电脑知识与技术》和《计算机教育》两个期刊，可能是作者一稿多投。所以讨论“在毕业设计中使用敏捷方法”这一主题的文章其实只有4篇。）</p>
<p>稍后，2007年10月，大理学院数学与计算机学院的杨健、张晓玲、周少云三位作者在《计算机时代》发表了《软件开发类毕业设计中敏捷软件技术的应用》一文。在这篇文章中，作者尝试解决“毕业设计质量低下，学生得不到真正锻炼”的问题，具体表现形式包括“软件各个功能模块无法有效整合”、“需求因为各种原因不断改变”、“软件的错误和缺陷不断涌现”等。与此前的刘文不同，杨文尝试回答的问题更为全面，包含了沟通、需求、质量等多个角度。因此在看待敏捷方法时，三位作者关注到了更为全面的多个敏捷原则，包括“增量式开发、可持续的开发速度、简单、结对编程、适应改变、个体激励和交流、反省”等。值得注意的是，这些概念在敏捷软件开发的理论框架中并不都是“原则”，有一些是具体的实践。并且杨文完全没有提及测试驱动开发、持续集成等技术性的实践，也没有提及用户故事、看板等需求管理和迭代管理的实践。似乎三位作者的关注点主要还是在团队内部的交流和协作，对于团队对外的呈现（需求的获取和管理、项目进度、软件质量）的考虑较少。</p>
<p>第三篇文章是石家庄外经贸职业学院的马静媛和河北交通职业技术学院的薛惠于2009年发表于《电脑知识与技术》的《极限编程在高职计算机专业毕业设计中的应用》。与刘文相似，这篇文章想要达到的目标也是“加强学生综合应用各方面知识的能力，挖掘学生的学习潜力，并且培养学生之间的合作意识，提高毕业设计的整体水平”，重心仍然是在团队的内部与沟通协作上。与刘文和杨文相比，马文明确指出了极限编程的12个最佳实践，并着重讨论其中的简单设计、结对编程和集体代码所有制三个实践。另外，马文提出了对测试驱动开发实践的要求：“编码之前必须先写好单元测试代码”、“代码完成后用编码前编写的测试用例进行单元测试”、“代码和测试用例一起存入代码库”。马文没有提及如何划分用户故事和开发任务，也没有提及持续集成，从文中无法判断，学生在实际开展测试驱动开发时是否遇到任务过大、失败的测试被荒废等问题。</p>
<p>第四篇文章是湖南工业大学计算机与通信学院的曾志浩和肖小克于2012年发表于《计算机教育》的《以敏捷开发和极限编程为指导的软件工程毕业设计》。曾文与前三篇文章有一个显著的区别：这篇文章的关注重心不在内部的沟通、协作和学生能力培养，更多地关注毕业设计的进度和质量这两个对外指标。以此为出发点，曾文提出了一套“以AD和XP为指导的毕业设计过程”，包括项目的组织方式、管理方式和考核方式，并给出了具体的“典型过程及相关支撑工具”。在管理侧，曾文提出“贯穿整个毕业设计过程，以各个阶段时间点为标志，要求学生以增量的方式来完善项目开发”，并在考核时注重代码功能而非文档、交叉检查结对学生的编码工作量、要求学生就系统的多个可运行版本进行演示等，把敏捷实践与毕业设计考核方式相结合。在工具侧，曾文仅推荐了测试管理工具Mercury Quality Center和持续集成工具Jenkins，并未推荐具体的测试工具。这可能是为了顾及建议的通用性，但也给具体项目开展时自动化测试和测试驱动开发的落地留下了一个问号。</p>
<p>综观这四篇文章，我们可以勾勒出敏捷方法在中国高校计算机教育领域的历程。从早期的刘文以偏概全地看到一个特立独行的实践（结对编程）、杨文对敏捷理论的解读不清晰不准确，到马文能够准确描述极限编程的实践、并有意识地选择自己需要的实践，再到曾文从组织、管理、考核等角度全方位运用并辅以工具支撑，我们能看到中国高校计算机专业指导老师逐步深化对敏捷理解的过程。另一方面，从刘文直到曾文，对于测试驱动开发和重构的描述是语焉不详的，关于持续集成的具体实践和具体挑战的论述是缺位的，由此不难想象，在实际的毕业设计项目中，这些技术性的实践很可能并没有得到有效实施，于是敏捷会更多地退化为一种鼓励沟通、鼓励协作的团队运作方式——这与前三篇文章的诉求相一致，而曾文也没能提供技术性支撑工具（尤其是Jenkins）在实施中的真实情况。这种“重沟通轻技术”的敏捷采纳方式，恰是敏捷在整个中国IT业的境遇缩影。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从CNKI收录的共计超过1000篇与敏捷软件开发相关的论文中，我找到了5篇关于在毕业设计中使用敏捷方法的文章，从一个侧面勾勒出高校教育工作者看待敏捷的一种视角。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/8/23/scholarship.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>敏捷在中文期刊中的投影</title>
    <link href="http://gigix.thoughtworkers.org/2017/8/15/agile-in-chinese-journals/"/>
    <id>http://gigix.thoughtworkers.org/2017/8/15/agile-in-chinese-journals/</id>
    <published>2017-08-15T05:04:00.000Z</published>
    <updated>2017-08-15T14:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在中国推广敏捷软件开发方法十五年之后，我很想回头去看这段历史的全景。今天我用<a href="http://www.cnki.net/" target="_blank" rel="external">知网</a>做了一些检索，看到了一些有趣的数据。</p>
<p>我在所有期刊中检索主题中包含“敏捷”和“软件”的文章。其他的关键词检索会得出略有不同的结果。如果只用“敏捷”作为关键词，会得到13258条结果，但其中绝大多数与我想要谈论的软件开发方法无关。这是“敏捷”这个译名词的宿命：它是一个普遍被认可的、带有褒义的形容词，使用这个词让听众更容易接纳这些新千年以后发展起来的<a href="http://softwarepractitioner.org/translations/fowler/newMethodology.shtml" target="_blank" rel="external">新方法学</a>。但与此同时，这个译名也让听众产生更多的误解：很多人会以自己的想法去期望这些新方法学，而不去深究它们的内涵。</p>
<p>我尝试的另一个检索条件是把文献类别限定在“计算机软件及计算机应用”，并检索主题中包含“敏捷”、且不包含“制造”的文章。排除“制造”的原因是“<a href="http://wiki.mbalib.com/wiki/%E6%95%8F%E6%8D%B7%E5%88%B6%E9%80%A0" target="_blank" rel="external">敏捷制造</a>”也是一个相当热门、且与计算机技术很有关系的领域。这个检索的结果从统计上看与前一个相去不远。以下我主要讨论第一个检索的结果。从相关关键词来看，这个结果是比较准确的。</p>
<p><img src="/assets/2017/8/15/keywords.png"></p>
<p>首先，令我略有些惊讶且失望：检索到的文章只有972篇。作为对比，“云计算”检索到的文章有10880篇，“软件工程”有9890篇，“SOA”也有3992篇。回顾这十五年，不论在IT技术领域还是软件工程领域，敏捷仍然是一个非常小众的话题。</p>
<p>从时间趋势来看，2001年及以前有一些涉及“敏捷”和“软件”主题的文章，虽然并不与现在意义上的“敏捷软件开发”直接关联，但在理念上有一定相通之处。除了敏捷制造、敏捷物流等领域的文章之外，<a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFD9899&amp;filename=JYXX199803000&amp;v=MDkyOTBkcUZDam5VTHJPTHpUVGRyS3hGOW5Nckk5RlpJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSTDJmYis=" target="_blank" rel="external">向华和邹平的文章</a>、<a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFD2000&amp;filename=QBXB200006011&amp;v=MjIzOThSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVJMMmZiK2RxRkNqblY3M0pOQy9UYkxHNEh0SE1xWTlFWlk=" target="_blank" rel="external">赵捧未和窦永香的文章</a>、<a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFD2000&amp;filename=JSJC200005009&amp;v=MjcyNDZHNEh0SE1xbzlGYllSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVJMMmZiK2RxRkNqblZML0pMejdCYmI=" target="_blank" rel="external">段永强、张申生、高国军的文章</a>都提及了“基于对象的软件代理”概念，这可能是“前敏捷时代”一个值得探寻的线索。</p>
<p><img src="/assets/2017/8/15/annual_trend.png"></p>
<p>“敏捷软件开发”这个名词的出现是在<a href="http://agilemanifesto.org/" target="_blank" rel="external">2001年</a>，并于2002年正式进入了中文期刊的话语空间，从时间轴上可以清晰地看出这个趋势。从统计数据上看，敏捷的潮流在2007年达到高峰，从2011年开始有一次显著的下滑，随后又逐渐回暖。这里面有一个异常因素：《程序员》杂志2010年以后的数据没有被知网收录。但即使排除这个因素，大趋势估计相去不远。某种程度上，这个曲线和Gartner的“<a href="https://en.wikipedia.org/wiki/Hype_cycle" target="_blank" rel="external">技术成熟度曲线</a>”（或者叫吹牛逼曲线）有某种暗合之处。</p>
<p><img src="/assets/2017/8/15/Gartner_Hype_Cycle.svg"></p>
<p>然后——我不知道该高兴还是悲伤——《程序员》杂志无疑地在这场潮流中扮演了领袖角色。在所有检索到的文章中，《程序员》发表的超过20%，与其他任何报刊杂志都不在同一个数量级上。排名第二的《电脑知识与技术》在十五年中发表了共计23篇相关文章，我觉得这就基本上可以解读为“毫不关心”。《程序员》在2002年3月的《<a href="http://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;filename=ITSJ200203012&amp;dbname=CJFD2002" target="_blank" rel="external">极限编程</a>》专题，经确认，的确是中国期刊中最早介绍敏捷方法的一组文章。（实际上，《程序员》2001年12期的《代码重构》专题还略早于此，但由于刊号变迁的缘故，知网没有正确收录《程序员》2001年的内容，而是收录了之前使用该刊号的《Internet信息世界》的内容。）最早引介敏捷方法，并在之后的几年中贡献了整个期刊领域最多的篇幅。我们可以无疑地确认，《程序员》是敏捷方法在中国期刊领域最重要的——并且也是唯一的——支持者。这一数据，从一个侧面映射出敏捷在中国传奇而又尴尬的境遇。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在中国推广敏捷软件开发方法十五年之后，我很想回头去看这段历史的全景。今天我用&lt;a href=&quot;http://www.cnki.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知网&lt;/a&gt;做了一些检索，看到了一些有趣的数据。&lt;/p&gt;
&lt;p&gt;我在所有期
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云原生软件开发九要素</title>
    <link href="http://gigix.thoughtworkers.org/2017/7/14/cloud-native-9-factors/"/>
    <id>http://gigix.thoughtworkers.org/2017/7/14/cloud-native-9-factors/</id>
    <published>2017-07-14T05:04:00.000Z</published>
    <updated>2017-07-14T05:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着云计算逐渐成为主流的计算环境，我们提出这样一个问题：在云原生（Cloud Native）的环境下，软件开发应该是怎样的？在其他领域，我们看到云计算带来了弹性、标准化和更高的效率。当云成为软件开发团队的缺省环境，哪些实践能帮助他们兑现云计算的价值？各个组织、各个团队采用的软件开发方法论和流程各有不同，我们尝试找出一个最佳实践的最小集合：如果缺少其中的任一实践，就会在一定程度上妨碍团队享受云计算能带来的价值。从这个角度出发，我们识别出了下面这个列表：</p>
<p><img src="/assets/2017/7/14/9-factors.jpg"></p>
<h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><p>开发一个应用，采用什么基础框架、代码目录结构怎么安排、引入哪些测试工具、使用什么构建工具、遵循什么构建流程，这些问题在典型的应用类型（例如“Java微服务”或者“React前端应用”）下都有成熟的答案。大多数情况下，新的项目不应该从头新建这一套结构：一来是为了节省工作量，二来更重要的是应该尽量复用已有的最佳实践。建议的做法是使用标准的脚手架，例如<a href="https://jhipster.github.io/" target="_blank" rel="external">JHipster</a>或者其他基于<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a>的生成器可以提供较为通用的脚手架，IT组织也可以设计自己的标准脚手架。</p>
<h3 id="自包含应用"><a href="#自包含应用" class="headerlink" title="自包含应用"></a>自包含应用</h3><p>应用程序应该尽可能少依赖周边环境。对周边环境依赖越少，因为环境差异而带来的工作量和错误就会越少。以Java应用为例，基于<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>的独立应用，就比依赖Tomcat甚至WebSphere应用服务器的应用更具自包含性，环境的配置和管理都会容易得多。其他例如npm、rvm等工具都意图让应用程序更具自包含性。</p>
<h3 id="统一构建"><a href="#统一构建" class="headerlink" title="统一构建"></a>统一构建</h3><p>每一次构建，不论是由开发者自行发起的，还是在持续集成环境执行的构建，都应该尽量、最好是完全一致。为了达到这种效果，不仅构建工具和构建流程本身统一，执行构建的外部环境也应该统一。最好的方式是把构建放在虚拟机或容器里进行，而不是在彼此不同的计算机上执行。为了避免个人电脑计算资源的局限，构建最好是在云上进行。</p>
<h3 id="镜像化"><a href="#镜像化" class="headerlink" title="镜像化"></a>镜像化</h3><p>为了保证构建的外部环境完全统一，执行构建的不应该是各自不同的计算机，而应该是虚拟机或容器。因此运行应用程序的机器应该被镜像化。<a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant</a>之类的工具提供了很好的版本化管理虚拟机镜像的能力，但VMWare和VirtualBox等虚拟机在性能上和资源占用上都并不鼓励频繁启停的使用方式，<a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>等容器技术可能是更好的选择。构建产物也应该是可执行的容器镜像。</p>
<h3 id="基础设施即代码"><a href="#基础设施即代码" class="headerlink" title="基础设施即代码"></a>基础设施即代码</h3><p>为了保证构建的外部环境完全统一，获得运行环境的过程应该完全自动化，不应该允许任何手动修改运行环境的情况。如果运行环境是<a href="https://martinfowler.com/bliki/ImmutableServer.html" target="_blank" rel="external">不可变的</a>，那么就可以<a href="https://martinfowler.com/bliki/ImmutableServer.html" target="_blank" rel="external">随时抛弃并重建</a>。因此环境的配置应该以代码形式记录并自动化，并且还能顺便得到环境可以版本管理、可以自动化测试等好处。</p>
<h3 id="构建产物仓库"><a href="#构建产物仓库" class="headerlink" title="构建产物仓库"></a>构建产物仓库</h3><p>构建成功的产物应该被放入统一的仓库，并分版本管理。这样做的目的是按照《<a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">持续交付</a>》的理念，整个构建发布流程中使用用同一个构建产物；并且统一且分版本管理的构建产物可以在组织内复用。<a href="https://www.sonatype.com/nexus-repository-sonatype" target="_blank" rel="external">Nexus</a>可以用于管理各种构建产物，包括容器镜像。</p>
<h3 id="弹性运行环境"><a href="#弹性运行环境" class="headerlink" title="弹性运行环境"></a>弹性运行环境</h3><p>运行应用程序的环境，不论是用于执行测试、还是用于试用、培训、用户验收测试、乃至生产，都应该是弹性的：需要时可以立即开通，不需要时可以理解销毁。对于生产系统，运行环境的弹性使系统可以随负载水平扩展，使各种<a href="http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/" target="_blank" rel="external">路由技术</a>成为可能；对于开发、测试、预发布等场景，运行环境的弹性使环境开通和使用变得简单且不会出错。</p>
<h3 id="服务质量透明"><a href="#服务质量透明" class="headerlink" title="服务质量透明"></a>服务质量透明</h3><p>诸如高吞吐量、高可用性、高安全性、双机热备等服务质量，由运维或数据库的专家配置好，在生产环境提供给应用程序使用时，只暴露IP地址和端口（甚至<a href="https://12factor.net/port-binding" target="_blank" rel="external">只有端口</a>）。对于应用开发者而言，服务质量是透明的，不会感觉到生产环境与开发环境依赖的外部服务有任何差别。</p>
<h3 id="诊断信息服务"><a href="#诊断信息服务" class="headerlink" title="诊断信息服务"></a>诊断信息服务</h3><p>当构建和运行都在容器中乃至云上发生，并且容器是为应用程序专门定制的，调试诊断必然不能像在本地开发机器一样直接。需要借助完善的日志、监控等方式（例如基于<a href="https://www.splunk.com/" target="_blank" rel="external">Splunk</a>或<a href="https://www.elastic.co/webinars/introduction-elk-stack" target="_blank" rel="external">ELK</a>的方案）的来提供应用程序的诊断信息。诊断信息服务不仅作用于生产环境，测试、开发、构建等各个环境也使用同样的方式获得诊断信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着云计算逐渐成为主流的计算环境，我们提出这样一个问题：在云原生（Cloud Native）的环境下，软件开发应该是怎样的？在其他领域，我们看到云计算带来了弹性、标准化和更高的效率。当云成为软件开发团队的缺省环境，哪些实践能帮助他们兑现云计算的价值？各个组织、各个团队采用的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人生赢家弗洛雷斯</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/26/fernando-flores/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/26/fernando-flores/</id>
    <published>2017-06-26T05:01:00.000Z</published>
    <updated>2017-06-26T00:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Fernando_Flores" target="_blank" rel="external">费尔南多·弗洛雷斯</a>有着传奇的一生。他作为理工科的好学生留校，在智利社会主义的浪潮中涉足政坛，因为科技背景步步高升，陪着萨尔瓦多·阿连德总统走完政权和人生的最后一段路，作为政治犯坐了三年牢，然后摇身一变成为世界级学霸，顺便在硅谷搞了两家创业公司挣了一大把钱，终于衣锦还乡再次投身政治，支持的却是与阿连德政纲截然不同的总统。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a4/Fernando_Flores.jpg"></p>
<p><em>（本文绝大部分内容出自《<a href="https://book.douban.com/subject/26107390/" target="_blank" rel="external">控制论革命者</a>》一书。）</em></p>
<h2 id="工科背景"><a href="#工科背景" class="headerlink" title="工科背景"></a>工科背景</h2><p>弗洛雷斯于1943年出生于塔尔卡市，位于智利首都圣地亚哥以南200多公里的一个城市。他的父亲是铁路工程师，母亲经营着一家小型的木材公司。在学校里，他是一个思维敏捷、尤其擅长数学的好学生。尽管还不知道未来的人生要干什么，弗洛雷斯已经意识到成为工程师是“一件大事”，所以他申请了天主教大学的工程学院，并被这所声名远播的大学接纳。在2003年的一次访谈中，他猜测自己可能是家族里第一个接受了大学教育的人。在正式的大学教育之外，一系列的人际关系、工作经历和政治变迁让弗洛雷斯发现了控制论和比尔。在大学里，弗洛雷斯跟随阿诺尔多·海克斯学习运筹学，后者在1963年至1964年间任天主教大学工程学院院长，后来接受了MIT斯隆管理学院的教授职位。</p>
<p>因为弗洛雷斯受过运筹学训练，[斯塔福·比尔的公司]SIGMA雇佣他在智利铁路的项目上[作为实习学生]工作。在这个项目上，他接触到了《控制论与管理》，一本在他看来“脑洞大开”的书。弗洛雷斯于1968年毕业，获得工业工程学位。……1968年至1970年间，弗洛雷斯在天主教大学工程学院任教务主任，随后他的职责范围逐渐扩展到了大学的各项事务。</p>
<h2 id="初涉政坛"><a href="#初涉政坛" class="headerlink" title="初涉政坛"></a>初涉政坛</h2><p>这一时期大学正在进行改革，弗洛雷斯监督开展了很多工程课程的改革，包括增加课堂与社会的联系。和很多同时代人一样，弗洛雷斯在学术圈和政治圈都很活跃。1969年，弗洛雷斯等一群天主教大学的年轻知识分子脱离基督教民主党，成立了“统一人民行动运动”（简称“MAPU”）。这个由年轻知识分子组成的小型政党批评基督教民主党和总统爱德华多·弗雷·蒙塔尔瓦（1964年至1970年在位）采取的中间路线，与左翼的人民阵线中的共产主义者和社会主义者政见一致。MAPU加入人民阵线，再加上右翼和基督教民主党组成的获胜联盟内部的不稳定因素，最终促成社会主义者阿连德在1970年大选中以微弱优势获胜。</p>
<p>作为对弗洛雷斯政治忠诚和技术能力的认可，阿连德政府将他任命为国家开发公司（简称“CORFO”）的技术总监，这家公司的使命是国有化智利的工业。弗洛雷斯成为了国家开发公司的三号人物，也是MAPU成员占据的最高位置。他最重要的职责就是管理已经国有化的工厂的日常调控。</p>
<h2 id="步步高升"><a href="#步步高升" class="headerlink" title="步步高升"></a>步步高升</h2><p>[Cybersyn]项目的资金部分来自国家科技学院，该学院的预算一直在增加；另一部分资金来自CORFO，这是全国资金最充裕的政府机关之一，毕竟它的使命是指导国家经济。弗洛雷斯在这两个机构都担任高管，既是发展机构CORFO的三号人物，也是国家科技学院的理事长。他动用了各种社会和组织关系来保障这个项目需要的财政、物资和人力资源，其中大部分是通过非正式渠道获得的。“我有很大的权力。”弗洛雷斯承认。不过CORFO实在太庞大了，弗洛雷斯与比尔提议的这个项目仅需要其整个预算中的一小部分。</p>
<p>……比尔见到了阿连德，获得了总统的许可继续开展他的项目。但比尔相信这次会见还有别的意义。他猜测弗洛雷斯想在智利政府中更广泛地应用控制论原理，而不仅是用于管理国有经济，这次会见则会帮弗洛雷斯未来的项目铺平道路。团队中最了解政治的施温伯提供了另一种解读。弗洛雷斯“有着更高级的大脑，”施温伯这样说道，“非常复杂，老于世故，精明能干，有时甚至是狡诈，但绝对精明。”弗洛雷斯很早就认识到了这个系统的科技价值和政治价值。照施温伯的看法，比尔与阿连德的会见一方面是为了解释正在开发的控制论管理系统，另一方面也是为了“让阿连德意识到有这么一个人，弗洛雷斯，掌管着这种力量”。弗洛雷斯希望给总统留下这样的印象：他是科技专家，并且他正在为政府做着有趣、大胆而且可能很有价值的工作。最重要的是，这次会见确认了弗洛雷斯与比尔之间的工作同盟，把阿连德也拉进了项目中。这次会见再次强调了在智利社会主义道路上正在发生的科技创新与政治创新之间的相互依赖关系。</p>
<p>[1972年]10月初，弗洛雷斯升任经济部副部长。[发生于1972年的]十月罢工后，这位29岁的年轻人被总统任命为经济部长。……弗洛雷斯相信是他对科技的使用帮他赢得了这个内阁级别的位置，他认为继续发展自己作为科技专家的形象或许能给他带来政治上的优势。</p>
<h2 id="大厦将倾"><a href="#大厦将倾" class="headerlink" title="大厦将倾"></a>大厦将倾</h2><p>弗洛雷斯仍然是阿连德内阁的成员，但他在[1973年]新年当天离开了刚上任两个月的经济部长职位，转任财政部长。这个新的任命使弗洛雷斯离Cybersyn项目更远了。</p>
<p>在[发生于1973年8月的]第二次卡车主罢工期间……阿连德任命弗洛雷斯担任政府的秘书长，负责政府对内对外的沟通。在风雨飘摇的智利政府中，弗洛雷斯已经占据了一个最高的位置，此时他才刚刚30岁。</p>
<p>[1973年9月11日武装政变发生时]弗洛雷斯……已经是阿连德身边最贴近的助手之一，轰炸发生时他正与总统在一起，一直与军方保持着电话联系。他告知阿连德，军方要求总统立即、无条件投降。总统拒绝了这个要求，并派弗洛雷斯去和军方谈判。弗洛雷斯刚走出建筑即被逮捕，从此没有再见到总统。</p>
<p>费尔南多·弗洛雷斯作为政治犯在监狱里呆了3年。……1976年，大赦国际的旧金山分部成功地通过谈判促成弗洛雷斯获释，并在斯坦福大学计算机科学系给他安排了为期一年的研究职位。</p>
<h2 id="变身学霸"><a href="#变身学霸" class="headerlink" title="变身学霸"></a>变身学霸</h2><p>在斯坦福，他遇到了计算机科学家特里·维诺格拉德，两人在1970年代后期和1980年代紧密合作。</p>
<p>弗洛雷斯在加州大学伯克利分校获得了博士学位，师从哲学家约翰·赛尔、休伯特·德莱弗斯和经济学家安·马库森。他于1982年完成的毕业论文讨论了如何在“未来的办公室”里用计算机改进管理和交流。……比尔在早年间对弗洛雷斯的想法有所影响，但在完成毕业论文的时候，弗洛雷斯的关注点已经从管理控制论转移到言语行为理论和海德格尔哲学，因为这些是他的博士委员会成员专擅的领域。</p>
<p>1986年，弗洛雷斯发表了他的第一本书，与维诺格拉德合著的《理解计算机和认知》（Understanding Computers and Cognition）。这本书结合了计算机领域的问题与“生物本质、语言、人类行为本质等方面的理论”，着重讨论计算机能和不能从事哪些人类实践。……美国信息科学学会把《理解计算机和认知》评为1987年“最佳信息科学书籍”，这本书现在被认为是人机交互领域的关键文本之一。</p>
<p>[注：约翰·赛尔和休伯特·德莱弗斯是人工智能哲学领域的大师；特里·维诺格拉德是人机交互领域的大师，1995年至1998年间指导了谷歌创始人拉里·佩奇的博士研究。]</p>
<h2 id="名利双收"><a href="#名利双收" class="headerlink" title="名利双收"></a>名利双收</h2><p>1980年代，弗洛雷斯还转型成了一名硅谷企业家。他创立了教育咨询公司Logonet，向商业社会传授本体论设计思想。他还跟维诺格拉德一起创立了Action科技公司，开发了名为“协调者工作组生产力系统”的软件包，他们自称是第一款用于计算机网络的工作组系统。……后来一位记者称“协调者”是“全世界第一款社交网络软件”。</p>
<p>1989年，弗洛雷斯又成立了一家咨询公司，名叫“商业设计合伙人”，或者简称BDA。BDA向困境中的企业传授言语行为理论的原则，例如提出明确的请求、做出明确的承诺等，试图以这种方式改变这些企业。……在其巅峰时，BDA有150名员工，在3个大陆上开展工作，年收入5千万美元。……到2007年，弗洛雷斯的财富净值据估算达到了4千万美元。他的名气也随着财富一道蒸蒸日上。有人认为他唐突、脾气暴躁、说话直接甚至是粗鲁、惹人讨厌；但他对外传递的讯息，以及他在学界和商界的成功，让不少人把他视为偶像。</p>
<p>2002年，弗洛雷斯以百万富商的身份回到智利，并作为国家最北端地区的代表被选为参议员，由此开启了他作为政治家的人生新篇章。2008年，他脱离支持他当选参议员的中左联盟，成立了自己的政党“<strong>智利第一党</strong>”。2009年，他又完全转变立场，公开支持右翼总统候选人、亿万富商塞巴斯蒂安·皮涅拉。最终皮涅拉赢得了大选。</p>
<p>[2010年3月，弗洛雷斯被皮涅拉总统任命为智利国家竞争力创新委员会主席。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fernando_Flores&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;费尔南多·弗洛雷斯&lt;/a&gt;有着传奇的一生。他作为理工科的好学生留校，在智利社会主义的浪潮中涉足政坛，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术领导者即服务</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/23/tech-lead-as-a-service/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/23/tech-lead-as-a-service/</id>
    <published>2017-06-23T05:01:00.000Z</published>
    <updated>2017-06-23T11:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>八年前我写了一篇文章《<a href="http://www.infoq.com/cn/articles/thoughtworks-practice-part8" target="_blank" rel="external">Tech Lead的三重人格</a>》。迄今为止为数众多的敏捷交付团队中，Tech Lead（技术领导者）对于交付的效能和质量起着至关重要的作用。我在那篇文章中指出，Tech Lead需要扮演三种重要的角色：技术决策者、流程监督人、干扰过滤器。一支团队能否有效采用架构最佳实践、交付流程最佳实践和项目运作最佳实践，很大程度上取决于Tech Lead把自己的工作完成得多好。</p>
<p>如果更进一步把这篇文章中Tech Lead承担的责任做一个拆解，我们可以看到，一个称职的Tech Lead是这样去为项目的顺利交付做出贡献的：</p>
<ul>
<li>首先，他要<strong>制订适合该项目要求的技术方案</strong>。他要参与架构设计，了解平台和编程语言、主要的框架和库、集成点、部署策略、数据迁移策略，确认总体技术方案能够支撑系统的业务要求。</li>
<li>随后，他要<strong>保障交付顺利开展</strong>。他要确保环境的一致性，搭建和管理持续集成流水线，指导并监督团队遵循持续集成的流程和实践。</li>
<li>最后但绝非最不重要的，他还要<strong>管理和提升团队的能力</strong>。他需要确认团队是否熟悉用到的技术栈和工具，而且——虽然这一点在我写文章时的ThoughtWorks还不那么凸显——要帮助团队成员组织刻意练习来提升能力。</li>
</ul>
<p>正如当时那篇文章的一位读者非常正确地指出的，要一个人做这三方面的贡献很多时候是不切实际的。在很多组织里，这三件事是在三个环节中分别进行的，这三个环节的彼此割裂造成了很多问题：</p>
<ul>
<li>在方案环节，架构师根据客户的要求和痛点，基于自己的知识储备设计技术解决方案。他是如何分析客户的要求和痛点，他的知识储备是什么，组织里的其他人不一定知道，于是不同架构师提出的解决方案就很可能不一样。</li>
<li>在交付环节，交付团队基于自己的知识储备来交付技术解决方案。方案背后隐含的知识储备，交付团队未必具备，所以屡屡会出现交付质量不佳的问题。不是他们没有能力，只是能力与方案的需要不符。</li>
<li>组织感到团队的能力有不足，于是找来教练提升能力。然而教练基于的是一个标准的能力集来训练团队，这个能力集与项目实际需要的能力又不一定匹配。于是出现能力发展计划不对症、能力建设效果不明显的问题。</li>
</ul>
<p>由此可见，只有当方案、交付、能力三者有很好的协同，项目和团队才能健康成长。而这个协同之所以尤其困难，是因为它跨了三个非常不同的问题域（在很多组织是三个不同的功能部门），需要三种非常不同的能力，对这个居中协调者的要求非常高。</p>
<p>所以，如果我们能用一个云上的平台来承载这个居中协调者的能力，对整个组织的交付质量和能力成长都会有帮助。这个平台的核心实际上就是<a href="/2017/4/14/stack-management-implementation/">技术栈管理</a>：针对典型的应用场景（例如企业资源服务化、移动数字化渠道），制订组织统一的技术栈，并从技术栈推导出对应的能力评估模型和刻意练习课程。于是我们就得到了以技术栈为核心的IT能力三环联动模型：</p>
<p><img src="/assets/2017/6/23/3-circles.jpg"></p>
<p>当提供技术方案的架构师选择一个技术栈，用这个技术栈交付软件的能力要求就被明确地传达到交付团队。交付团队不用自己去设置开发环境和持续交付流水线，用<a href="/2017/6/6/continuous-delivery-2/">云原生的持续交付</a>环境即可启动开发，并复用在技术栈上积累的交付最佳实践。通过云上的能力测评系统，能力教练可以清晰地知道哪些成员已经具备需要的能力、哪些成员能力还有差距，然后为有差距的成员提供针对性的刻意练习和指导。</p>
<p>云计算已经成功地模糊了硬件与软件的界限，使IT的一大挑战——管理设备——极大简化。现在，对于IT的另一个大挑战：人才短缺，云计算的“XXX as a service”模式是否可以继续发挥作用？IT组织是否可能借助云计算获得优质IT人才的弹性和伸缩性？这是一个值得去探索的课题。在这个方向上，将对交付质量与效能起着重要影响的Tech Lead的能力以云平台服务的形式提供，有可能是触手可及的一个目标。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;八年前我写了一篇文章《&lt;a href=&quot;http://www.infoq.com/cn/articles/thoughtworks-practice-part8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tech Lead的三重人格&lt;/a&gt;》。迄今为止
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>言说信息时代的奴隶制</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/20/book-review-to-goodbye-islaves/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/20/book-review-to-goodbye-islaves/</id>
    <published>2017-06-20T05:01:00.000Z</published>
    <updated>2017-06-20T10:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>[本文系《<a href="https://book.douban.com/subject/26916525/" target="_blank" rel="external">再见i奴</a>》（Goodbye iSlave）的书评，以《<a href="http://tootopia.me/article/6364" target="_blank" rel="external">信息时代的三角贸易</a>》为题同步发表于土逗公社。]</em></p>
<p>毫不意外地，柯洁在三番棋中完败软硬件全面升级的AlphaGo。这场“人机大战”再次让人工智能成了街谈巷议的热点。在感叹科技进步一日千里的同时，大众也表达出了对人工智能飞速发展的担忧。不过，据笔者的观察，这种担忧大多数时候仍然是一种“终结者”式的想象，即担心机器拥有智能以后全面取代甚至统治、消灭人类。2015年6月，德国斯图加特的一家汽车工厂里发生致人死亡的工业事故，媒体在报道时竞相使用“机器人杀人”、“机器人把技术员按倒打死”这样耸人听闻的标题。类似这样的大众舆论反映出人们对智能技术的双重恐惧：不仅隐然感到科技的发展值得担心，而且隐然感到自己不知究竟应该担心什么。</p>
<p>诚如维特根斯坦所说，“凡不可言说者必保持沉默”。在众多学者的话语中，对科技、尤其是信息技术的担忧具有两个明显的特征：它们通常具有强烈的未来主义色彩，多在谈论十余年、数十年后的“近未来”图景；而且它们多在强调“机器vs.人类”的关系。不论凯文·凯利还是博斯特罗姆，他们引人瞩目的作品都在谈论“超级智能”如何在不远的将来取代人类。然而这两个特征却有一种微妙而深远的影响：它们让读者觉得科技对人的威胁尽管存在，但毕竟尚未发生、而且对所有人的威胁是均等的。</p>
<p>从这个意义上，邱林川的这本《再见i奴》（Goodbye iSlave，伊利诺伊大学出版社2016年）提出了一种新的言说方式，使“信息技术可能带来什么危害”这个问题呈现出一个全新的面向：信息技术的发展对人造成伤害，这件事无需等到未来，它早已在发生；而且这种伤害绝非均质的“机器伤害（所有）人类”，科技作为一种工具，再现与强化了人类社会古而有之的权力关系，使一些人受损、另一些人受益。在信息时代被高新科技再现与强化的关系究竟是什么？作者极富洞察力地指出：那就是奴隶制。</p>
<p><img src="https://img3.doubanio.com/lpic/s29154742.jpg"></p>
<p>尽管玫瑰的芬芳并不依赖于它的名字，但对于社会权力关系这种抽象事物，用什么语言谈论它，会直接影响受众的观感。当富士康、苹果和优步不约而同地声称为他们打工的劳动者是“自由的”，作者一针见血地指出了现代信息技术产业与十七世纪的奴隶制经济之间的共性：一方面，它们都建立在对劳动者的全面控制、甚至是对人身自由的控制基础上，富士康在连续跳楼事件之后安装的“防跳网”偶然而又必然地重现了十七世纪大西洋上运奴船上的设置，因为只有剥夺劳动者的人身自由乃至“自杀权”才能从他们身上榨取最大的剩余价值；另一方面，它们都着力生产“成瘾性消费品”，iPhone和微信就像白糖和咖啡一样让消费者深陷其中不能自拔，这才保障了廉价奴工生产出来的产品源源不断地被消费。在这一产业体系中，不仅在富士康生产iPhone的工人如同奴隶一般被控制，使用iPhone的消费者同样如同奴隶一般被规训——邱林川将前者称为“制造的奴隶”，后者则被称为“被制造的奴隶”。</p>
<p>信息技术产业与奴隶制，这个或许令人吃惊、但绝非无中生有的类比，就像“玫瑰的名字”一样，让我们突然获得了一种能力，可以去谈论一些司空见惯、却又难以捕捉的问题。例如“低头族”：我们身边的年轻人（以及我们自己）随时随地都在低头玩手机，竟然到了城市专门开设“手机人行道”的地步，对此我们本能地感到不满，却不知该如何批评这一现象。直到邱林川说，这些人是“i奴”——信息时代的奴隶。于是我们恍然大悟：双手被无形的镣铐捆绑举在胸前，双脚只能沿着画好的路线前行，这可不就是奴隶的形象吗？为了让这个类比更加贴切，作者专门研究了与奴隶制相关的大量文献。当我们看到奴隶制的若干特征与当代信息产业的现状竟然高度吻合，这个类比给我们带来的冲击绝非仅仅是比喻意义上的。</p>
<p>有了一个可以被谈论的问题，我们就能更有效地去发现潜在的解决办法。针对奴隶制对奴工的人身控制和成瘾性消费两大特征，作者将视野投向全球，并发现了一些可能的替代方案，例如劳动者共同拥有、民主治理的“平台合作主义”，例如重视供应链社会效应、以耐用性（而非消耗性）为卖点的“公平手机”等。尽管这些替代方案尚显稚嫩，但毕竟让我们看到了“另一种方案”的可能性；而为了去发现“另一种方案”，首先就必须有一套批判的话语来指出现状中的缺陷。从这个意义上，邱林川这本《再见i奴》可能是在看似牢不可破的资本与科技共同铸就的铁板上划开了第一道裂痕。</p>
<p>博斯特罗姆在《超级智能》中的一个观点我个人非常赞同：信息技术的发展如此迅猛，我们很可能正处在一个决定人类命运的拐点上。然而当大众——在科技与资本精英的引导下——担心着几十年后人工智能是否会统治世界的时候，邱林川给我们指出了一幅更加现实也可能更加危险的图景：这个科技拐点将要决定的，可能是科技究竟让大多数人从此过上幸福的生活、还是把大多数人变成奴隶。这两者之中较为美好的那种前景，不会无缘无故自动发生的。拥有合适的语汇去谈论和批评，乃是我们能够对这次选择产生影响的第一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;[本文系《&lt;a href=&quot;https://book.douban.com/subject/26916525/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;再见i奴&lt;/a&gt;》（Goodbye iSlave）的书评，以《&lt;a href=&quot;http:
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云原生平台：市场现状分析</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/8/cloud-native-platforms-overview/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/8/cloud-native-platforms-overview/</id>
    <published>2017-06-08T05:01:00.000Z</published>
    <updated>2017-06-07T11:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于期望获得云原生能力的企业，在IaaS提供的云计算弹性与开发云原生应用之间，还有一个很大的空白地带：如何用云计算为软件交付的过程服务。Docker和Kubernetes等工具提供了容器化和容器编排的能力，但是企业需要解决“为了承载我（期望）的开发流程，我需要怎样的容器和编排”的问题。这就给云原生平台（Cloud Native Platforms）创造了市场空间。</p>
<h2 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h2><p>为分布式云应用提供支撑的平台从2015年开始受到广泛的关注，围绕着Docker、容器编排等技术，开始出现各种商业模式。<a href="https://thenewstack.io/cloud-native-platforms-will-take-off-2016/" target="_blank" rel="external">云原生平台可以视为下一代中间件</a>，其用途是交付企业级分布式应用所需的各种支撑能力。以容器和容器编排为基础，云原生平台提供了日志、审计、安全、合规、权限管理、容器镜像仓、基础设施抽象、团队成员启动等支撑功能。</p>
<p>测试和开发环境的随需可得不仅仅有助于优化基础设施资源，而且有助于统一实践和流程，能<a href="https://www.tcs.com/tcs-launches-engineering-environment-service-red-hat-openstack-platform" target="_blank" rel="external">促进团队采用敏捷和DevOps的最佳实践</a>。把抽象层次提高一点，<a href="http://blog.xebia.com/top-5-ingredients-for-developing-native-cloud-applications/" target="_blank" rel="external">云原生平台要支撑云原生应用所需的5项能力</a>：</p>
<ol>
<li>云平台自动化。不仅提供基础设施开通与配置的自动化，而且内嵌测试、版本控制、文档、软件生命周期管理等方面的最佳实践，使整个开发-测试-部署的过程工作量最小化。</li>
<li>无状态函数。将软件以小型、目的单一的函数形式部署，通过事件驱动服务，从而避免维护运行时环境。</li>
<li>微服务架构模式。每个服务提供单一的业务能力，能够独立开发、测试和部署。</li>
<li>DevOps流程和文化。自动化整个软件交付流水线，打破开发与运维的间隔，以全功能团队形式工作。</li>
<li>云可靠性工程。提高运维工作的自动化程度，把运维重心放在平台工程，从而提高系统可靠性。</li>
</ol>
<p><img src="http://blog.xebia.com/wp-content/uploads/2017/02/Xebia_Native_Cloud_Stack_Framework_variant1-3.png"></p>
<p><a href="https://www.safaribooksonline.com/library/view/cloud-foundry-the/9781491932421/ch01.html" target="_blank" rel="external">云原生平台可以大致分为</a>“非结构化的/不带意见的”（unstructured/unopinionated）和“结构化的/带意见的”（structured/opinionated）两类。Pivotal声称Cloud Foundry作为一个“结构化的/带意见的”云原生平台，提供了下列能力：</p>
<ul>
<li>服务作为比基础设施更高层级的抽象。Cloud Foundry提供按需部署应用的机制。</li>
<li>容器。所有应用程序都以容器形式运行。</li>
<li>敏捷和自动化。Cloud Foundry可以作为CI/CD的一部分，用于随需开通环境和服务。</li>
<li>微服务支撑。为松散耦合的服务架构提供集成和协作机制。</li>
<li>云原生应用支撑。对应用程序的约束使其效率更高、更易管理、更可靠。</li>
</ul>
<p><img src="https://www.safaribooksonline.com/library/view/cloud-foundry-the/9781491932421/assets/cfdg_0101.png"></p>
<p>从技术角度，<a href="https://wikibon.com/cloud-native-application-platforms-structured-and-unstructured/" target="_blank" rel="external">云原生平台有5个重要的考量因素</a>：</p>
<ol>
<li>如何加速应用开发的速度？</li>
<li>如何推动新技术趋势（移动、社交、实时、数据核心、IoT）的应用？</li>
<li>如何充分利用开源技术和社区？</li>
<li>如何提升运维响应变化的能力？</li>
<li>如何在平台中嵌入安全性？</li>
</ol>
<h2 id="部分产品分析"><a href="#部分产品分析" class="headerlink" title="部分产品分析"></a>部分产品分析</h2><p><a href="https://www.apcera.com/" target="_blank" rel="external">Apcera</a>的定位是“支持云原生应用和遗留应用的容器管理平台”。主要的解决方案是“<a href="https://www.apcera.com/solutions/application-modernization" target="_blank" rel="external">遗留应用现代化</a>”，号称能在7天内把遗留系统迁移上云。</p>
<p><a href="https://apprenda.com/platform/" target="_blank" rel="external">Apprenda</a>是基于Kubernetes的面向开发团队的云平台，既能支持云原生应用、也能支持传统应用的开发。通过集中的云政策和监管、共享的应用服务、基于微服务的架构标准化，Apprenda把开发组织变成成熟的软件工厂。</p>
<p><a href="https://atlas.hashicorp.com/help/intro/use-cases/continuous-deployment-of-immutable-infrastructure" target="_blank" rel="external">HashiCorp Atlas</a>在Vagrant的基础上规定了一个“开发-构建-产物管理-部署-上线”的标准流程。适用于以技术为核心、重视DevOps流程与文化的组织。</p>
<p><a href="https://pivotal.io/platform" target="_blank" rel="external">Cloud Foundry</a>是重视部署与运维的云原生平台。强调的卖点是（1）部署的速度；（2）云应用的伸缩能力；（3）缺省的安全性。</p>
<p><a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a>是基于Docker和Kubernetes的容器应用平台，支撑容器的开发、部署和管理。主要功能有（1）容器编排；（2）容器存储；（3）支持多种编程语言和框架；（4）自动化应用程序构建、部署、伸缩和健康管理；（5）基于项目的管理界面；（6）自服务平台。</p>
<p><a href="https://codenvy.com/" target="_blank" rel="external">CodeEnvy</a>在Docker基础上为开发团队提供云上的工作区。CodeEnvy提供.NET、Android、C++、Java、Go等技术栈，用Eclipse Che作为开发环境。主要卖点有（1）一键式Docker环境；（2）团队成员启动和协作；（3）DevOps工作区平台。</p>
<p><a href="http://www.wercker.com/" target="_blank" rel="external">Wercker</a>是基于Docker的CI/CD自动化平台（类似于SnapCI），用Kubernetes提供容器编排，支持微服务部署，缺省支持GoLang、NodeJS、Ruby、Python。支持自定义的CI/CD流水线，通过流水线的级联和触发配置出复杂的工作流，支持并行测试。</p>
<p><a href="http://www.daocloud.io/devops" target="_blank" rel="external">DaoCloud</a>基于容器技术从交付件、运行环境、环境配置、权限协作等多个方面定义企业交付流程标准，通过标准化提升跨部门协作的沟通效率，推动软件在不同阶段的自动化高效流转。高度灵活的交付流程定义引擎，支持可视化定义企业完整的端到端交付流程。通过云平台的弹性，支撑企业交付流程中不同阶段对环境运行时的需求。</p>
<p><a href="https://www.shurenyun.com/scene-cicd.html" target="_blank" rel="external">数人云</a>基于Mesos和docker，提供企业级持续集成和持续交付解决方案，从快速搭建持续集成环境，到改进和融合企业的开发、测试及持续发布流程，助力企业提升产品发布效率，规范产品开发流程。可以继承企业现有的版本控制工具，通过Jenkins实现自动构建和测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于期望获得云原生能力的企业，在IaaS提供的云计算弹性与开发云原生应用之间，还有一个很大的空白地带：如何用云计算为软件交付的过程服务。Docker和Kubernetes等工具提供了容器化和容器编排的能力，但是企业需要解决“为了承载我（期望）的开发流程，我需要怎样的容器和编
    
    </summary>
    
    
  </entry>
  
</feed>
