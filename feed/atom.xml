<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>透明思考</title>
  <subtitle>Transparent Thoughts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gigix.thoughtworkers.org/"/>
  <updated>2017-11-15T03:52:48.000Z</updated>
  <id>http://gigix.thoughtworkers.org/</id>
  
  <author>
    <name>Jeff Xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数字化转型与平台战略</title>
    <link href="http://gigix.thoughtworkers.org/2017/11/15/digitization-and-digital-platform/"/>
    <id>http://gigix.thoughtworkers.org/2017/11/15/digitization-and-digital-platform/</id>
    <published>2017-11-15T05:01:00.000Z</published>
    <updated>2017-11-15T03:52:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>数字化浪潮对传统行业的冲击已经被越来越多的企业领导者所感知。据《<a href="https://hbr.org/2016/03/the-industries-that-are-being-disrupted-the-most-by-digital" target="_blank" rel="external">哈佛商业评论</a>》的调查，半数以上的企业高管认为自己的业务将在12个月内受到数字化浪潮较大程度的冲击，其中媒体、通信、消费者金融服务、零售、科技、保险、消费者产品、专业服务和教育等10个行业受到的影响最大。</p>
<p><img src="https://hbr.org/resources/images/article_assets/2016/03/W160311_GROSSMAN_EXECUTIVESWHO1-850x505.png"></p>
<h2 id="数字化对企业的要求"><a href="#数字化对企业的要求" class="headerlink" title="数字化对企业的要求"></a>数字化对企业的要求</h2><p>数字化到底对企业提出了什么要求？可以从一个真实的案例中看出端倪。一家全球知名的快消品企业，在京东618购物节之前花了大量的成本和精力设计促销计划，细到优惠力度、广告Banner等每个具体环节都经过多次论证。市场部从领导到一线员工都如临大敌，力求方案精益求精。对待一次重要的促销机会，当然需要重视，但是从上到下如此关注、投入如此多的精力，这是为什么？原来这家企业对市场数据的处理能力还停留在相当初级的阶段，电商平台提供的数据还在用Excel归集处理。在这种数据处理能力的支撑下，市场部的促销举措至少需要两周时间才能看到数据反馈。也就是说，一旦促销举措设计失误，在购物节的时间窗口内就没有再次调整的机会。</p>
<p>这家公司的情况让我联想起几年前看过的<a href="https://www.thoughtworks.com/insights/blog/case-continuous-delivery" target="_blank" rel="external">一组数据</a>：Etsy在2012年平均每天能往生产系统部署超过30次；Amazon在工作日平均每11.6秒就有一次生产系统部署发生，峰值时一小时内部署超过1000次。当这家快消品企业响应一次变化、进行一次实验的周期需要以两周计，领先的互联网企业几年前就已经能够以小时、分钟为单位响应变化和开展实验。这种快速响应变化的能力，是数字化企业的核心竞争力。</p>
<p>为了打造快速响应的能力，海尔把传统的层级管理体制改造成了三级的自主经营体机制。海尔将7万名员工自我组织成了2000多个自主经营体，最大的自主经营体数百人，最小的只有7人，如果一个员工在海尔内部找不到一个自营体能够接受他，海尔就会和他解除劳动合同。海尔的首席执行官<a href="http://www.it-times.com.cn/xwss/39791.jhtml" target="_blank" rel="external">张瑞敏说</a>：“每个小微（团队）都要变成一个个的小团体，所有相关人员都在这里头，负责开发某一个地方的市场，或某一个地区的市场。”直接来自顾客和市场的信息，就像鲶鱼一样激活了小团队的响应能力。</p>
<p><img src="/assets/2017/11/15/haier.jpg"></p>
<p>芬兰的游戏公司<a href="http://supercell.com/en/" target="_blank" rel="external">Supercell</a>也倡导以小团队模式进行游戏开发，一般来说两个员工、或者5个员工、最多不超过7个员工组成独立的开发团队，称之为Cell（细胞），这也是公司名字Supercell（超级细胞）的由来。团队自己决定做什么样的产品，然后最快的时间推出产品的公测版，看看游戏是否受用户欢迎。如果用户不欢迎，迅速放弃这个产品，再进行新的尝试，期间几乎没有管理角色的介入。这家公司在2015年手机游戏排行Top10中曾占据榜单大半江山，2016年腾讯以86亿美元收购了员工数不到200人的Supercell公司84.3%的股份。</p>
<p>从海尔、Supercell以及其他很多小团队的成功经验中，我们看到直面市场与顾客的具有四大优势，使得他们能很好地应对数字化浪潮带来的对响应力的要求：</p>
<ol>
<li><strong>协作高效</strong>。小团队协同效率最高，能全力提供顾客所需，避免组织内耗。</li>
<li><strong>目标清晰</strong>。小团队对战机（商机）的把握更加敏锐。</li>
<li><strong>调整快捷</strong>。当情况发生变化或获得新信息，小团队能更快调整。</li>
<li><strong>迅速扩展</strong>。一旦找准目标，小团队能全力投入，迅速扩大战果。</li>
</ol>
<h2 id="小团队需要大平台"><a href="#小团队需要大平台" class="headerlink" title="小团队需要大平台"></a>小团队需要大平台</h2><p>然而，并非所有小团队都能天生地具备这四大优势。实际上，我们看到很多创业小团队并没有很强的感知和响应变化的能力。成都的一支小团队在2016年创办了“<a href="http://www.lieyunwang.com/archives/147235" target="_blank" rel="external">翘翘动感沙拉</a>”品牌，针对有轻餐食及塑形需求的白领人士，一方面能够作为一道主食满足都市白领的午餐需求，另一方面为有塑形减脂需求的人士提供热量较低且健康的食物。翘翘沙拉斥资30多万装修厨房，邀请了国际五星级酒店主厨加盟，筹备用了近半年时间。上市后才发现产品定位与市场不符，4个月后就停止了经营。这支小团队规模虽小，却没能发挥出预期的响应力。</p>
<p>再次放眼站在数字化潮流前端的企业，我们会发现：原来他们不止是倡导小团队模式，而且为小团队建立了一整套的支撑平台。在海尔的自主经营体结构中，有三个层次的自主经营体。其中一线经营体经营体直接面对顾客，为所负责的顾客群创造价值；二级经营体（或称平台经营体）则为一线经营体提供资源和专业的服务支持，包括人力资源管理、供应链、市场营销、质量体系、战略管理等，所以，平台经营体是一级经营体的资源平台、流程平台、专业化服务平台。平台的存在让一线经营体获得了响应力。</p>
<p><img src="http://pic2.pedaily.cn/201609/20169680137734.jpg"></p>
<p>阿里巴巴则是用共享服务体系支撑前端业务。今天的阿里巴巴已经将集团20多个核心业务中公共的、通用的业务以服务的形式沉淀到了共享业务事业部，整个集团的核心业务能力均建立在这样一套共享服务体系之上。共享服务体系从会员、商品、交易、支付四大中心开始建设，支撑1688、淘宝、聚划算、闲鱼及全集团超过2000个应用。共享服务体系强调的能力包括：服务分布的能力；数据分布的能力；数字化运营的能力；平台稳定的能力；平台开放的能力等。</p>
<p><img src="/assets/2017/11/15/ali.png"></p>
<p>华为也在强调用大平台炮火支撑前线指战员。任正非在华为质量与流程IT管理部员工座谈会上说，华为内部IT要做到“能力模块化和微服务化，使能公司实现数字化转型和大平台下的精兵作战，在研发、销服、供应等业务领域要率先实现ROADS体验（实时、按需服务、在线、自助、社交化连接）”。</p>
<p>透过对各种小团队的观察我们发现，独立自主、直面顾客的小团队，在具备组织灵活性的同时，也必定面对基础能力的局限。那些走在数字化潮流前端的企业，都是以平台形式为小团队提供了四大能力的支撑，才能发挥出小团队精准、灵活、高效的优势：</p>
<ol>
<li><strong>洞察顾客</strong>的能力。小团队需要透过多种数字化渠道获得对顾客的全面了解。</li>
<li><strong>服务供给</strong>的能力。小团队需要迅速整合企业内部的资源和能力为顾客提供服务。</li>
<li><strong>数据决策</strong>的能力。小团队需要随时捕获市场反馈，根据真实数据做决策。</li>
<li><strong>实验创新</strong>的能力。小团队需要开展受控实验，通过实验检验创新假设。</li>
</ol>
<h2 id="数字平台战略"><a href="#数字平台战略" class="headerlink" title="数字平台战略"></a>数字平台战略</h2><p>企业数字平台，是基于云计算“基础设施即服务”（IaaS）能力之上，为企业数字化战略提供能力支撑的一系列平台服务（PaaS），涵盖IT系统研发与运营全生命周期。企业数字平台为直面市场与顾客的精益团队提供顾客洞察、服务供给、数据决策、实验创新四大能力支撑，赋能团队快速创新和响应变化。而这四大能力的基础，是IT组织的精益研发能力和相应的基础设施。</p>
<p><img src="/assets/2017/11/15/digital-capabilities.png"></p>
<p>对众多成功的数字化企业的调研显示，这些企业有着一些引人注目的共性。他们逐步构建自己的数字平台，以此为基础激活企业核心资产。数字平台支撑小团队迅速响应市场和顾客的变化、高效地实验创新，给这些企业带来了显著的改变：</p>
<ul>
<li>提升IT效能，为产品和技术团队赋能，更快更好地为客户交付产品。</li>
<li>构建行业生态，使得新业务、新产品、新服务能充分利用服务化后的企业核心能力和资源。</li>
<li>促进业务创新，充分利用核心资产进行高效、快速的创新实验，保持企业竞争力。</li>
</ul>
<p>特别针对数字化小团队需要的四大能力，ThoughtWorks的<a href="https://www.thoughtworks.com/cn/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>提出了一个基础设施、四个平台的框架结构：</p>
<ol>
<li>精益研发需要的<strong>交付基础设施</strong>。</li>
<li><strong>顾客触点平台</strong>全方位洞察顾客所需。</li>
<li><strong>资源服务化平台</strong>快速供给数字化服务。</li>
<li><strong>数据自服务平台</strong>支持基于数据的决策。</li>
<li><strong>实验测量平台</strong>赋能受控创新实验。</li>
</ol>
<p><img src="/assets/2017/11/15/digital-platforms.png"></p>
<p>基于数字平台战略提出的框架，企业可以结合自身情况，逐步建设当前数字化进程所需的支撑平台，用平台助推企业的数字化战略。</p>
<p><em>（更多关于数字平台战略的信息，请下载我们的《<a href="https://info.thoughtworks.com/DPS-subscription.html" target="_blank" rel="external">数字平台战略</a>》白皮书）</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数字化浪潮对传统行业的冲击已经被越来越多的企业领导者所感知。据《&lt;a href=&quot;https://hbr.org/2016/03/the-industries-that-are-being-disrupted-the-most-by-digital&quot; target=&quot;_bl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>企业IT的经营模式及其与企业架构师的关系</title>
    <link href="http://gigix.thoughtworkers.org/2017/11/10/operating-models/"/>
    <id>http://gigix.thoughtworkers.org/2017/11/10/operating-models/</id>
    <published>2017-11-10T05:01:00.000Z</published>
    <updated>2017-11-11T13:36:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>企业IT的经营模式可以由两个维度来定义。第一个维度是标准化，第二个维度是整合。这两个维度划分出的四个象限，定义了四种不同的经营模式。不同的经营模式，有各自不同的聚焦重心，对企业架构师的关注点也有不同的要求。</p>
<p>经营模式的第一个维度是标准化（standardization），即企业的各个业务单元之间在多大程度上复用业务流程与系统。高标准化程度能带来业务的效率与可预测性，但同时高标准化程度需要投入成本来达到，包括建设可复用的IT系统、替代业务上可以运作但不够标准的系统等。并且高标准化程度有可能局限各个业务单元的本地创新能力。</p>
<p>经营模式的第二个维度是整合（integration），即各个业务单元之间在多大程度上复用数据。高整合度也能提高业务的效率，更重要的是能促成业务单元之间更有效的协作，增加整个组织的透明度与敏捷度。另一方面，提高整合度也需要成本，这种成本主要来自于对数据的语法（格式）和语义（术语含义、领域模型）在全组织范围达成一致。</p>
<p>标准化和整合两个维度定义出了四种不同的经营模式。</p>
<p><img src="/assets/2017/11/11/operating-models.png"></p>
<p><strong>第一种经营模式是低标准度、低整合度的差异（Diversification）模式</strong>。在这种模式下，各个业务单元根据自己的需要各自建设IT系统，既不特别在意使用统一的、连贯的技术（例如有些系统用Java开发、另一些用PHP开发，而且没有明确的原则判断应该如何选择），也不特别在意数据的共享（例如不同的保险品牌和种类各自保存各自的顾客、保单等信息，彼此之间不共享）。</p>
<p>在业务早期试错和快速扩张的阶段，差异模式使IT与业务诉求高度对齐，从而带来很好的响应能力：业务有什么需求，直接告诉IT；IT采用自己最擅长的技术手段快速实现。并且差异模式对于系统外包也是最简单的，外包商只要按时交付预先要求的功能，项目内部的运作不需要多操心。差异模式的缺点也很明显：它造成业务筒仓（silo），使技术能力和业务能力无法积累和复用。</p>
<p>如果差异模式是企业有意识的选择，此时就不要过早地引入过多标准化的要求，以免拖慢业务试错的节奏。这时企业架构师应该关注项目运作方法论的标准化，例如推行一套轻量级、非侵入的项目流程和度量方法，对几个项目关键节点进行监控和治理。至于业务筒仓造成的重复开发、信息不整合等问题，暂时只需保持警惕即可。</p>
<p><strong>第二种经营模式是高标准度、低整合度的复制（Replication）模式</strong>。在这种模式下，降低IT成本成为IT治理的一个关键点，各业务单元在建设IT系统时需要共享技术平台、基础设施、技术架构等技术组件。例如澳洲某保险集团在2012年时建立了一套基于Maven和Spring Flow的前端应用模板，当时启动的大量在线渠道系统全部要求采用这套模板，并不断提取各个项目的技术经验回到这套模板中。</p>
<p>复制模式最大的优势是系统建设成本的快速降低。仍然以这家保险集团为例，它的第一个在线渠道系统（房屋险）用了6个月时间开发上线，第二个在线渠道系统（车险）只用3个月。越到后来，新建一个在线渠道和将一个在线渠道复制到不同品牌所需的工作量就越少。而且对于运维团队而言，当所有在线渠道系统都采用同样的技术模板以后，运维的难度和工作量大大降低了。不过为了从技术与工具的标准化中受益，初期的架构选型与规范成本必不可少，并且需要持续不断地抽取项目中的最佳实践反哺到共享标准中。实际上，该保险集团的第一个在线渠道系统之所以需要较长的时间建设，其中一部分原因就是需要在该项目过程中建立起最初的技术模板。</p>
<p>在复制模式下，企业架构师的主要关注点是标准和共享服务/工具的建设，包括初期的标准化努力和持续的抽取/重构过程。企业架构师需要建立起一个横跨各个系统、各个项目的技术社区网络，确保技术标准能在各个系统中落地，并且能了解各个系统的反馈与创新。</p>
<p><strong>第三种经营模式是低标准度、高整合度的协作（Coordination）模式</strong>。这种模式聚焦的目标是商业运营的成本和质量，IT的成本则不是最优先的考量。为了向顾客提供更高效、更优质的服务（以及创造潜在的交叉销售和向上销售机会），各业务单元之间有共享标准的业务流程与数据的要求，这是协作模式的原动力。</p>
<p>协作模式的优势是不同业务单元之间的协同效应，给顾客提供更完善的服务。这家澳洲的保险集团从2011年启动了数据整合的行动，将原来的十多个后台核心保险系统整合成两个，并建立“顾客数据总线”来汇集顾客在若干保险品牌、种类、渠道、乃至银行等其他金融服务中留下的数据，建立对顾客的全面认知。当在线渠道领域以复制模式发展的同时，该保险集团的线下电销领域以协作模式优化其服务。</p>
<p>协作模式的最大挑战是对齐各个系统对于数据的语法和语义，这背后涉及的不仅是IT，还有业务单元的权力之争。企业架构师在这种模式下应该关注的重心是企业核心应用和/或中台系统的建设：用什么样的中台功能承载各业务单元目前的业务需求、并为各业务单元创造价值，可能是促使业务数据整合的重要推手。例如阿里中台的建设过程中，淘宝和天猫之所以有动力把用户、商品、交易、店铺等核心数据归拢到共享中台，起初的契机是因为中台提供的团购能力能够立即为它们所用。</p>
<p><strong>第四种经营模式是高标准度、高整合度的统一（Unification）模式</strong>。在这种模式下，新系统会采用标准的技术模板、工具、方法，基于已有的数据和业务流程来构建，企业所追求的目标将是新业务的上市速度和战略敏捷度。</p>
<p>当技术的标准化和业务的整合都达到很高水平，IT组织就有能力把现有的业务功能包装成即插即用的业务流程和能力模块，以微服务的形式提供给前端系统的使用者（包括企业外的第三方开发者）。此时企业IT已经成为行业领域的平台，前端应用的开发者能够快速开发新的应用、借助平台数据迅速触达用户、并立即获知顾客反馈。不过这种模式也并非没有风险：规划与建设这样一个平台需要的成本非常高，并且高度统一化的IT系统建设与运营流程潜在地有可能限制技术与业务创新的涌现，甚至使企业错失颠覆性创新的机遇。</p>
<p>在统一模式下，企业架构师需要关注几个方面的问题。首先，他需要关注建设可复用的业务流程与能力组件；同时，他也需要关注建设覆盖软件全生命周期的开发-运维支撑体系；最后，他还要时刻留意技术与业务趋势的动向，考虑是否需要主动引入创新要素。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;企业IT的经营模式可以由两个维度来定义。第一个维度是标准化，第二个维度是整合。这两个维度划分出的四个象限，定义了四种不同的经营模式。不同的经营模式，有各自不同的聚焦重心，对企业架构师的关注点也有不同的要求。&lt;/p&gt;
&lt;p&gt;经营模式的第一个维度是标准化（standardiza
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从海尔模式看数字化平台</title>
    <link href="http://gigix.thoughtworkers.org/2017/10/17/haier-and-digital-platform/"/>
    <id>http://gigix.thoughtworkers.org/2017/10/17/haier-and-digital-platform/</id>
    <published>2017-10-17T05:01:00.000Z</published>
    <updated>2017-10-17T04:11:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于数字化、网络化转型的目标，海尔的定义是：企业无边界、管理无领导、供应链无尺度。企业无边界，意味着要让全球第一流的资源进入海尔，并能够持续动态优化。管理无领导，即打破科层制组织，让员工与用户零距离连接，拥有自主权，快速响应市场，最终实现“无为而治”的最高境界。供应链无尺度，要探索按需设计、按需制造和按需配送的体系，实现从大规模制造向大规模定制的转变。</p>
<p>与这个定义相对应的运营体系是人单合一管理模式，其中包括了顾客价值、自主经营体、日清体系和人单酬四个基本要素，分别体现了业务经营的目标、组织形态、工作方式、度量方法。对顾客价值负责的自主经营体，抢单进人、按单获酬，日常工作讲究日清日高，那么自主经营体必然就会进化为与顾客、与市场、与业务价值高度对齐的“双创小微”。</p>
<p>双创小微具有驱动力强、响应灵活的优势，潜在的劣势则有两个方面：第一是小微目标与公司目标缺乏对齐、彼此之间形不成协作效应；第二是基础能力缺失或重复建设，不能保障服务交付的高效与高质量。经过多年的探索，海尔发现三层结构既能体现足够的控制，又能够维持各个系统自身的活力。所以，在海尔的自主经营体结构中，有三个层次的自主经营体，分别是一级经营体、二级经营体和三级经营体。</p>
<p><img src="http://pic2.pedaily.cn/201609/20169680137734.jpg"></p>
<ul>
<li>一级经营体，又称为一线经营体，这些经营体直接面对顾客，为所负责的顾客群创造价值。</li>
<li>二级经营体，又称为平台经营体，它们为一线经营体提供资源和专业的服务支持，包括人力资源管理、供应链、市场营销、质量体系、战略管理等，所以，平台经营体是一级经营体的资源平台、流程平台、专业化服务平台。</li>
<li>三级经营体，又称为战略经营体，主要负责制定战略方向，解决内部的协同和发现新的市场机会，同时为经营体配置资源，帮助一级经营体和平台经营体达成目标。</li>
</ul>
<p>这个结构与1960年代英国控制论学家斯塔福·比尔提出的“<a href="https://en.wikipedia.org/wiki/Viable_system_model" target="_blank" rel="external">可生存系统模型</a>”有异曲同工之处。如果将可生存系统模型简化为“肌肉（系统1）-神经（系统2/3）-脑（系统4/5）”的三级，它的落地形态就会类似于海尔的三级自主经营体。</p>
<p><img src="http://7xpvay.com1.z0.glb.clouddn.com/d04bd630-b32d-11e6-96cf-69a982993485"></p>
<p>双创小微有三个基础：制度之基是用户体验交互制，人才之基是创业者，平台之基是云平台。云平台可以看作是二级经营体的IT替身：为了面向大量、变化频繁的小微（海尔8万多员工分为<a href="http://data.book.hexun.com/chapter-18474-2-7.shtml" target="_blank" rel="external">2千多个自主经营体</a>），为了跨越企业边界支持企业内外的创业者，平台经营体不可能再靠人工提供服务，必须以云平台的形式提供小微需要的资源和服务。</p>
<p>于是人单合一管理模式就演变为一个创业平台模式，它包括一个主题和两个功能。海尔人单合一创业平台模式的主题是“人和机会的匹配”，即创业者和创业机会的匹配。为了服务这个主题，它有两个主要功能：创业机会的识别和创造（Opportunity Creation）和创业机会的转化和实现（Opportunity Capture）。前者聚焦于创业者如何把市场上的潜在需求转化和升级为消费者的实际需求，从而识别、发现或者创造出新的商业机会；后者则强调通过一系列机制设计、制度安排、创新策略等将战略机会进行转化，从而为消费者创造价值。</p>
<p>基于机会创造和机会捕捉这两个功能，海尔交互与协同平台是人单合一管理模式最为重要的信息支持平台。海尔交互与协同平台包括6大系统：以顾客为主的虚实交互平台、开放式创新平台、供应链信息平台；以员工为主的电子损益表、电子人单酬表、信息化日清平台。</p>
<p>用《<a href="https://book.douban.com/subject/27021779/" target="_blank" rel="external">智慧转型</a>》的框架来分析，这些系统帮助一线经营体获得4种能力，从而更好地为顾客创造价值：</p>
<ol>
<li>准确掌握顾客和市场需要的能力</li>
<li>快速、高质量、低成本地交付顾客所需价值的能力</li>
<li>基于数据了解并改进工作状态的能力</li>
<li>通过受控实验快速验证创新的能力</li>
</ol>
<p><img src="https://brandleadership.files.wordpress.com/2016/02/5-domains-of-digital-transformation-diagram.png?w=398&h=308"></p>
<p>在创业平台模式下，顾客、企业和员工都被重新定义。顾客被重新定义为“资源”，员工被重新定义为“创客”，企业则被重新定义为数字平台。在海尔组织中只有平台主、小微主和小微成员三类角色，小微成为为用户负责的独立运营主体，只有为用户创造价值才能获得报酬，充分享有决策权、用人权和分配权。小微和平台之间是市场结算关系，平台的报酬源自小微。从这个角度，海尔的组织变革不是简单的扁平化、跨部门和跨层级通道的建立，或者新设部门。海尔组织变革核心是在一流资源和用户之间架构起快速配置资源的平台，释放平台的同边和跨边网络价值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于数字化、网络化转型的目标，海尔的定义是：企业无边界、管理无领导、供应链无尺度。企业无边界，意味着要让全球第一流的资源进入海尔，并能够持续动态优化。管理无领导，即打破科层制组织，让员工与用户零距离连接，拥有自主权，快速响应市场，最终实现“无为而治”的最高境界。供应链无尺度
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>毕业设计中使用敏捷方法的尝试</title>
    <link href="http://gigix.thoughtworkers.org/2017/8/23/agile-in-graduation-projects/"/>
    <id>http://gigix.thoughtworkers.org/2017/8/23/agile-in-graduation-projects/</id>
    <published>2017-08-23T05:04:00.000Z</published>
    <updated>2017-08-23T13:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>从CNKI收录的共计超过1000篇与敏捷软件开发相关的论文中，我找到了5篇关于在毕业设计中使用敏捷方法的文章，从一个侧面勾勒出高校教育工作者看待敏捷的一种视角。</p>
<p><img src="/assets/2017/8/23/scholarship.jpg"></p>
<p>最早谈这个话题的是广东工业大学计算机学院的刘竹松、李振坤、王文彦三位作者。他们于2007年发表的《极限编程在计算机本科毕业设计中的应用》一文中认为，“将极限编程应用到计算机专业本科毕业设计中”的主要目的是“有助于学生形成团队合作的精神”，从而“促进学生学习的兴趣，加强学生综合应用各方面知识的能力，增强学生之间的相互交流、相互学习，提高毕业设计的整体效果”。从这个出发点，作者们认为“极限编程的核心是结对编程”，具体实施时谈的也是“合理设计结对”和“合理分配任务”。</p>
<p>（这篇文章先后发表在《电脑知识与技术》和《计算机教育》两个期刊，可能是作者一稿多投。所以讨论“在毕业设计中使用敏捷方法”这一主题的文章其实只有4篇。）</p>
<p>稍后，2007年10月，大理学院数学与计算机学院的杨健、张晓玲、周少云三位作者在《计算机时代》发表了《软件开发类毕业设计中敏捷软件技术的应用》一文。在这篇文章中，作者尝试解决“毕业设计质量低下，学生得不到真正锻炼”的问题，具体表现形式包括“软件各个功能模块无法有效整合”、“需求因为各种原因不断改变”、“软件的错误和缺陷不断涌现”等。与此前的刘文不同，杨文尝试回答的问题更为全面，包含了沟通、需求、质量等多个角度。因此在看待敏捷方法时，三位作者关注到了更为全面的多个敏捷原则，包括“增量式开发、可持续的开发速度、简单、结对编程、适应改变、个体激励和交流、反省”等。值得注意的是，这些概念在敏捷软件开发的理论框架中并不都是“原则”，有一些是具体的实践。并且杨文完全没有提及测试驱动开发、持续集成等技术性的实践，也没有提及用户故事、看板等需求管理和迭代管理的实践。似乎三位作者的关注点主要还是在团队内部的交流和协作，对于团队对外的呈现（需求的获取和管理、项目进度、软件质量）的考虑较少。</p>
<p>第三篇文章是石家庄外经贸职业学院的马静媛和河北交通职业技术学院的薛惠于2009年发表于《电脑知识与技术》的《极限编程在高职计算机专业毕业设计中的应用》。与刘文相似，这篇文章想要达到的目标也是“加强学生综合应用各方面知识的能力，挖掘学生的学习潜力，并且培养学生之间的合作意识，提高毕业设计的整体水平”，重心仍然是在团队的内部与沟通协作上。与刘文和杨文相比，马文明确指出了极限编程的12个最佳实践，并着重讨论其中的简单设计、结对编程和集体代码所有制三个实践。另外，马文提出了对测试驱动开发实践的要求：“编码之前必须先写好单元测试代码”、“代码完成后用编码前编写的测试用例进行单元测试”、“代码和测试用例一起存入代码库”。马文没有提及如何划分用户故事和开发任务，也没有提及持续集成，从文中无法判断，学生在实际开展测试驱动开发时是否遇到任务过大、失败的测试被荒废等问题。</p>
<p>第四篇文章是湖南工业大学计算机与通信学院的曾志浩和肖小克于2012年发表于《计算机教育》的《以敏捷开发和极限编程为指导的软件工程毕业设计》。曾文与前三篇文章有一个显著的区别：这篇文章的关注重心不在内部的沟通、协作和学生能力培养，更多地关注毕业设计的进度和质量这两个对外指标。以此为出发点，曾文提出了一套“以AD和XP为指导的毕业设计过程”，包括项目的组织方式、管理方式和考核方式，并给出了具体的“典型过程及相关支撑工具”。在管理侧，曾文提出“贯穿整个毕业设计过程，以各个阶段时间点为标志，要求学生以增量的方式来完善项目开发”，并在考核时注重代码功能而非文档、交叉检查结对学生的编码工作量、要求学生就系统的多个可运行版本进行演示等，把敏捷实践与毕业设计考核方式相结合。在工具侧，曾文仅推荐了测试管理工具Mercury Quality Center和持续集成工具Jenkins，并未推荐具体的测试工具。这可能是为了顾及建议的通用性，但也给具体项目开展时自动化测试和测试驱动开发的落地留下了一个问号。</p>
<p>综观这四篇文章，我们可以勾勒出敏捷方法在中国高校计算机教育领域的历程。从早期的刘文以偏概全地看到一个特立独行的实践（结对编程）、杨文对敏捷理论的解读不清晰不准确，到马文能够准确描述极限编程的实践、并有意识地选择自己需要的实践，再到曾文从组织、管理、考核等角度全方位运用并辅以工具支撑，我们能看到中国高校计算机专业指导老师逐步深化对敏捷理解的过程。另一方面，从刘文直到曾文，对于测试驱动开发和重构的描述是语焉不详的，关于持续集成的具体实践和具体挑战的论述是缺位的，由此不难想象，在实际的毕业设计项目中，这些技术性的实践很可能并没有得到有效实施，于是敏捷会更多地退化为一种鼓励沟通、鼓励协作的团队运作方式——这与前三篇文章的诉求相一致，而曾文也没能提供技术性支撑工具（尤其是Jenkins）在实施中的真实情况。这种“重沟通轻技术”的敏捷采纳方式，恰是敏捷在整个中国IT业的境遇缩影。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从CNKI收录的共计超过1000篇与敏捷软件开发相关的论文中，我找到了5篇关于在毕业设计中使用敏捷方法的文章，从一个侧面勾勒出高校教育工作者看待敏捷的一种视角。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2017/8/23/scholarship.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>敏捷在中文期刊中的投影</title>
    <link href="http://gigix.thoughtworkers.org/2017/8/15/agile-in-chinese-journals/"/>
    <id>http://gigix.thoughtworkers.org/2017/8/15/agile-in-chinese-journals/</id>
    <published>2017-08-15T05:04:00.000Z</published>
    <updated>2017-08-15T14:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在中国推广敏捷软件开发方法十五年之后，我很想回头去看这段历史的全景。今天我用<a href="http://www.cnki.net/" target="_blank" rel="external">知网</a>做了一些检索，看到了一些有趣的数据。</p>
<p>我在所有期刊中检索主题中包含“敏捷”和“软件”的文章。其他的关键词检索会得出略有不同的结果。如果只用“敏捷”作为关键词，会得到13258条结果，但其中绝大多数与我想要谈论的软件开发方法无关。这是“敏捷”这个译名词的宿命：它是一个普遍被认可的、带有褒义的形容词，使用这个词让听众更容易接纳这些新千年以后发展起来的<a href="http://softwarepractitioner.org/translations/fowler/newMethodology.shtml" target="_blank" rel="external">新方法学</a>。但与此同时，这个译名也让听众产生更多的误解：很多人会以自己的想法去期望这些新方法学，而不去深究它们的内涵。</p>
<p>我尝试的另一个检索条件是把文献类别限定在“计算机软件及计算机应用”，并检索主题中包含“敏捷”、且不包含“制造”的文章。排除“制造”的原因是“<a href="http://wiki.mbalib.com/wiki/%E6%95%8F%E6%8D%B7%E5%88%B6%E9%80%A0" target="_blank" rel="external">敏捷制造</a>”也是一个相当热门、且与计算机技术很有关系的领域。这个检索的结果从统计上看与前一个相去不远。以下我主要讨论第一个检索的结果。从相关关键词来看，这个结果是比较准确的。</p>
<p><img src="/assets/2017/8/15/keywords.png"></p>
<p>首先，令我略有些惊讶且失望：检索到的文章只有972篇。作为对比，“云计算”检索到的文章有10880篇，“软件工程”有9890篇，“SOA”也有3992篇。回顾这十五年，不论在IT技术领域还是软件工程领域，敏捷仍然是一个非常小众的话题。</p>
<p>从时间趋势来看，2001年及以前有一些涉及“敏捷”和“软件”主题的文章，虽然并不与现在意义上的“敏捷软件开发”直接关联，但在理念上有一定相通之处。除了敏捷制造、敏捷物流等领域的文章之外，<a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFD9899&amp;filename=JYXX199803000&amp;v=MDkyOTBkcUZDam5VTHJPTHpUVGRyS3hGOW5Nckk5RlpJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSTDJmYis=" target="_blank" rel="external">向华和邹平的文章</a>、<a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFD2000&amp;filename=QBXB200006011&amp;v=MjIzOThSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVJMMmZiK2RxRkNqblY3M0pOQy9UYkxHNEh0SE1xWTlFWlk=" target="_blank" rel="external">赵捧未和窦永香的文章</a>、<a href="http://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFD2000&amp;filename=JSJC200005009&amp;v=MjcyNDZHNEh0SE1xbzlGYllSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVJMMmZiK2RxRkNqblZML0pMejdCYmI=" target="_blank" rel="external">段永强、张申生、高国军的文章</a>都提及了“基于对象的软件代理”概念，这可能是“前敏捷时代”一个值得探寻的线索。</p>
<p><img src="/assets/2017/8/15/annual_trend.png"></p>
<p>“敏捷软件开发”这个名词的出现是在<a href="http://agilemanifesto.org/" target="_blank" rel="external">2001年</a>，并于2002年正式进入了中文期刊的话语空间，从时间轴上可以清晰地看出这个趋势。从统计数据上看，敏捷的潮流在2007年达到高峰，从2011年开始有一次显著的下滑，随后又逐渐回暖。这里面有一个异常因素：《程序员》杂志2010年以后的数据没有被知网收录。但即使排除这个因素，大趋势估计相去不远。某种程度上，这个曲线和Gartner的“<a href="https://en.wikipedia.org/wiki/Hype_cycle" target="_blank" rel="external">技术成熟度曲线</a>”（或者叫吹牛逼曲线）有某种暗合之处。</p>
<p><img src="/assets/2017/8/15/Gartner_Hype_Cycle.svg"></p>
<p>然后——我不知道该高兴还是悲伤——《程序员》杂志无疑地在这场潮流中扮演了领袖角色。在所有检索到的文章中，《程序员》发表的超过20%，与其他任何报刊杂志都不在同一个数量级上。排名第二的《电脑知识与技术》在十五年中发表了共计23篇相关文章，我觉得这就基本上可以解读为“毫不关心”。《程序员》在2002年3月的《<a href="http://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;filename=ITSJ200203012&amp;dbname=CJFD2002" target="_blank" rel="external">极限编程</a>》专题，经确认，的确是中国期刊中最早介绍敏捷方法的一组文章。（实际上，《程序员》2001年12期的《代码重构》专题还略早于此，但由于刊号变迁的缘故，知网没有正确收录《程序员》2001年的内容，而是收录了之前使用该刊号的《Internet信息世界》的内容。）最早引介敏捷方法，并在之后的几年中贡献了整个期刊领域最多的篇幅。我们可以无疑地确认，《程序员》是敏捷方法在中国期刊领域最重要的——并且也是唯一的——支持者。这一数据，从一个侧面映射出敏捷在中国传奇而又尴尬的境遇。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在中国推广敏捷软件开发方法十五年之后，我很想回头去看这段历史的全景。今天我用&lt;a href=&quot;http://www.cnki.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知网&lt;/a&gt;做了一些检索，看到了一些有趣的数据。&lt;/p&gt;
&lt;p&gt;我在所有期
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云原生软件开发九要素</title>
    <link href="http://gigix.thoughtworkers.org/2017/7/14/cloud-native-9-factors/"/>
    <id>http://gigix.thoughtworkers.org/2017/7/14/cloud-native-9-factors/</id>
    <published>2017-07-14T05:04:00.000Z</published>
    <updated>2017-07-14T05:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着云计算逐渐成为主流的计算环境，我们提出这样一个问题：在云原生（Cloud Native）的环境下，软件开发应该是怎样的？在其他领域，我们看到云计算带来了弹性、标准化和更高的效率。当云成为软件开发团队的缺省环境，哪些实践能帮助他们兑现云计算的价值？各个组织、各个团队采用的软件开发方法论和流程各有不同，我们尝试找出一个最佳实践的最小集合：如果缺少其中的任一实践，就会在一定程度上妨碍团队享受云计算能带来的价值。从这个角度出发，我们识别出了下面这个列表：</p>
<p><img src="/assets/2017/7/14/9-factors.jpg"></p>
<h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><p>开发一个应用，采用什么基础框架、代码目录结构怎么安排、引入哪些测试工具、使用什么构建工具、遵循什么构建流程，这些问题在典型的应用类型（例如“Java微服务”或者“React前端应用”）下都有成熟的答案。大多数情况下，新的项目不应该从头新建这一套结构：一来是为了节省工作量，二来更重要的是应该尽量复用已有的最佳实践。建议的做法是使用标准的脚手架，例如<a href="https://jhipster.github.io/" target="_blank" rel="external">JHipster</a>或者其他基于<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a>的生成器可以提供较为通用的脚手架，IT组织也可以设计自己的标准脚手架。</p>
<h3 id="自包含应用"><a href="#自包含应用" class="headerlink" title="自包含应用"></a>自包含应用</h3><p>应用程序应该尽可能少依赖周边环境。对周边环境依赖越少，因为环境差异而带来的工作量和错误就会越少。以Java应用为例，基于<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>的独立应用，就比依赖Tomcat甚至WebSphere应用服务器的应用更具自包含性，环境的配置和管理都会容易得多。其他例如npm、rvm等工具都意图让应用程序更具自包含性。</p>
<h3 id="统一构建"><a href="#统一构建" class="headerlink" title="统一构建"></a>统一构建</h3><p>每一次构建，不论是由开发者自行发起的，还是在持续集成环境执行的构建，都应该尽量、最好是完全一致。为了达到这种效果，不仅构建工具和构建流程本身统一，执行构建的外部环境也应该统一。最好的方式是把构建放在虚拟机或容器里进行，而不是在彼此不同的计算机上执行。为了避免个人电脑计算资源的局限，构建最好是在云上进行。</p>
<h3 id="镜像化"><a href="#镜像化" class="headerlink" title="镜像化"></a>镜像化</h3><p>为了保证构建的外部环境完全统一，执行构建的不应该是各自不同的计算机，而应该是虚拟机或容器。因此运行应用程序的机器应该被镜像化。<a href="https://www.vagrantup.com/" target="_blank" rel="external">Vagrant</a>之类的工具提供了很好的版本化管理虚拟机镜像的能力，但VMWare和VirtualBox等虚拟机在性能上和资源占用上都并不鼓励频繁启停的使用方式，<a href="https://www.docker.com/" target="_blank" rel="external">Docker</a>等容器技术可能是更好的选择。构建产物也应该是可执行的容器镜像。</p>
<h3 id="基础设施即代码"><a href="#基础设施即代码" class="headerlink" title="基础设施即代码"></a>基础设施即代码</h3><p>为了保证构建的外部环境完全统一，获得运行环境的过程应该完全自动化，不应该允许任何手动修改运行环境的情况。如果运行环境是<a href="https://martinfowler.com/bliki/ImmutableServer.html" target="_blank" rel="external">不可变的</a>，那么就可以<a href="https://martinfowler.com/bliki/ImmutableServer.html" target="_blank" rel="external">随时抛弃并重建</a>。因此环境的配置应该以代码形式记录并自动化，并且还能顺便得到环境可以版本管理、可以自动化测试等好处。</p>
<h3 id="构建产物仓库"><a href="#构建产物仓库" class="headerlink" title="构建产物仓库"></a>构建产物仓库</h3><p>构建成功的产物应该被放入统一的仓库，并分版本管理。这样做的目的是按照《<a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">持续交付</a>》的理念，整个构建发布流程中使用用同一个构建产物；并且统一且分版本管理的构建产物可以在组织内复用。<a href="https://www.sonatype.com/nexus-repository-sonatype" target="_blank" rel="external">Nexus</a>可以用于管理各种构建产物，包括容器镜像。</p>
<h3 id="弹性运行环境"><a href="#弹性运行环境" class="headerlink" title="弹性运行环境"></a>弹性运行环境</h3><p>运行应用程序的环境，不论是用于执行测试、还是用于试用、培训、用户验收测试、乃至生产，都应该是弹性的：需要时可以立即开通，不需要时可以理解销毁。对于生产系统，运行环境的弹性使系统可以随负载水平扩展，使各种<a href="http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/" target="_blank" rel="external">路由技术</a>成为可能；对于开发、测试、预发布等场景，运行环境的弹性使环境开通和使用变得简单且不会出错。</p>
<h3 id="服务质量透明"><a href="#服务质量透明" class="headerlink" title="服务质量透明"></a>服务质量透明</h3><p>诸如高吞吐量、高可用性、高安全性、双机热备等服务质量，由运维或数据库的专家配置好，在生产环境提供给应用程序使用时，只暴露IP地址和端口（甚至<a href="https://12factor.net/port-binding" target="_blank" rel="external">只有端口</a>）。对于应用开发者而言，服务质量是透明的，不会感觉到生产环境与开发环境依赖的外部服务有任何差别。</p>
<h3 id="诊断信息服务"><a href="#诊断信息服务" class="headerlink" title="诊断信息服务"></a>诊断信息服务</h3><p>当构建和运行都在容器中乃至云上发生，并且容器是为应用程序专门定制的，调试诊断必然不能像在本地开发机器一样直接。需要借助完善的日志、监控等方式（例如基于<a href="https://www.splunk.com/" target="_blank" rel="external">Splunk</a>或<a href="https://www.elastic.co/webinars/introduction-elk-stack" target="_blank" rel="external">ELK</a>的方案）的来提供应用程序的诊断信息。诊断信息服务不仅作用于生产环境，测试、开发、构建等各个环境也使用同样的方式获得诊断信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着云计算逐渐成为主流的计算环境，我们提出这样一个问题：在云原生（Cloud Native）的环境下，软件开发应该是怎样的？在其他领域，我们看到云计算带来了弹性、标准化和更高的效率。当云成为软件开发团队的缺省环境，哪些实践能帮助他们兑现云计算的价值？各个组织、各个团队采用的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人生赢家弗洛雷斯</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/26/fernando-flores/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/26/fernando-flores/</id>
    <published>2017-06-26T05:01:00.000Z</published>
    <updated>2017-06-26T00:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Fernando_Flores" target="_blank" rel="external">费尔南多·弗洛雷斯</a>有着传奇的一生。他作为理工科的好学生留校，在智利社会主义的浪潮中涉足政坛，因为科技背景步步高升，陪着萨尔瓦多·阿连德总统走完政权和人生的最后一段路，作为政治犯坐了三年牢，然后摇身一变成为世界级学霸，顺便在硅谷搞了两家创业公司挣了一大把钱，终于衣锦还乡再次投身政治，支持的却是与阿连德政纲截然不同的总统。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/a/a4/Fernando_Flores.jpg"></p>
<p><em>（本文绝大部分内容出自《<a href="https://book.douban.com/subject/26107390/" target="_blank" rel="external">控制论革命者</a>》一书。）</em></p>
<h2 id="工科背景"><a href="#工科背景" class="headerlink" title="工科背景"></a>工科背景</h2><p>弗洛雷斯于1943年出生于塔尔卡市，位于智利首都圣地亚哥以南200多公里的一个城市。他的父亲是铁路工程师，母亲经营着一家小型的木材公司。在学校里，他是一个思维敏捷、尤其擅长数学的好学生。尽管还不知道未来的人生要干什么，弗洛雷斯已经意识到成为工程师是“一件大事”，所以他申请了天主教大学的工程学院，并被这所声名远播的大学接纳。在2003年的一次访谈中，他猜测自己可能是家族里第一个接受了大学教育的人。在正式的大学教育之外，一系列的人际关系、工作经历和政治变迁让弗洛雷斯发现了控制论和比尔。在大学里，弗洛雷斯跟随阿诺尔多·海克斯学习运筹学，后者在1963年至1964年间任天主教大学工程学院院长，后来接受了MIT斯隆管理学院的教授职位。</p>
<p>因为弗洛雷斯受过运筹学训练，[斯塔福·比尔的公司]SIGMA雇佣他在智利铁路的项目上[作为实习学生]工作。在这个项目上，他接触到了《控制论与管理》，一本在他看来“脑洞大开”的书。弗洛雷斯于1968年毕业，获得工业工程学位。……1968年至1970年间，弗洛雷斯在天主教大学工程学院任教务主任，随后他的职责范围逐渐扩展到了大学的各项事务。</p>
<h2 id="初涉政坛"><a href="#初涉政坛" class="headerlink" title="初涉政坛"></a>初涉政坛</h2><p>这一时期大学正在进行改革，弗洛雷斯监督开展了很多工程课程的改革，包括增加课堂与社会的联系。和很多同时代人一样，弗洛雷斯在学术圈和政治圈都很活跃。1969年，弗洛雷斯等一群天主教大学的年轻知识分子脱离基督教民主党，成立了“统一人民行动运动”（简称“MAPU”）。这个由年轻知识分子组成的小型政党批评基督教民主党和总统爱德华多·弗雷·蒙塔尔瓦（1964年至1970年在位）采取的中间路线，与左翼的人民阵线中的共产主义者和社会主义者政见一致。MAPU加入人民阵线，再加上右翼和基督教民主党组成的获胜联盟内部的不稳定因素，最终促成社会主义者阿连德在1970年大选中以微弱优势获胜。</p>
<p>作为对弗洛雷斯政治忠诚和技术能力的认可，阿连德政府将他任命为国家开发公司（简称“CORFO”）的技术总监，这家公司的使命是国有化智利的工业。弗洛雷斯成为了国家开发公司的三号人物，也是MAPU成员占据的最高位置。他最重要的职责就是管理已经国有化的工厂的日常调控。</p>
<h2 id="步步高升"><a href="#步步高升" class="headerlink" title="步步高升"></a>步步高升</h2><p>[Cybersyn]项目的资金部分来自国家科技学院，该学院的预算一直在增加；另一部分资金来自CORFO，这是全国资金最充裕的政府机关之一，毕竟它的使命是指导国家经济。弗洛雷斯在这两个机构都担任高管，既是发展机构CORFO的三号人物，也是国家科技学院的理事长。他动用了各种社会和组织关系来保障这个项目需要的财政、物资和人力资源，其中大部分是通过非正式渠道获得的。“我有很大的权力。”弗洛雷斯承认。不过CORFO实在太庞大了，弗洛雷斯与比尔提议的这个项目仅需要其整个预算中的一小部分。</p>
<p>……比尔见到了阿连德，获得了总统的许可继续开展他的项目。但比尔相信这次会见还有别的意义。他猜测弗洛雷斯想在智利政府中更广泛地应用控制论原理，而不仅是用于管理国有经济，这次会见则会帮弗洛雷斯未来的项目铺平道路。团队中最了解政治的施温伯提供了另一种解读。弗洛雷斯“有着更高级的大脑，”施温伯这样说道，“非常复杂，老于世故，精明能干，有时甚至是狡诈，但绝对精明。”弗洛雷斯很早就认识到了这个系统的科技价值和政治价值。照施温伯的看法，比尔与阿连德的会见一方面是为了解释正在开发的控制论管理系统，另一方面也是为了“让阿连德意识到有这么一个人，弗洛雷斯，掌管着这种力量”。弗洛雷斯希望给总统留下这样的印象：他是科技专家，并且他正在为政府做着有趣、大胆而且可能很有价值的工作。最重要的是，这次会见确认了弗洛雷斯与比尔之间的工作同盟，把阿连德也拉进了项目中。这次会见再次强调了在智利社会主义道路上正在发生的科技创新与政治创新之间的相互依赖关系。</p>
<p>[1972年]10月初，弗洛雷斯升任经济部副部长。[发生于1972年的]十月罢工后，这位29岁的年轻人被总统任命为经济部长。……弗洛雷斯相信是他对科技的使用帮他赢得了这个内阁级别的位置，他认为继续发展自己作为科技专家的形象或许能给他带来政治上的优势。</p>
<h2 id="大厦将倾"><a href="#大厦将倾" class="headerlink" title="大厦将倾"></a>大厦将倾</h2><p>弗洛雷斯仍然是阿连德内阁的成员，但他在[1973年]新年当天离开了刚上任两个月的经济部长职位，转任财政部长。这个新的任命使弗洛雷斯离Cybersyn项目更远了。</p>
<p>在[发生于1973年8月的]第二次卡车主罢工期间……阿连德任命弗洛雷斯担任政府的秘书长，负责政府对内对外的沟通。在风雨飘摇的智利政府中，弗洛雷斯已经占据了一个最高的位置，此时他才刚刚30岁。</p>
<p>[1973年9月11日武装政变发生时]弗洛雷斯……已经是阿连德身边最贴近的助手之一，轰炸发生时他正与总统在一起，一直与军方保持着电话联系。他告知阿连德，军方要求总统立即、无条件投降。总统拒绝了这个要求，并派弗洛雷斯去和军方谈判。弗洛雷斯刚走出建筑即被逮捕，从此没有再见到总统。</p>
<p>费尔南多·弗洛雷斯作为政治犯在监狱里呆了3年。……1976年，大赦国际的旧金山分部成功地通过谈判促成弗洛雷斯获释，并在斯坦福大学计算机科学系给他安排了为期一年的研究职位。</p>
<h2 id="变身学霸"><a href="#变身学霸" class="headerlink" title="变身学霸"></a>变身学霸</h2><p>在斯坦福，他遇到了计算机科学家特里·维诺格拉德，两人在1970年代后期和1980年代紧密合作。</p>
<p>弗洛雷斯在加州大学伯克利分校获得了博士学位，师从哲学家约翰·赛尔、休伯特·德莱弗斯和经济学家安·马库森。他于1982年完成的毕业论文讨论了如何在“未来的办公室”里用计算机改进管理和交流。……比尔在早年间对弗洛雷斯的想法有所影响，但在完成毕业论文的时候，弗洛雷斯的关注点已经从管理控制论转移到言语行为理论和海德格尔哲学，因为这些是他的博士委员会成员专擅的领域。</p>
<p>1986年，弗洛雷斯发表了他的第一本书，与维诺格拉德合著的《理解计算机和认知》（Understanding Computers and Cognition）。这本书结合了计算机领域的问题与“生物本质、语言、人类行为本质等方面的理论”，着重讨论计算机能和不能从事哪些人类实践。……美国信息科学学会把《理解计算机和认知》评为1987年“最佳信息科学书籍”，这本书现在被认为是人机交互领域的关键文本之一。</p>
<p>[注：约翰·赛尔和休伯特·德莱弗斯是人工智能哲学领域的大师；特里·维诺格拉德是人机交互领域的大师，1995年至1998年间指导了谷歌创始人拉里·佩奇的博士研究。]</p>
<h2 id="名利双收"><a href="#名利双收" class="headerlink" title="名利双收"></a>名利双收</h2><p>1980年代，弗洛雷斯还转型成了一名硅谷企业家。他创立了教育咨询公司Logonet，向商业社会传授本体论设计思想。他还跟维诺格拉德一起创立了Action科技公司，开发了名为“协调者工作组生产力系统”的软件包，他们自称是第一款用于计算机网络的工作组系统。……后来一位记者称“协调者”是“全世界第一款社交网络软件”。</p>
<p>1989年，弗洛雷斯又成立了一家咨询公司，名叫“商业设计合伙人”，或者简称BDA。BDA向困境中的企业传授言语行为理论的原则，例如提出明确的请求、做出明确的承诺等，试图以这种方式改变这些企业。……在其巅峰时，BDA有150名员工，在3个大陆上开展工作，年收入5千万美元。……到2007年，弗洛雷斯的财富净值据估算达到了4千万美元。他的名气也随着财富一道蒸蒸日上。有人认为他唐突、脾气暴躁、说话直接甚至是粗鲁、惹人讨厌；但他对外传递的讯息，以及他在学界和商界的成功，让不少人把他视为偶像。</p>
<p>2002年，弗洛雷斯以百万富商的身份回到智利，并作为国家最北端地区的代表被选为参议员，由此开启了他作为政治家的人生新篇章。2008年，他脱离支持他当选参议员的中左联盟，成立了自己的政党“<strong>智利第一党</strong>”。2009年，他又完全转变立场，公开支持右翼总统候选人、亿万富商塞巴斯蒂安·皮涅拉。最终皮涅拉赢得了大选。</p>
<p>[2010年3月，弗洛雷斯被皮涅拉总统任命为智利国家竞争力创新委员会主席。]</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fernando_Flores&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;费尔南多·弗洛雷斯&lt;/a&gt;有着传奇的一生。他作为理工科的好学生留校，在智利社会主义的浪潮中涉足政坛，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术领导者即服务</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/23/tech-lead-as-a-service/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/23/tech-lead-as-a-service/</id>
    <published>2017-06-23T05:01:00.000Z</published>
    <updated>2017-06-23T11:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>八年前我写了一篇文章《<a href="http://www.infoq.com/cn/articles/thoughtworks-practice-part8" target="_blank" rel="external">Tech Lead的三重人格</a>》。迄今为止为数众多的敏捷交付团队中，Tech Lead（技术领导者）对于交付的效能和质量起着至关重要的作用。我在那篇文章中指出，Tech Lead需要扮演三种重要的角色：技术决策者、流程监督人、干扰过滤器。一支团队能否有效采用架构最佳实践、交付流程最佳实践和项目运作最佳实践，很大程度上取决于Tech Lead把自己的工作完成得多好。</p>
<p>如果更进一步把这篇文章中Tech Lead承担的责任做一个拆解，我们可以看到，一个称职的Tech Lead是这样去为项目的顺利交付做出贡献的：</p>
<ul>
<li>首先，他要<strong>制订适合该项目要求的技术方案</strong>。他要参与架构设计，了解平台和编程语言、主要的框架和库、集成点、部署策略、数据迁移策略，确认总体技术方案能够支撑系统的业务要求。</li>
<li>随后，他要<strong>保障交付顺利开展</strong>。他要确保环境的一致性，搭建和管理持续集成流水线，指导并监督团队遵循持续集成的流程和实践。</li>
<li>最后但绝非最不重要的，他还要<strong>管理和提升团队的能力</strong>。他需要确认团队是否熟悉用到的技术栈和工具，而且——虽然这一点在我写文章时的ThoughtWorks还不那么凸显——要帮助团队成员组织刻意练习来提升能力。</li>
</ul>
<p>正如当时那篇文章的一位读者非常正确地指出的，要一个人做这三方面的贡献很多时候是不切实际的。在很多组织里，这三件事是在三个环节中分别进行的，这三个环节的彼此割裂造成了很多问题：</p>
<ul>
<li>在方案环节，架构师根据客户的要求和痛点，基于自己的知识储备设计技术解决方案。他是如何分析客户的要求和痛点，他的知识储备是什么，组织里的其他人不一定知道，于是不同架构师提出的解决方案就很可能不一样。</li>
<li>在交付环节，交付团队基于自己的知识储备来交付技术解决方案。方案背后隐含的知识储备，交付团队未必具备，所以屡屡会出现交付质量不佳的问题。不是他们没有能力，只是能力与方案的需要不符。</li>
<li>组织感到团队的能力有不足，于是找来教练提升能力。然而教练基于的是一个标准的能力集来训练团队，这个能力集与项目实际需要的能力又不一定匹配。于是出现能力发展计划不对症、能力建设效果不明显的问题。</li>
</ul>
<p>由此可见，只有当方案、交付、能力三者有很好的协同，项目和团队才能健康成长。而这个协同之所以尤其困难，是因为它跨了三个非常不同的问题域（在很多组织是三个不同的功能部门），需要三种非常不同的能力，对这个居中协调者的要求非常高。</p>
<p>所以，如果我们能用一个云上的平台来承载这个居中协调者的能力，对整个组织的交付质量和能力成长都会有帮助。这个平台的核心实际上就是<a href="/2017/4/14/stack-management-implementation/">技术栈管理</a>：针对典型的应用场景（例如企业资源服务化、移动数字化渠道），制订组织统一的技术栈，并从技术栈推导出对应的能力评估模型和刻意练习课程。于是我们就得到了以技术栈为核心的IT能力三环联动模型：</p>
<p><img src="/assets/2017/6/23/3-circles.jpg"></p>
<p>当提供技术方案的架构师选择一个技术栈，用这个技术栈交付软件的能力要求就被明确地传达到交付团队。交付团队不用自己去设置开发环境和持续交付流水线，用<a href="/2017/6/6/continuous-delivery-2/">云原生的持续交付</a>环境即可启动开发，并复用在技术栈上积累的交付最佳实践。通过云上的能力测评系统，能力教练可以清晰地知道哪些成员已经具备需要的能力、哪些成员能力还有差距，然后为有差距的成员提供针对性的刻意练习和指导。</p>
<p>云计算已经成功地模糊了硬件与软件的界限，使IT的一大挑战——管理设备——极大简化。现在，对于IT的另一个大挑战：人才短缺，云计算的“XXX as a service”模式是否可以继续发挥作用？IT组织是否可能借助云计算获得优质IT人才的弹性和伸缩性？这是一个值得去探索的课题。在这个方向上，将对交付质量与效能起着重要影响的Tech Lead的能力以云平台服务的形式提供，有可能是触手可及的一个目标。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;八年前我写了一篇文章《&lt;a href=&quot;http://www.infoq.com/cn/articles/thoughtworks-practice-part8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tech Lead的三重人格&lt;/a&gt;》。迄今为止
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>言说信息时代的奴隶制</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/20/book-review-to-goodbye-islaves/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/20/book-review-to-goodbye-islaves/</id>
    <published>2017-06-20T05:01:00.000Z</published>
    <updated>2017-06-20T10:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>[本文系《<a href="https://book.douban.com/subject/26916525/" target="_blank" rel="external">再见i奴</a>》（Goodbye iSlave）的书评，以《<a href="http://tootopia.me/article/6364" target="_blank" rel="external">信息时代的三角贸易</a>》为题同步发表于土逗公社。]</em></p>
<p>毫不意外地，柯洁在三番棋中完败软硬件全面升级的AlphaGo。这场“人机大战”再次让人工智能成了街谈巷议的热点。在感叹科技进步一日千里的同时，大众也表达出了对人工智能飞速发展的担忧。不过，据笔者的观察，这种担忧大多数时候仍然是一种“终结者”式的想象，即担心机器拥有智能以后全面取代甚至统治、消灭人类。2015年6月，德国斯图加特的一家汽车工厂里发生致人死亡的工业事故，媒体在报道时竞相使用“机器人杀人”、“机器人把技术员按倒打死”这样耸人听闻的标题。类似这样的大众舆论反映出人们对智能技术的双重恐惧：不仅隐然感到科技的发展值得担心，而且隐然感到自己不知究竟应该担心什么。</p>
<p>诚如维特根斯坦所说，“凡不可言说者必保持沉默”。在众多学者的话语中，对科技、尤其是信息技术的担忧具有两个明显的特征：它们通常具有强烈的未来主义色彩，多在谈论十余年、数十年后的“近未来”图景；而且它们多在强调“机器vs.人类”的关系。不论凯文·凯利还是博斯特罗姆，他们引人瞩目的作品都在谈论“超级智能”如何在不远的将来取代人类。然而这两个特征却有一种微妙而深远的影响：它们让读者觉得科技对人的威胁尽管存在，但毕竟尚未发生、而且对所有人的威胁是均等的。</p>
<p>从这个意义上，邱林川的这本《再见i奴》（Goodbye iSlave，伊利诺伊大学出版社2016年）提出了一种新的言说方式，使“信息技术可能带来什么危害”这个问题呈现出一个全新的面向：信息技术的发展对人造成伤害，这件事无需等到未来，它早已在发生；而且这种伤害绝非均质的“机器伤害（所有）人类”，科技作为一种工具，再现与强化了人类社会古而有之的权力关系，使一些人受损、另一些人受益。在信息时代被高新科技再现与强化的关系究竟是什么？作者极富洞察力地指出：那就是奴隶制。</p>
<p><img src="https://img3.doubanio.com/lpic/s29154742.jpg"></p>
<p>尽管玫瑰的芬芳并不依赖于它的名字，但对于社会权力关系这种抽象事物，用什么语言谈论它，会直接影响受众的观感。当富士康、苹果和优步不约而同地声称为他们打工的劳动者是“自由的”，作者一针见血地指出了现代信息技术产业与十七世纪的奴隶制经济之间的共性：一方面，它们都建立在对劳动者的全面控制、甚至是对人身自由的控制基础上，富士康在连续跳楼事件之后安装的“防跳网”偶然而又必然地重现了十七世纪大西洋上运奴船上的设置，因为只有剥夺劳动者的人身自由乃至“自杀权”才能从他们身上榨取最大的剩余价值；另一方面，它们都着力生产“成瘾性消费品”，iPhone和微信就像白糖和咖啡一样让消费者深陷其中不能自拔，这才保障了廉价奴工生产出来的产品源源不断地被消费。在这一产业体系中，不仅在富士康生产iPhone的工人如同奴隶一般被控制，使用iPhone的消费者同样如同奴隶一般被规训——邱林川将前者称为“制造的奴隶”，后者则被称为“被制造的奴隶”。</p>
<p>信息技术产业与奴隶制，这个或许令人吃惊、但绝非无中生有的类比，就像“玫瑰的名字”一样，让我们突然获得了一种能力，可以去谈论一些司空见惯、却又难以捕捉的问题。例如“低头族”：我们身边的年轻人（以及我们自己）随时随地都在低头玩手机，竟然到了城市专门开设“手机人行道”的地步，对此我们本能地感到不满，却不知该如何批评这一现象。直到邱林川说，这些人是“i奴”——信息时代的奴隶。于是我们恍然大悟：双手被无形的镣铐捆绑举在胸前，双脚只能沿着画好的路线前行，这可不就是奴隶的形象吗？为了让这个类比更加贴切，作者专门研究了与奴隶制相关的大量文献。当我们看到奴隶制的若干特征与当代信息产业的现状竟然高度吻合，这个类比给我们带来的冲击绝非仅仅是比喻意义上的。</p>
<p>有了一个可以被谈论的问题，我们就能更有效地去发现潜在的解决办法。针对奴隶制对奴工的人身控制和成瘾性消费两大特征，作者将视野投向全球，并发现了一些可能的替代方案，例如劳动者共同拥有、民主治理的“平台合作主义”，例如重视供应链社会效应、以耐用性（而非消耗性）为卖点的“公平手机”等。尽管这些替代方案尚显稚嫩，但毕竟让我们看到了“另一种方案”的可能性；而为了去发现“另一种方案”，首先就必须有一套批判的话语来指出现状中的缺陷。从这个意义上，邱林川这本《再见i奴》可能是在看似牢不可破的资本与科技共同铸就的铁板上划开了第一道裂痕。</p>
<p>博斯特罗姆在《超级智能》中的一个观点我个人非常赞同：信息技术的发展如此迅猛，我们很可能正处在一个决定人类命运的拐点上。然而当大众——在科技与资本精英的引导下——担心着几十年后人工智能是否会统治世界的时候，邱林川给我们指出了一幅更加现实也可能更加危险的图景：这个科技拐点将要决定的，可能是科技究竟让大多数人从此过上幸福的生活、还是把大多数人变成奴隶。这两者之中较为美好的那种前景，不会无缘无故自动发生的。拥有合适的语汇去谈论和批评，乃是我们能够对这次选择产生影响的第一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;[本文系《&lt;a href=&quot;https://book.douban.com/subject/26916525/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;再见i奴&lt;/a&gt;》（Goodbye iSlave）的书评，以《&lt;a href=&quot;http:
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云原生平台：市场现状分析</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/8/cloud-native-platforms-overview/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/8/cloud-native-platforms-overview/</id>
    <published>2017-06-08T05:01:00.000Z</published>
    <updated>2017-06-07T11:58:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于期望获得云原生能力的企业，在IaaS提供的云计算弹性与开发云原生应用之间，还有一个很大的空白地带：如何用云计算为软件交付的过程服务。Docker和Kubernetes等工具提供了容器化和容器编排的能力，但是企业需要解决“为了承载我（期望）的开发流程，我需要怎样的容器和编排”的问题。这就给云原生平台（Cloud Native Platforms）创造了市场空间。</p>
<h2 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h2><p>为分布式云应用提供支撑的平台从2015年开始受到广泛的关注，围绕着Docker、容器编排等技术，开始出现各种商业模式。<a href="https://thenewstack.io/cloud-native-platforms-will-take-off-2016/" target="_blank" rel="external">云原生平台可以视为下一代中间件</a>，其用途是交付企业级分布式应用所需的各种支撑能力。以容器和容器编排为基础，云原生平台提供了日志、审计、安全、合规、权限管理、容器镜像仓、基础设施抽象、团队成员启动等支撑功能。</p>
<p>测试和开发环境的随需可得不仅仅有助于优化基础设施资源，而且有助于统一实践和流程，能<a href="https://www.tcs.com/tcs-launches-engineering-environment-service-red-hat-openstack-platform" target="_blank" rel="external">促进团队采用敏捷和DevOps的最佳实践</a>。把抽象层次提高一点，<a href="http://blog.xebia.com/top-5-ingredients-for-developing-native-cloud-applications/" target="_blank" rel="external">云原生平台要支撑云原生应用所需的5项能力</a>：</p>
<ol>
<li>云平台自动化。不仅提供基础设施开通与配置的自动化，而且内嵌测试、版本控制、文档、软件生命周期管理等方面的最佳实践，使整个开发-测试-部署的过程工作量最小化。</li>
<li>无状态函数。将软件以小型、目的单一的函数形式部署，通过事件驱动服务，从而避免维护运行时环境。</li>
<li>微服务架构模式。每个服务提供单一的业务能力，能够独立开发、测试和部署。</li>
<li>DevOps流程和文化。自动化整个软件交付流水线，打破开发与运维的间隔，以全功能团队形式工作。</li>
<li>云可靠性工程。提高运维工作的自动化程度，把运维重心放在平台工程，从而提高系统可靠性。</li>
</ol>
<p><img src="http://blog.xebia.com/wp-content/uploads/2017/02/Xebia_Native_Cloud_Stack_Framework_variant1-3.png"></p>
<p><a href="https://www.safaribooksonline.com/library/view/cloud-foundry-the/9781491932421/ch01.html" target="_blank" rel="external">云原生平台可以大致分为</a>“非结构化的/不带意见的”（unstructured/unopinionated）和“结构化的/带意见的”（structured/opinionated）两类。Pivotal声称Cloud Foundry作为一个“结构化的/带意见的”云原生平台，提供了下列能力：</p>
<ul>
<li>服务作为比基础设施更高层级的抽象。Cloud Foundry提供按需部署应用的机制。</li>
<li>容器。所有应用程序都以容器形式运行。</li>
<li>敏捷和自动化。Cloud Foundry可以作为CI/CD的一部分，用于随需开通环境和服务。</li>
<li>微服务支撑。为松散耦合的服务架构提供集成和协作机制。</li>
<li>云原生应用支撑。对应用程序的约束使其效率更高、更易管理、更可靠。</li>
</ul>
<p><img src="https://www.safaribooksonline.com/library/view/cloud-foundry-the/9781491932421/assets/cfdg_0101.png"></p>
<p>从技术角度，<a href="https://wikibon.com/cloud-native-application-platforms-structured-and-unstructured/" target="_blank" rel="external">云原生平台有5个重要的考量因素</a>：</p>
<ol>
<li>如何加速应用开发的速度？</li>
<li>如何推动新技术趋势（移动、社交、实时、数据核心、IoT）的应用？</li>
<li>如何充分利用开源技术和社区？</li>
<li>如何提升运维响应变化的能力？</li>
<li>如何在平台中嵌入安全性？</li>
</ol>
<h2 id="部分产品分析"><a href="#部分产品分析" class="headerlink" title="部分产品分析"></a>部分产品分析</h2><p><a href="https://www.apcera.com/" target="_blank" rel="external">Apcera</a>的定位是“支持云原生应用和遗留应用的容器管理平台”。主要的解决方案是“<a href="https://www.apcera.com/solutions/application-modernization" target="_blank" rel="external">遗留应用现代化</a>”，号称能在7天内把遗留系统迁移上云。</p>
<p><a href="https://apprenda.com/platform/" target="_blank" rel="external">Apprenda</a>是基于Kubernetes的面向开发团队的云平台，既能支持云原生应用、也能支持传统应用的开发。通过集中的云政策和监管、共享的应用服务、基于微服务的架构标准化，Apprenda把开发组织变成成熟的软件工厂。</p>
<p><a href="https://atlas.hashicorp.com/help/intro/use-cases/continuous-deployment-of-immutable-infrastructure" target="_blank" rel="external">HashiCorp Atlas</a>在Vagrant的基础上规定了一个“开发-构建-产物管理-部署-上线”的标准流程。适用于以技术为核心、重视DevOps流程与文化的组织。</p>
<p><a href="https://pivotal.io/platform" target="_blank" rel="external">Cloud Foundry</a>是重视部署与运维的云原生平台。强调的卖点是（1）部署的速度；（2）云应用的伸缩能力；（3）缺省的安全性。</p>
<p><a href="https://www.openshift.com/" target="_blank" rel="external">OpenShift</a>是基于Docker和Kubernetes的容器应用平台，支撑容器的开发、部署和管理。主要功能有（1）容器编排；（2）容器存储；（3）支持多种编程语言和框架；（4）自动化应用程序构建、部署、伸缩和健康管理；（5）基于项目的管理界面；（6）自服务平台。</p>
<p><a href="https://codenvy.com/" target="_blank" rel="external">CodeEnvy</a>在Docker基础上为开发团队提供云上的工作区。CodeEnvy提供.NET、Android、C++、Java、Go等技术栈，用Eclipse Che作为开发环境。主要卖点有（1）一键式Docker环境；（2）团队成员启动和协作；（3）DevOps工作区平台。</p>
<p><a href="http://www.wercker.com/" target="_blank" rel="external">Wercker</a>是基于Docker的CI/CD自动化平台（类似于SnapCI），用Kubernetes提供容器编排，支持微服务部署，缺省支持GoLang、NodeJS、Ruby、Python。支持自定义的CI/CD流水线，通过流水线的级联和触发配置出复杂的工作流，支持并行测试。</p>
<p><a href="http://www.daocloud.io/devops" target="_blank" rel="external">DaoCloud</a>基于容器技术从交付件、运行环境、环境配置、权限协作等多个方面定义企业交付流程标准，通过标准化提升跨部门协作的沟通效率，推动软件在不同阶段的自动化高效流转。高度灵活的交付流程定义引擎，支持可视化定义企业完整的端到端交付流程。通过云平台的弹性，支撑企业交付流程中不同阶段对环境运行时的需求。</p>
<p><a href="https://www.shurenyun.com/scene-cicd.html" target="_blank" rel="external">数人云</a>基于Mesos和docker，提供企业级持续集成和持续交付解决方案，从快速搭建持续集成环境，到改进和融合企业的开发、测试及持续发布流程，助力企业提升产品发布效率，规范产品开发流程。可以继承企业现有的版本控制工具，通过Jenkins实现自动构建和测试。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于期望获得云原生能力的企业，在IaaS提供的云计算弹性与开发云原生应用之间，还有一个很大的空白地带：如何用云计算为软件交付的过程服务。Docker和Kubernetes等工具提供了容器化和容器编排的能力，但是企业需要解决“为了承载我（期望）的开发流程，我需要怎样的容器和编
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>持续交付2.0：云原生持续交付</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/6/continuous-delivery-2/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/6/continuous-delivery-2/</id>
    <published>2017-06-06T05:01:00.000Z</published>
    <updated>2017-06-05T15:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>《<a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">持续交付</a>》提出了一系列贯穿整个软件交付生命周期的最佳实践。但它成书的年代（2010年）云计算尚未得到广泛应用，尤其在软件开发过程中的应用非常有限。如果站在今天的技术水平和对云计算的理解水平基础上回顾《持续交付》的内容，我们有可能提出一组全新的、原生于云环境的持续交付实践。</p>
<p><img src="/assets/2017/6/6/cd.png"></p>
<h2 id="软件发布的反模式"><a href="#软件发布的反模式" class="headerlink" title="软件发布的反模式"></a>软件发布的反模式</h2><p>《持续交付》中列举了软件发布过程中的一些反模式，这些在行业中常见的不佳实践使软件发布过程容易出错，使软件发布的风险和压力增大。这些与可靠的发布过程相对应的常见的反模式包括：</p>
<ul>
<li><strong>手工部署软件</strong>。靠详尽的发布文档来描述发布步骤及每个步骤中易出错的地方，靠手工测试来确认发布后的应用程序是否运行正确。不自动化的部署过程既不可重复也不可靠，会在调试部署错误的过程中浪费很多时间。</li>
<li><strong>开发完成之后才向类生产环境部署</strong>。开发团队认为“开发完成了”，才第一次把软件部署到类生产环境（比如试运行环境）。假如应用程序是全新开发的，第一次将它部署到试运行环境时可能会非常棘手。</li>
<li><strong>生产环境的手工配置管理</strong>。通过专门的运维团队来管理生产环境的配置，如果需要修改一些东西，就由这个团队登录到生产服务器上进行手工修改。经常导致部署到生产环境时就失败，尽管多次部署到试运行环境都非常成功。</li>
</ul>
<p>在云计算的背景下，我们可以看得更远一步：这些反模式如果在今天的研发团队中仍然出现，背后反映的是这支研发团队还不会利用云计算提供给他们的便利能力。</p>
<ul>
<li><strong>手工部署软件 =&gt; 软件发布形态和流程不标准</strong>。因为软件的发布形态多种多样（JAR、WAR、RPM、DEB……），因为软件的功能与配置不解耦，所以才会需要手工部署。而发布形态和发布流程的不标准，背后的原因是计算资源稀缺，需要复用服务器。</li>
<li><strong>部署到类生产环境太晚 =&gt; 开发环境与生产环境不统一</strong>。因为开发和测试用的环境与生产环境有很大差异，才会出现部署到类生产环境时的种种困难。开发环境与生产环境的不统一，背后的原因也是计算资源稀缺，生产环境昂贵，无法做到随需可得。</li>
<li><strong>生产环境手工配置管理 =&gt; 环境管理情况复杂</strong>。因为环境需要长期使用且不断升级，才有了对环境进行管理的需求。环境需要长期使用和升级，背后的原因是计算资源缺乏弹性，不需要的时候不能随意丢弃。</li>
</ul>
<p>对于这些反模式，《持续交付》提出的解决办法是“将几乎所有事情自动化”。但在当时的技术水平下，由于软件发布的形态和流程不标准、开发/测试环境和生产环境不统一、环境管理情况复杂，“将发布流程自动化”在每个团队的具体做法都不同，因此持续交付的水平高度依赖于团队的能力与觉悟。《持续交付》也只能苦口婆心地劝说“如果需要执行这个流程数十次的话，就不是那么容易的事了”，而且“不需要把所有的东西一次性地全部自动化……随着时间的推移，最终你可以、也应该将所有环节全部自动化”。</p>
<p>但如果在软件的开发过程中充分利用云计算的弹性能力，这些反模式有可能被根除，而不必由每个开发团队重复地尝试通过自动化来缓解。</p>
<h2 id="部署流水线"><a href="#部署流水线" class="headerlink" title="部署流水线"></a>部署流水线</h2><p>《持续交付》提出了“部署流水线”的概念（如下图）。“随着某个构建逐步通过每个测试阶段，我们对它的信心也在不断提高。当然，我们在每个阶段上花在环境方面的资源也在不断增加，即越往后的阶段，其环境与生产环境越相似。”</p>
<p><img src="/assets/2017/6/6/pipeline.jpg"></p>
<p>在充分利用了云计算的情况下，部署流水线会有两方面的改变：</p>
<ol>
<li>不存在“所用环境与生产环境的相似度增加”的情况，从提交阶段开始（甚至在此之前的开发阶段），所有环境都与生产环境是一致的。</li>
<li>由于不需要根据项目拥有的计算资源来定制各个环境与生产环境的相似度，这个部署流水线不再是一个需要由开发团队来实现的概念模型。部署流水线可以是标准的、一致的，开发团队只需要定义自己这个软件的生产环境即可。</li>
</ol>
<p>《持续交付》中提倡整个部署流水线“只生成一次二进制包”，并且在各个验证步骤之间传递二进制包。只生成一次二进制包的实践是非常必要的，因为“出于审计的目的，确保从二进制包的创建到发布之间不会因失误或恶意攻击而引入任何变化是非常关键的”。但实际的项目中经常出现二进制包非常庞大、在各个步骤（及各个环境）之间传递二进制包很费时的情况，这也是导致一些项目最终仍然退回到每个步骤重新构建二进制包的原因：增量的编译和构建可能比通过网络传递整个二进制包还省时。</p>
<p>如果构建的产物是容器镜像，所有运行时环境都从云上获得，那么实际上不存在传递二进制包的过程。每个验证步骤都用指定版本的容器镜像搭配对应的配置，启动一个新的运行时环境后，在云上的运行时环境中执行（自动的或手工的）验证即可。</p>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>尽管《持续交付》说“选择并安装好持续集成工具之后，只要再花几分钟的时间配置一下就可以工作了”，但实际上很少有哪个项目的持续集成实施会如此顺利。例如当“发现在运行持续集成工具的机器上缺少一些必需的软件和设置”时，《持续交付》提出的建议是“将接下来你所做的工作全部记录下来，并放在自己项目的知识共享库中……并将重建全新环境的整个活动变成一个自动化的过程”。实际上，这是一件需要高度技能水平和纪律性的事，拥有这两者的技术领导者（Tech Lead）很罕见，希望每个开发团队都有这样一名技术领导者坐镇是个奢侈的梦想。</p>
<p>而且，持续集成环境与开发环境仍然是有区别的，这个区别很可能是由于计算资源的限制。《持续交付》中说，“你可以很有把握地说：‘只要是在与持续集成一模一样的环境上，我的软件就可以工作。’”。然而问题就在于大多数情况下，开发环境与持续集成环境不是一模一样。这也是为什么持续集成必须集中式地进行，需要有“铃声和口哨”来及时发现构建失败，并且“要让持续集成能够发挥作用……整个开发团队就必须有高度的纪律性”。</p>
<p>在充分利用云计算的情况下，开发一类软件（例如“Java微服务”或“ReactNative移动应用”）所需的环境和部署流水线可以由少数几名优秀的技术领导者来标准化，开发团队不需要再操心如何配置一个持续集成环境的问题。</p>
<p>并且正如《<a href="/2017/5/24/ci-dying/">持续集成将死</a>》一文中所说，云的弹性能够使每个人、每次构建都使用标准的类生产环境，因此持续集成没有必要发生在一个中心化的“持续集成工具”上。由于持续集成的“集成”这个动作在代码进入团队代码库<strong>之前</strong>发生，很多的提醒和纪律变得不必要了：构建失败就不能提交代码，于是确保构建成功成了每个开发人员自己的事，不能把不成功的构建扔给团队去处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《&lt;a href=&quot;https://book.douban.com/subject/6862062/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;持续交付&lt;/a&gt;》提出了一系列贯穿整个软件交付生命周期的最佳实践。但它成书的年代（2010年）云计算尚未得到
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>持续集成将死</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/24/ci-dying/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/24/ci-dying/</id>
    <published>2017-05-24T05:04:00.000Z</published>
    <updated>2017-05-23T15:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在思考“<a href="/2017/3/31/stack-management/">云时代的研发环境长什么样</a>”这个问题的时候，我逐渐意识到一件很重要的事。2000年首次被提出、在过去十几年中我们习以为常的敏捷核心实践<a href="https://www.martinfowler.com/articles/continuousIntegration.html" target="_blank" rel="external">持续集成</a>，很可能正在走到它生命周期的尾声。</p>
<p><img src="/assets/2017/5/24/storm.jpg"></p>
<p>让我们来回顾一下Martin Fowler在他那篇<a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">著名的文章</a>里如何描述持续集成这个过程：</p>
<blockquote>
<p>一旦完成了修改，我就会在自己的计算机上启动一个自动化build。……当我build成功后，我就可以考虑将改动提交到源码仓库。……然而，提交完代码不表示就完事大吉了。我们<strong>还要做一遍集成build，这次在集成计算机上并要基于mainline的代码</strong>。只有这次build成功了，我的修改才算告一段落。……在持续集成环境里，你必须尽可能快地修复每一个集成 build。好的团队应该每天都有多个成功的 build。错误的 build 可以出现，但必须尽快得到修复。</p>
</blockquote>
<p>从上面加粗的文字就能看出，过去的十多年里，在谈及持续集成这个实践时，我们已经预设了这个场景：有一个集中式的<strong>持续集成服务器</strong>在监听代码库的变化，每当有人提交代码时，持续集成服务器会自动取出最新的代码，执行整个构建和测试流程。围绕着这个场景，我们发展出了一整套的<a href="/2010/6/29/ci-discipline/">纪律</a>来保障持续集成少失败、失败的时候能尽快修复。围绕着这个场景，我们发明了CruiseControl、GoCD、SnapCI等一代又一代的持续集成服务器，并在我们所有的项目中使用它们。这个场景在我们的脑海中如此根深蒂固以至于我们不再去询问：为什么需要这样做？</p>
<p>实际上，我们需要一个集中式的持续集成服务器，这是有历史原因的。2000年代初期的技术时代背景，尤其是以下两个非常具体的约束条件，造成了今天我们看到的持续集成的形态：</p>
<ol>
<li><strong>计算资源短缺</strong>。这个约束条件决定了完整的、与生产环境相似的、能执行端到端验证的环境必定是稀缺品。典型的交付团队没有能力给每个成员配备整套环境，只能在他们各自的计算机上模拟一套尽可能接近于生产环境的开发环境。于是开发环境的验证结果不足为信，必须在一个标准的、更接近于生产环境的集成环境上通过验证，才能说软件达到了质量要求。</li>
<li><strong>版本控制工具的局限性</strong>。Subversion（以及其他更早的版本控制工具）在pre-commit阶段通过服务器端回调钩子很难——如果不是完全不可能的话——得到完整的“提交后版本”，因此svn的pre-commit钩子基本只能用于检查提交信息是否符合规范，完整的验证则必须在代码已经合入代码库之后才能——在一台独立的“持续集成服务器”上——进行。</li>
</ol>
<p>云计算彻底改变了第一个约束条件。计算资源仍然不能说极大丰富，但企业应用开发所需的x86架构计算资源在云环境下已经不再短缺，结合各种基础设施自动化和配置自动化的技术，随时、按需提供整套环境已经不是难题。而且使用docker等容器技术开通出来的环境是抛弃型的、不可变更的，因此也就不存在环境不一致、验证结果不可信的问题：每个开发人员都可以从云上拿出一套环境，执行build，其过程与效果都与持续集成服务器的build完全一致。</p>
<p>在过去的十多年里，持续集成之所以必须是一种“技能”、一门“手艺”，而不仅仅是一套工具的定制与实施，很大程度上正是由于计算资源短缺这个约束条件造成的。因为计算资源几乎总是短缺，所以每个团队、每个项目拥有的计算资源几乎总是有些这里那里的不同——这个项目可能有两套完整的测试环境，那个项目可能只有一套。这种资源的局限，逼迫每个项目的技术领导者们不得不根据手上能得到的环境，来微调持续集成的流水线乃至软件交付的流程。简言之，流程是依据环境来调整的。</p>
<p>当计算资源短缺的约束条件不再存在，在考虑构建流水线时就可以有一个根本的观念转变：可以制订一套标准的构建流水线，并要求计算环境向这套流水线对齐。这时，持续集成就可以不必是每个团队的技术领导者都掌握的“技能”和“手艺”，它完全可以在一个组织范围内定制和大规模实施。因为环境可以弹性地适配流程，我们就能够为相同类型的项目定义统一的最佳流程。</p>
<p>而git对svn的全面取代则带来一个细微而深远的影响：由于可以在pre-commit阶段直接获得完整的待提交快照、并在这个版本基础上执行测试，不能通过build的代码将直接被拒绝提交。换句话说，整个“持续集成纪律”尝试解决的问题——有缺陷的代码进入团队的代码仓库从而妨碍其他人不断提交没有缺陷的代码——将不复存在，有缺陷的代码将根本无法进入团队的代码仓库。</p>
<p>综上所述，这两个要素的结合：</p>
<ol>
<li>每个开发人员（以及自动构建）都可以在PaaS云上获得完整的技术栈运行时环境；以及，</li>
<li>pre-commit阶段可以对待提交的代码进行完整的构建</li>
</ol>
<p>带来的是一个非常重要的影响：持续集成服务器这个东西，我们不再需要了。持续集成的“集成”这个动作，将在代码进入团队代码库<strong>之前</strong>发生。我们有办法（git的pre-commit钩子）确保这次集成发生，也有办法（云化、容器化的环境）确保这次集成是可信的。因此我们不再需要一个持续集成服务器来扮演团队的守门人。集中式的持续集成服务器将退化为团队研发行为的可视化仪表盘：它不再负责管理环境和构建软件，只负责采集所有构建中产生的数据、并以适当的形式展示，作为团队研发过程的可视化呈现。</p>
<p>当持续集成服务器消亡，一个开发者的典型工作流程可能会是这样：</p>
<ul>
<li>从git仓库clone出代码，在自己的电脑上做修改；</li>
<li>修改完成，从研发PaaS上获得一个运行环境，把刚写好的代码运行起来，用浏览器查看一下效果；</li>
<li>执行构建，构建脚本自动从研发PaaS上获得一个运行环境，在其中执行编译、打包、代码检查和测试；</li>
<li>构建通过，提交代码并push，git仓库的pre-commit钩子自动触发一次构建，过程与效果都与刚才手动执行的完全一致；</li>
<li>如果没有手工执行构建就尝试提交，自动构建会失败，代码无法push到团队的代码仓库中，开发者自己去修复；</li>
<li>如果自动构建成功，代码提交完成，最新版本的代码被构建成容器镜像；</li>
<li>测试人员从研发PaaS上获得一个运行环境，把待测版本的容器镜像装载上去，执行测试，如果测试通过就将该版本标记为“发布候选”；</li>
<li>运维人员从生产PaaS上获得一个运行环境，把发布候选版本的容器镜像装载上去，即完成上线。</li>
</ul>
<p>这个流程直接地实现了《<a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">持续交付</a>》中描述的“两道门”结构。虽然每个项目运行的环境不同，但这个持续交付的结构可以是完全一致的，因为环境可以弹性地适配研发流程。</p>
<p><img src="/assets/2017/4/22/base.png"></p>
<p>与持续集成服务器同时消亡的，还有持续集成这个概念本身。由于对响应力（responsiveness）的要求是如此之高，现代的IT团队已经不能容忍有缺陷的代码先进入代码库、阻塞整个团队的工作、然后再来修复（甚至不修复、或者还需要说服某些团队成员去及时修复）。持续集成是如此重要，以致于它会变成团队的“空气和水”。它会被嵌入到日常的研发工具当中，成为程序员感知不到、而又不可妥协的质量要求——正如IntelliJ之类现代IDE把“通过编译”这项要求变成了程序员感知不到、而又不可妥协的质量要求。</p>
<blockquote>
<p>持续集成对于软件开发是如此重要，以至于不应该把它交给软件开发者自己去做。</p>
</blockquote>
<p>这就是为什么我认为持续集成工具、以及这些工具背后的持续集成概念在云计算深入研发之后将会消亡。取代持续集成的，将是更紧密地内嵌质量要求、更充分地利用云计算优势的云原生（Cloud Native）开发方法及支撑工具。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在思考“&lt;a href=&quot;/2017/3/31/stack-management/&quot;&gt;云时代的研发环境长什么样&lt;/a&gt;”这个问题的时候，我逐渐意识到一件很重要的事。2000年首次被提出、在过去十几年中我们习以为常的敏捷核心实践&lt;a href=&quot;https://www.mar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字化企业的API架构治理</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/22/dps-api-architecture-remediation/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/22/dps-api-architecture-remediation/</id>
    <published>2017-05-22T05:04:00.000Z</published>
    <updated>2017-05-22T00:40:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/4/25/ditigal-platform-strategy-intro/">前文</a>中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住<a href="/2017/5/7/dps-delivery-infrastructure/">交付基础设施</a>、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱。今天我们就来谈一谈API、架构治理这些听起来非常技术性的概念与企业的数字化战略之间有何关系。</p>
<p><img src="/assets/2017/5/22/architecture.jpg"></p>
<h2 id="企业资源服务化"><a href="#企业资源服务化" class="headerlink" title="企业资源服务化"></a>企业资源服务化</h2><p>从1990年代起，企业资源计划（ERP）一直是企业信息化的核心议题。植根于供应链管理，ERP通过对企业内部财务会计、制造、进销存等信息流的整合，提升企业的计划能力与控制能力。然而近年来，在互联网的冲击下，传统企业开始面临全新的挑战。尤其是在互联网的<a href="https://en.wikipedia.org/wiki/Disintermediation" target="_blank" rel="external">去中介化</a>效应影响下，原本在供应链上下游各安其位的企业突然间都被压缩到了“生产-流通-消费”这个极度精简的价值链中。<a href="http://news.xinhuanet.com/yuqing/2017-02/10/c_129474135.htm" target="_blank" rel="external">药品购销两票制</a>就是这个极简价值模型的直观呈现。在这个模型中，掌握技术优势和消费者入口的互联网企业有可能形成一家独大的超级垄断，挤死传统的流通企业，把生产企业变成自己的OEM厂商，这是传统企业对来自互联网的竞争者恐惧的根源。</p>
<p>为了对抗互联网企业的竞争，传统企业最好的办法不是硬拼互联网上的技术和流量，而是在自己擅长的领域开战：把自己多年积累的线下资源变成线上服务，构建起本行业的线上生态系统，不仅支撑本企业的线上经营，而且为上下游周边企业提供线上经营的平台，从而把线下优势转化为线上优势，以资源优势对抗技术优势。</p>
<p>为了支撑企业资源的服务化，在设计在线服务的API和架构时需要考虑以下问题：</p>
<ul>
<li>平台架构和API的设计应该注重<strong>开发者体验</strong>。</li>
<li>在API的背后，应该从业务功能的角度出发划分合理的限界上下文和<strong>服务边界</strong>，对外提供高内聚低耦合的服务。</li>
<li>在服务边界之间，应该考虑使用异步的<strong>事件机制</strong>实现服务之间的通信，来解耦领域模型，客观地描述运行时间比较长、甚至本质上不可能立即完成的操作。</li>
<li>为了方便使用，应该提供<strong>API网关</strong>作为所有服务使用者的单一入口，在API网关背后去处理众多内部IT系统的复杂性。</li>
<li>整个API架构应该以<strong>微服务的风格</strong>呈现，避免典型SOA架构中普遍存在的过于复杂的ESB编排逻辑。</li>
</ul>
<blockquote>
<p><strong>ERP之后是什么？</strong></p>
<p>进入2010年代以来，“后ERP时代”这个说法不断被提出。在谈到ERP的发展方向时，通常都会涉及业务与技术两个角度。例如<a href="http://www.ccw.com.cn/article/view/76781" target="_blank" rel="external">一种观点认为</a>，ERP需要从以流程为中心转变为以客户为中心，并且需要用好云计算、社交网络、大数据和移动化等新技术。</p>
<p>ThoughtWorks认为，ERP在互联网时代的发展方向将是企业资源服务化（Enterprise Resource Servicification，ERS），通过数字平台的技术能力，把一家企业的资源融入一个行业的互联网生态，为企业铺下明确的数字化道路。</p>
</blockquote>
<h2 id="API和架构治理解读"><a href="#API和架构治理解读" class="headerlink" title="API和架构治理解读"></a>API和架构治理解读</h2><p>下面我们来近距离看看，在“API和架构治理”这顶帽子下面，有哪些具体的问题需要被考虑到。</p>
<p><img src="/assets/2017/5/22/pillar-2.jpg"></p>
<h3 id="开发者体验"><a href="#开发者体验" class="headerlink" title="开发者体验"></a>开发者体验</h3><p>当企业资源以服务的形式对外提供，也就意味着不可能——像传统的IT系统建设那样——强迫别人使用这些服务。尤其是要把这些服务提供给第三方开发者、希望他们开发出形形色色的应用程序，那么服务的API是否易用就会很大程度上影响它能吸引到多少第三方开发者。ThoughtWorks<a href="http://thoughtworks.com/radar" target="_blank" rel="external">第16期技术雷达</a>还专门把开发者体验作为一个重要的技术主题。</p>
<p>在讨论开发者体验时，可以从开发工具和开发环境的安装、配置、管理、使用、维护等角度来考量。具体而言，开发环境和测试环境是否能弹性地随需获得，开发/测试基础设施和持续交付流水线是否以源代码的形式提供并完全自动化，是否提供对主流开源软件的支持，是否提供可编程的、命令行友好的（而不仅仅是图形化的）工具界面，安全、数据访问权限等企业规章是否严重影响开发者的效率和感受，这些都是影响开发者体验的要素。</p>
<h3 id="服务边界"><a href="#服务边界" class="headerlink" title="服务边界"></a>服务边界</h3><p>和所有的面向对象设计一样，服务的设计应该是高内聚低耦合的：与一个业务相关的修改只在一个服务内部进行，并且一个服务的修改/部署不需要影响其他服务。和一个代码库内部的对象设计不同，每个服务通常有专属的代码库，并且由专人负责维护（而不是所有人拥有所有代码），因此服务边界的改变会带来更大的变更成本。所以，服务边界的划分需要投入精力认真对待。</p>
<p>从设计原则上来说，服务的边界应该体现业务的边界，而不是单纯从技术角度出发划分服务边界。从业务功能的角度出发划分合理的限界上下文，以领域模型和领域事件的聚合为出发点来划分服务，更可能得出与业务边界一致的服务边界。随后再以业务目标驱动建设全功能一体化团队，就能做到业务、技术、团队三者对齐（<a href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank" rel="external">康威定律</a>再次起作用）。<a href="http://www.infoq.com/cn/articles/xh-four-color-modeling" target="_blank" rel="external">四色建模</a>、<a href="https://techbeacon.com/introduction-event-storming-easy-way-achieve-domain-driven-design" target="_blank" rel="external">事件风暴</a>等方法都能有效地实现<a href="https://book.douban.com/subject/5344973/" target="_blank" rel="external">领域驱动设计</a>，从而建立起良好的领域模型及服务边界。</p>
<h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><p>使用异步的事件机制实现服务之间的通信。对于运行时间比较长、甚至本质上不可能立即完成的操作（例如涉及人工操作），使用异步通信是合理的选择。即便不考虑响应的实时性，事件驱动的架构还表达了领域模型之间的松散耦合关系：跨领域的协作以事件而非方法调用的形式来表达，系统追求最终一致性而非强一致性。这一结构准确地映射了真实世界中多支相关但独立的团队之间的协作关系，避免了过度依赖其他服务的响应速度或可靠性等服务质量指标，使服务真正具有技术上的独立性。</p>
<p>在设计系统时，借助事件风暴方法，可以通过领域事件识别出聚合根，进而划分微服务的限界上下文。当出现跨多个聚合根的事件时，可以很自然地将其实现为异步的领域事件，从而获得与领域设计高度吻合的实现。关于如何设计和实现领域事件，可以参阅ThoughtWorks咨询师<a href="https://zhuanlan.zhihu.com/p/26446019" target="_blank" rel="external">滕云的文章</a>。</p>
<p><img src="/assets/2017/5/22/events.png"></p>
<p>在实现事件驱动的架构时，当然可以沿用传统的SOA架构中的消息中间件。但由于微服务架构中，业务逻辑都存在于各个服务内部，没有庞大臃肿的ESB（稍后我们还会详谈这个问题），因此消息机制也不需要强大的服务编排（orchestration）能力。RabbitMQ这样标准的消息代理当然很好，也有很多系统（例如<a href="http://bahmni.org/" target="_blank" rel="external">Bahmni</a>）采用更简单的做法：领域事件发生时，以ATOM格式发布；关心特定领域事件的其他领域模型则订阅特定的ATOM feed主题。这种基于HTTP的事件传播方式最大的好处就是简单，几乎不需要增加新的软件就可以实现。不过这个方案在处理低延迟的场景时表现不佳。</p>
<h3 id="公共网关"><a href="#公共网关" class="headerlink" title="公共网关"></a>公共网关</h3><p>微服务提供的API粒度与客户端的需求不同，所以客户端一个请求经常需要多个服务；服务端和客户端之间可能需要通信协议转换；不同的客户端对数据的需求不同，例如浏览器客户端需要的信息可能多于移动客户端；服务的终端信息（主机+端口）可能变化；不同数据片可能由不同的服务终端来提供——以上这些因素都指出：有必要对服务做一层门面封装，提供API网关作为所有服务使用者的单一入口点。</p>
<p>API网关处理请求的方式有两种：一种是直接代理/路由给合适的服务；另一种是由一个请求扇出/分发给多个服务。API网关可能针对不同客户端提供不同的API，可能包含针对客户端的适配代码。横切需求（例如安全）也可能在API网关实现。</p>
<p>当服务数量变多、API网关变大以后，维护一个通用的API网关会增加API网关层的复杂度，导致一个独立的“API团队”出现，协调和沟通的工作量加大。这时可以考虑引入公共网关的一个变体：为特定前端设计的后端（Backend For Frontend，BFF），即为每个前端应用提供一个单独的API网关，使对齐业务的一体化团队能够拉通前后端开发、而不必等待“API团队”完成他们的backlog。</p>
<p>API网关可以实现为一个独立的服务端应用，其代价则是增加一层复杂度（和出错的可能性）。为了降低这一代价，可以考虑用<a href="https://github.com/Netflix/zuul" target="_blank" rel="external">Zuul</a>等工具来实现API网关。</p>
<h3 id="微服务SOA拓扑"><a href="#微服务SOA拓扑" class="headerlink" title="微服务SOA拓扑"></a>微服务SOA拓扑</h3><p>与传统的SOA架构相比，所谓“微服务”最大的特点可能就在于没有一个重量级的ESB。重量级的ESB有其历史原因。在2000年代业界刚开始采用SOA时，很多企业尽管把业务系统包装成了web服务，但IT团队的组织结构并没有发生改变，仍然是由一组人集中式地掌管整个业务流程——只不过系统集成的方式不再是直接的方法调用，而是服务编排（orchestration）。原本存在于集成代码中的复杂逻辑，现在被转移到了ESB中。而这个“ESB团队”成了IT交付的瓶颈：不论发布事件的服务还是消费事件的服务、或是编排逻辑本身的改变，与事件相关的变更都需要通过ESB团队。这个团队的backlog堆积起来，使得每个服务、每个应用都无法提供快速响应。</p>
<p>微服务架构更重视服务与业务的对齐。贝索斯所说的“两个pizza的团队”不仅负责一个IT系统的交付，而且要负责用这个IT系统来支撑一个业务的成功。为了做到单个服务能够独立开发、独立部署、独立运行，这支团队应该能够在很大程度上掌控自己的进度，而不依赖于一个集中式技术团队的进度。因此微服务应该通过服务注册与发现机制获得自己需要的依赖服务、自己判断是否要直接调用或订阅依赖服务的事件，每个服务包含与其业务对应的复杂度，而不是把整个系统的复杂度集中在ESB和编排逻辑上。整个系统的架构（以及团队的架构）应该呈现为若干个端到端拉通的、与业务对齐的纵切服务，而不是一个横切的大块（ESB）覆盖所有业务。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>为了激活企业线下资源、打造行业线上生态，IT需要一套有效的服务API和架构治理方法。首先从领域驱动设计入手，划分出合理的限界上下文和服务边界，然后用异步消息机制来描述领域事件。设计好的服务通过API网关或BFF暴露给前端应用，把依赖关系和集成逻辑约束在与业务对齐的一体化团队内部。在整个服务架构的设计中，需要保持对开发者体验的关注。顺畅地将企业资源服务化，这是企业数字化旅程的第二步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/4/25/ditigal-platform-strategy-intro/&quot;&gt;前文&lt;/a&gt;中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住&lt;a href=&quot;/2017/5/7/dps-delivery-infrastructure
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字化企业的交付基础设施</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/7/dps-delivery-infrastructure/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/7/dps-delivery-infrastructure/</id>
    <published>2017-05-07T05:04:00.000Z</published>
    <updated>2017-05-07T02:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/4/25/ditigal-platform-strategy-intro/">前文</a>中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱。那么，当我们谈“交付基础设施”，我们究竟在谈什么？怎样的交付基础设施能加速数字化项目的交付？</p>
<p><img src="/assets/2017/5/7/infra.jpg"></p>
<h2 id="什么是交付基础设施"><a href="#什么是交付基础设施" class="headerlink" title="什么是交付基础设施"></a>什么是交付基础设施</h2><p><a href="/2017/3/31/stack-management/">云时代的研发环境</a>应该以原生支持云计算的方式提供、管理和维护。在提供基础的弹性计算能力的IaaS平台之上，交付基础设施负责为交付团队提供便利的、最好是自助式的工作环境，让交付团队专注于交付软件的功能性需求，而不必操心软件功能之外的“脚手架”工作。按照ThoughtWorks<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>的定义，这些脚手架包括：</p>
<ul>
<li><strong>弹性基础设施</strong>，即交付团队使用底层云计算平台的方式，既包括各种虚拟机和镜像的管理，也包括生产环境的水平伸缩能力。</li>
<li><strong>持续交付流水线</strong>，交付团队编写的代码需要通过这条流水线最终变成可以上线运行的软件。</li>
<li><strong>部署运行时</strong>，软件在开发、测试、试运行、用户验收、培训、生产等各种环境需要部署的环境。</li>
<li><strong>监控</strong>，为交付团队提供生产环境（及其他环境）的可观测性，方便他们发现和解决问题。</li>
<li><strong>安全</strong>，把安全内建在软件的研发过程中，尽量避免因为人为失误造成安全隐患。</li>
</ul>
<p>从前这些交付基础设施脚手架通常是由每个交付团队的技术领导者（<a href="http://insights.thoughtworkers.org/thoughtworks-practice-part8/" target="_blank" rel="external">Tech Lead</a>）来负责搭建和维护的。并且由于软硬件资源的稀缺和不灵活，团队经常需要微调自己的实践来适应不同的环境。所以，即使在同一家公司，各支团队所使用的交付基础设施也可能大相径庭。交付基础设施不一致、不规范的情况会迫使团队花费额外的精力去操心脚手架工作，并且使<a href="/2017/5/2/stack-management-and-tech-radar/">最佳实践不易推广普及</a>。走上数字化道路的企业必定有大量的软件项目，尤其是微服务架构风格的引入会使企业拥有数量更多、单体规模更小的软件应用，此时交付基础设施不一致、不规范的情况就会对企业的数字化进程带来更大的阻力。</p>
<p>云计算带来的弹性和灵活性让组织级的交付基础设施标准化、规范化成为可能。一个跨越项目团队的、组织级的交付基础设施团队现在可以在IaaS的基础上封装标准的脚手架，甚至把<a href="/2017/4/14/stack-management-implementation/">脚手架本身以PaaS的形式提供</a>给交付团队。通过把整个企业优秀技术领导者的知识与经验内嵌在交付基础设施脚手架中，就降低了对单个交付团队的技术要求，帮助企业缓解优秀技术领导者难以获得的人才挑战。从这个意义上，以PaaS形式提供的交付基础设施本质上是<strong>技术领导者作为服务</strong>（Tech Lead as a Service）的云计算应用形式，它解决的是优秀技术人才的弹性和灵活性问题，让企业能够以一种创新的方式使用这些人才。</p>
<blockquote>
<p><strong>架构师写代码吗？</strong></p>
<p>关于“架构师是否应该写代码”这个问题，业界有各种不同的声音。在敏捷的社区里，意见倾向于认为<a href="https://www.infoq.com/articles/architects-should-code-bryson" target="_blank" rel="external">架构师需要写代码</a>，因为这是他们获得关于技术决策的反馈和建立技术领导力的重要方式。将交付基础设施明确提出来，就给了架构师又一个清晰的编程目标——他们需要<a href="https://yaowenjie.github.io/devops/infrastructure-as-code" target="_blank" rel="external">用代码的形式描述</a>软件交付中的基础设施和最佳实践。除了培训、开会、代码评审等我们已经知道效率并不太高的方式以外，架构师对交付团队的指导和监管现在可以用实实在在的代码来承载。当交付团队不理解架构师说的某件事应该怎么做，现在他们更有理由要求架构师“show me the code”。</p>
</blockquote>
<h2 id="交付基础设施解读"><a href="#交付基础设施解读" class="headerlink" title="交付基础设施解读"></a>交付基础设施解读</h2><p>下面我们来看看，在“交付基础设施”这顶帽子下面，架构师/技术领导者们究竟应该关心哪些问题，又有哪些最佳实践应该被纳入他们的视线。</p>
<p><img src="/assets/2017/5/7/di.jpg"></p>
<h3 id="弹性基础设施"><a href="#弹性基础设施" class="headerlink" title="弹性基础设施"></a>弹性基础设施</h3><p>允许交付随需获得计算能力。在微服务语境下，这种弹性有两层常见的含义：在生产环境下，服务可以随负载动态获得和释放计算资源，从而更高效地使用计算资源，更自动化地应对负载变化；在研发环境下，开发、测试、运维等不同角色可以随需动态获得完整的环境，从而统一环境、标准化研发实践、规范化研发能力，并且给研发提供体验更好的开发环境。</p>
<p>为了实现弹性基础设施，一方面基础设施需要支持弹性，例如使用支持弹性计算的公有/私有云，并且有对生产环境的监控和自动化手段；另一方面应用本身需要有可扩展性，例如服务能分别独立部署、无状态化、容器化、有透明的前端负载均衡机制。有状态服务（比如数据库服务）的弹性伸缩问题是特别需要考虑的重要挑战。</p>
<h3 id="持续交付流水线"><a href="#持续交付流水线" class="headerlink" title="持续交付流水线"></a>持续交付流水线</h3><p>用持续交付实践打通微服务的开发、构建、验证和部署流程。在数字化、服务化的背景下，众多互相依赖的微服务形成的系统架构，对构建、验证和部署造成更大的压力：各个服务有独立的代码库和构建流程，又需要随时能组合成可用的软件；构建产物需要有统一的存储管理；完整的运行时环境应该能按需获得；配置和部署应该能快速准确地完成。</p>
<p>为了应对这些挑战，交付基础设施中应该包含完整的持续交付概念：流水线、环境管理、构建产物管理等。应该鼓励对服务虚拟化，最好是每个主机运行一个微服务，而不共享使用主机。应该包含配置自动化工具，例如Chef、Puppet等。在服务化的背景下，持续交付流水线需要体现服务间的依赖关系和团队间的协作关系，设计一个运转良好的流水线不是容易的任务。</p>
<h3 id="部署运行时"><a href="#部署运行时" class="headerlink" title="部署运行时"></a>部署运行时</h3><p>交付基础设施应该包含生产系统所使用的运行时环境，并把生产环境前向拉通到验证和研发环节。为了在研发流程的出口得到服务化友好的交付物，最好是在整个开发过程中一直使用与生产环境近似的环境。例如开发人员应该使用全套环境随时验证，自动化测试和手工测试都基于全套环境开展。在这种情况下，环境的设置、管理、更新不可能由每个开发人员和测试人员自己进行，所以环境的管理更新必定是集中进行的，环境的设置必定是自动化的。</p>
<p>在《<a href="/2017/4/14/stack-management-implementation/">技术栈管理：云时代的研发环境</a>》一文中，我们已经介绍过“一个平台、两个PaaS服务、三个运行时环境”的技术栈管理理念。特别需要注意的是，如何将生产数据拉通到验证和研发环节。</p>
<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>在微服务架构中，系统由多个小服务组成，且广泛使用异步通信，使问题和故障更难定位。因此交付基础设施需要提供全面可靠的监控机制，帮助交付团队了解系统的整体状况。</p>
<p>监控的实现涉及日志、服务指标跟踪、业务语义综合监控等方式。在云环境下如何划分和管理监控的层级，监控系统如何无侵入的在各个微服务体系中收集故障和信息，如何有效管理监控的反馈环，如何在前后端分离和移动应用情况下收集和监控客户端日志，都是常见的挑战。</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>当数字化、服务化IT系统的数量剧增，安全的设置会变得更加复杂。在微服务架构下，系统的安全性需要有一个整体的考虑。例如单点登录、服务间的身份验证和授权、各种防御措施等安全考量不应该下放到交付团队，而应该被涵盖在交付基础设施中统一提供、统一管理、统一更新。</p>
<p>交付基础设施还应该鼓励<a href="https://www.buildsecurityin.net/zh/" target="_blank" rel="external">安全实践内建</a>（Build Security In），例如团队应该熟悉OWASP安全列表和测试框架、需求分析中应该包含安全需求和恶意用户需求、测试过程中应该包含安全性测试、应该进行自动化安全性测试并纳入持续交付流水线。这些流程与工作方法虽然不能完全以软件代码的形式承载，但它们同样是交付基础设施的重要组成部分。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>数字化、服务化的IT大背景会让企业开发和拥有的IT系统数量剧增。当企业IT交付更多地以“两个pizza团队”的形式组织，依赖于每个交付团队的技术领导者来搭建和维护一套完整高效的交付基础设施脚手架，这种期望即使不是完全不现实，也会对企业的人才积累提出非常高的要求。因此，企业应该集中优秀的技术人才（包括架构师们），打造一套标准的交付基础设施，充分考虑生产环境与研发环境的弹性、持续交付、部署运行时的统一、监控、安全等因素，并借助云计算的弹性和灵活性将其提供给交付团队。用便利的脚手架赋能一支能快速交付的团队，这是企业的数字化旅程的第一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/4/25/ditigal-platform-strategy-intro/&quot;&gt;前文&lt;/a&gt;中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术栈管理与云时代的持续集成</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/2/stack-management-and-tech-radar/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/2/stack-management-and-tech-radar/</id>
    <published>2017-05-02T05:04:00.000Z</published>
    <updated>2017-05-23T15:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>在刚刚发布的<a href="https://assets.thoughtworks.com/assets/technology-radar-vol-16-cn.pdf" target="_blank" rel="external">第16期技术雷达</a>中，我们看到ThoughtWorks在“技术”象限里旗帜鲜明地列举了几项与持续集成相关的反模式。这些存在多年的实践和现象被放在了“暂缓”一环中，意味着ThoughtWorks正式向我们的客户指出：如果你的组织仍在这样实施持续集成，我们认为你应该考虑改变了。那么，这些被批评的点背后映射出哪些问题，基于技术栈管理的云时代研发环境又能带来什么新的思路？我们一起来深入分析。</p>
<p><a href="http://www.bagevent.com/event/405803" target="_blank" rel="external"><img src="/assets/2017/5/2/tech-radar-card.png"></a></p>
<h2 id="持续集成的反模式"><a href="#持续集成的反模式" class="headerlink" title="持续集成的反模式"></a>持续集成的反模式</h2><p>最需要被点名批评的现象莫过于“<a href="https://www.thoughtworks.com/radar/techniques/ci-theatre" target="_blank" rel="external">持续集成剧场</a>”了：</p>
<blockquote>
<p>很多开发者只是简单的搭建了持续集成服务器就以为在做“持续集成”，但他们实际上会遗失持续集成的关键优点而导致失败。常见的失败模式包括：虽然在一个共享的主分支上运行持续集成，但是代码提交不频繁，所以集成并没有真正的“持续”。以及在一个测试覆盖率不足，甚至是长期状态为红的情况下进行构建；或者在功能分支上运行持续集成，这会导致持续隔离。</p>
</blockquote>
<p>简而言之，这些团队并没有真正体会到持续集成的好处，而是为了完成上级的任务而演一场“我们在持续集成”的戏——这也正是这个反模式的名字由来。过去十年中，我们在众多刚开始实施持续集成的企业见过这一幕。领导认识到持续集成的好处，但是推行成了个大问题：推轻了，下面团队不愿动，技术问题解决不了；推重了，下面团队来个上有政策下有对策，领导想看什么就给你演什么——持续集成剧场就此落成。比如说你见过一个表面看起来一直是绿色但是背后连编译都不敢跑的持续集成吗？我见过。真是一场好戏。</p>
<p>为了解决持续集成演戏的问题，一些规模较大的企业开始建设持续集成中心。想法很符合直觉：既然团队自己做持续集成有技术困难、还有可能变成演戏，那么我就组建一支团队专门帮他们一个个把持续集成跑通、帮他们管理持续集成服务器，持续集成的运行和统计数据都在这个中央团队手里，下面的团队总没办法演戏了吧？于是，他们又遭遇了第二个持续集成反模式：“<a href="https://www.thoughtworks.com/radar/techniques/a-single-ci-instance-for-all-teams" target="_blank" rel="external">所有团队共用一个持续集成实例</a>”。</p>
<blockquote>
<p>那些必须使用中心化持续集成服务器的交付团队，常常依赖中心的团队去完成小的配置任务，或者在共享的基础设置和工具中排查问题，这给他们在进度上带来长时间的滞后。</p>
</blockquote>
<p>这次是<a href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank" rel="external">康威定律</a>带来的困难：如果每个团队使用的技术栈配置不同、技术栈配置和管理的职责仍然在每个团队中，那么技术栈演进与持续集成的演进就难免出现节拍不一致。于是管理着持续集成中心的中央团队开始疲于奔命，帮一个个项目团队修持续集成，而项目团队还感到没有得到足够的支持。</p>
<p>第三个反模式是“<a href="https://www.thoughtworks.com/radar/techniques/enterprise-wide-integration-test-environments" target="_blank" rel="external">企业级集成测试环境</a>”，这也是很多组织建设持续集成中心的初衷之一：由于能执行完整端到端测试的环境稀缺，各个团队的集成测试无论如何也必须在一个瓶颈处统一调度，所以中心化管理持续集成也就顺理成章。然而，</p>
<blockquote>
<p>这些企业集成测试环境通常称为 SIT 或预生产环境）是当下持续交付常见的瓶颈。环境本身很脆弱而且维护成本很高，而这些环境通常存在一些需要由单独的环境管理团队手动配置的组件。在预生产环境的测试给出的反馈慢且不可靠，而且会重复测试那些在隔离的组件上已经测过的功能。</p>
</blockquote>
<h2 id="云时代的新思考"><a href="#云时代的新思考" class="headerlink" title="云时代的新思考"></a>云时代的新思考</h2><p>技术雷达中批评的这些持续集成的反模式，是过去的时代背景造就的。尤其是以下几点约束条件，造成了今天我们看到的持续集成的形态（以及长久以来存在的挑战）：</p>
<ol>
<li><strong>计算资源短缺</strong>。这个约束条件决定了完整的、与生产环境相似的、能执行端到端验证的环境必定是稀缺品，因此一个组织中多个团队的集成必定会受限于某个瓶颈，或是企业级集成测试环境、或是持续集成中心。</li>
<li><strong>计算环境没有弹性</strong>。不仅硬件资源短缺，而且环境的开通、配置和管理很麻烦，所以团队会调整自己的技术实践去适应已有的环境，而这个调整的动作主要由团队内的技术领导者来执行。其结果是即便多个团队开发的软件在技术栈上非常相似，他们的持续集成实践也可能相当不同，在技术能力不足的团队就会变成持续集成剧场。</li>
<li><strong>版本控制工具的局限性</strong>。Subversion（以及其他更早的版本控制工具）在pre-commit阶段通过服务器端回调钩子很难——如果不是完全不可能的话——得到完整的“提交后版本”，因此svn的pre-commit钩子基本只能用于检查提交信息是否符合规范，完整的验证则必须在代码已经合入代码库之后才能——在一台独立的“持续集成服务器”上——进行，而此时如果构建失败就会阻塞整个团队的工作。这也导致更多的团队倾向于放松持续集成的要求、甚至沦落成持续集成剧场。</li>
</ol>
<p>而这几个约束条件在今天的时代背景下已经不复存在：计算资源仍然不能说极大丰富，但企业应用开发所需的x86架构计算资源在云环境下已经不再短缺；在IaaS的基础上，技术栈管理的PaaS提供了计算环境的弹性，使用相同技术栈的多个团队可以轻易地获得完全一样的环境，因此团队也可以采用标准的技术实践，而不必为了将就手边的环境而调整实践。而git对svn的全面取代尤为值得玩味：由于可以在pre-commit阶段直接获得完整的待提交快照、并在这个版本基础上执行测试，不符合持续集成要求的代码将直接被拒绝提交——而不是在提交后才把问题暴露出来。于是，以下两个要素的结合：</p>
<ol>
<li>每个开发人员（以及自动构建）都可以在PaaS云上获得完整的技术栈运行时环境；以及，</li>
<li>pre-commit阶段可以对待提交的代码进行完整的构建</li>
</ol>
<p>将带来两个重要的影响。首先，持续集成不再需要一个“服务器”。从它发展的早期开始，持续集成这个概念就一直与各种“持续集成服务器”软件工具紧密关联：从早期的CruiseControl、Bamboo到后来的Jenkins、GoCD，以及云上提供服务的TravisCI、SnapCI，持续集成中的“集成”这个动作一直发生在代码已经提交之后、发生在一个团队共有的服务器上。而现在，持续集成可以在代码提交之前发生、在一个从PaaS云上弹性生成的环境中发生。</p>
<p>这个技术性的改变带来的组织性改变将有着重要的意义：保证持续集成通过将会彻底变成每个开发人员自己的责任，没有折扣可打，没有其他地方可以推卸责任——现在构建不通过不会阻碍其他人提交代码了，只有这个开发人员自己不能提交代码。由此，持续集成将由一项团队实践变成一项个人实践、由一项有较大妥协空间的实践变成一项强制性的实践。正如IntelliJ之类现代IDE把“通过编译”这项要求变成了程序员感知不到的、而又不可妥协的质量要求，技术栈管理PaaS平台将把持续集成也变成程序员感知不到的、而又不可妥协的质量要求。</p>
<blockquote>
<p>持续集成是如此重要，以至于我们不应该把它交给程序员自己去做。</p>
</blockquote>
<p>在这样的一个研发环境下，每个开发人员从写下第一行代码开始就必须遵循组织的质量规范，能够被提交到团队代码库的代码都是通过了验证流程、符合质量要求的。<a href="/2011/9/9/development-as-delivery/">6年前当我构想这样一个研发环境</a>，我觉得它更像是一个遥远的梦想。然而今天，支持这样研发环境的<a href="/2017/4/14/stack-management-implementation/">技术栈管理PaaS平台</a>已经被实现出来了。你需要的就是在你的研发云上实施它。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在刚刚发布的&lt;a href=&quot;https://assets.thoughtworks.com/assets/technology-radar-vol-16-cn.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第16期技术雷达&lt;/a&gt;中，我们看到Th
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>什么是数字平台战略</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/25/ditigal-platform-strategy-intro/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/25/ditigal-platform-strategy-intro/</id>
    <published>2017-04-25T05:04:00.000Z</published>
    <updated>2017-04-25T02:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>传统企业正在面临IT新技术的挑战——单从“传统企业”这个居高临下的称谓，你就能读出“非传统企业”（也就是IT企业、互联网企业）满满的优越感。每天在各种新媒体平台看着BAT们又掌握了什么黑科技、又颠覆了哪个行业，“云大物移”已经成了高频出现的热词，传统企业们愈发清晰地感受到<a href="/2016/1/13/it-talent-trend/">IT的重要性与挑战</a>。数字化浪潮躲不过，和BAT拼技术又拼不过，传统企业的出路在哪里？</p>
<p><img src="/assets/2017/4/25/digital-platform.jpg"></p>
<p>目光投向大洋彼岸，最传统的传统企业、年收入数千亿美元的<a href="/2017/4/19/walmart-digitization/">沃尔玛在过去几年中的数字化历程</a>颇有可玩味之处。直到2011年，沃尔玛还不是出色的数字化玩家，只能算有个电商网站的线下零售商而已。正因为如此，当沃尔玛的电商收入在2011年至2014年的三年间增长150%、从年销量49亿美元增长到122亿美元、超过史泰博（Staples）成为亚马逊和苹果之后美国第三大在线零售商时，这一变化才更令人惊叹。像沃尔玛一样的数字化转型先行者，能给我们带来哪些启示？</p>
<h2 id="数字化企业的三个关键字"><a href="#数字化企业的三个关键字" class="headerlink" title="数字化企业的三个关键字"></a>数字化企业的三个关键字</h2><p>首先，传统企业们需要清楚一件事：“传统”不应该是贬义词，它同时意味着数十年积累的宝贵资产，包括客户关系、数据、品牌形象、供应链、渠道等等。传统企业要在互联网时代的竞争环境中占得一席之地，靠的不是突破最高精尖的技术领域，而是以数字化的形式激活自己多年累积的核心资产，将核心资产转变为可以在互联网上使用的服务，使其焕发新的价值。</p>
<p>对众多成功的数字化企业的调研显示，这些企业有着一些引人注目的共性。在“激活核心资产”的过程中，他们对三个关键字的关注特别值得我们关注：IT效能；生态系统；创新实验。</p>
<p><img src="/assets/2017/4/25/3-goals.png"></p>
<p>首先，这些成功的数字化企业重视<strong>提升IT团队的效能</strong>。正如ThoughtWorks在<a href="https://www.thoughtworks.com/radar" target="_blank" rel="external">第16期技术雷达</a>中所指出的，技术人员的工作体验正在成为科技企业的差异化竞争优势。这里所说的“体验”不止是给程序员舒适的座椅和人体工学键盘，更重要的是消除IT团队在工作中遇到的阻力和摩擦，尤其是充分利用云计算的弹性能力大量简化和自动化与实现业务功能无关的基础设施性工作，让IT团队将注意力集中在真正与业务相关的工作上。这里涉及的一些技术和实践（例如<a href="/2017/4/14/stack-management-implementation/">技术栈管理</a>）乍听起来可能困难重重，但为提升IT团队效能付出的成本终将物有所值。</p>
<p>随后，这些成功的数字化企业把他们的核心商业能力与资产以服务的形式在互联网上提供出来，<strong>构建本行业的数字化生态系统</strong>，使新的服务和产品能够在这些服务的基础上被创造出来。同样是在技术雷达中，我们看到了“平台的崛起”：几年前只有亚马逊这样的巨头企业能在互联网上提供各种云服务；而现在有更多原本不太有“互联网基因”的企业围绕自己的核心资产建立起了数字化平台，不仅对内、而且对外提供服务。在国内，我们看到<a href="http://www.hwclouds.com/devcloud/" target="_blank" rel="external">华为把软件开发能力变成了云服务</a>、<a href="https://www.haihangyun.com/landing" target="_blank" rel="external">海航建立了自己的云生态</a>。我们相信，更多的企业也能从核心资产的服务化中受益良多。</p>
<p>最后但绝非最不重要的，这些成功的数字化企业养成了<strong>创新实验的习惯</strong>。在互联网中弄潮的经验让他们承认，自己不能预先掌握所有需求、做好所有设计。因此他们转而打造组织的响应力，致力于缩短精益创业的“构建-度量-学习”周期。他们知道成千上万的用户不会明明白白地说自己想要什么功能，于是他们监控用户行为、用A/B测试等方法进行受控实验，用“假说-实验”代替了“需求-实现”，在不断的反馈中完善自己的产品和服务。</p>
<h2 id="数字平台战略的五大支柱"><a href="#数字平台战略的五大支柱" class="headerlink" title="数字平台战略的五大支柱"></a>数字平台战略的五大支柱</h2><p>以提升IT效能、构建行业生态、促进业务创新为目标，有志于迈出数字化步伐的企业应该立即开始制订自己的数字平台战略蓝图。不要被“平台”和“战略”这样的大词欺骗：这个以增强企业响应力为目标的平台战略不应该是漫长的规划之后建设出一个庞然大物，而应该是迭代的、精益的、价值驱动的。更多的时候，我们谈论的“数字平台”更像是一系列IT技术与实践的落地结合。这些技术与实践有机构成的五个支柱，让数字化的企业能快速交付IT系统、围绕核心资产构建云上生态系统、从线上系统和用户行为中获得洞察、开展受控实验、并为顾客创造全渠道统一的用户体验。在成功的数字化转型案例（例如<a href="/2017/4/19/walmart-digitization/#数字平台战略视角分析">沃尔玛的案例</a>）中，我们就能看到这五个支柱的投影。</p>
<p><img src="/assets/2017/4/25/5-pillars.png"></p>
<p>第一个支柱是支持云和敏捷的<strong>交付基础设施</strong>。为了让IT团队快速交付，他们使用的基础设施应该具有弹性，开发、测试、运维等不同角色应该可以随需动态获得完整的应用环境，从而统一环境、标准化研发实践、规范化研发能力。他们开发的应用程序应该用持续交付实践打通开发、构建、验证和部署流程，使软件随时处于可发布状态。他们的交付流程中应该内建对安全的考量，而不是依赖最后的整体安全检查。生产系统所使用的运行时环境应该前向拉通到验证和研发环节，保障运行时环境的一致性。需要对系统的IT运维和业务运营进行全面的监控，聚合起来了解系统整体状况。</p>
<p>第二个支柱是以微服务为核心的<strong>API和架构治理</strong>。为了鼓励不仅企业内、还包括企业外的开发者在平台上发挥创造力，平台架构和API的设计应该注重开发者体验。在API的背后，应该从业务功能的角度出发划分合理的限界上下文和服务边界，对外提供高内聚低耦合的服务。在服务边界之间，应该考虑使用异步的事件机制实现服务之间的通信，来客观地描述运行时间比较长、甚至本质上不可能立即完成的操作（例如涉及人工操作）。为了方便使用者，应该提供API网关作为所有服务使用者的单一入口点，在API网关背后去处理众多内部IT系统的复杂性。整个API架构应该以微服务的风格呈现，避免典型SOA架构中普遍存在的过于复杂的ESB编排逻辑。</p>
<p>第三个支柱是允许开发团队<strong>数据自服务</strong>。为了让业务和研发团队获得关于生产环境、关于线上业务、关于顾客的洞见，他们需要首先定义数据流水线，使数据能够顺畅地流过收集、转换、存储、探索/预测、可视化等阶段，产生业务价值。他们需要用实时的架构和API在短时间内处理大量、非结构化的数据，从中获得洞见，并“实时”影响决策。为了提高应变能力，系统中的数据不做ETL预处理，而是以“生数据”的形式首先存入数据湖，等有了具体的问题要回答时，再去组织和筛选数据，从中找出答案。IT团队会更进一步把数据包装成能供外人使用的产品，让第三方从数据中获得新的洞见与价值。为了支持数据产品的运营，他们需要实现细粒度的身份认证，针对不同的用户身份，授权访问不同范围的数据。</p>
<p>第四个支柱是<strong>创新实验基础设施和监控体系</strong>。为了让创新真正基于数据（而非拍脑袋）来开展，IT团队需要从多种来源采集关于系统、关于顾客的数据。需要根据业务目标在系统中埋设监控点，并及时把监控结果可视化呈现给业务用户。为了降低实验试错的风险，在把新版本发布给全部用户之前，应该以“金丝雀发布”的形式首先发布给一小部分用户，确保新版本不造成重大损害。系统需要支持功能切换开关（toggle），允许团队在不修改代码的前提下改变系统的行为，再加上用路由技术支持蓝-绿部署和A/B测试，方可高效地开展受控实验。</p>
<p>第五个支柱是支持全渠道的<strong>用户触点技术</strong>。为了通过多样化的触点技术向顾客提供随时随地、连贯一致的用户体验，整个企业需要建立对其顾客和目标顾客的唯一、连贯、准确、整体的视图，从而更好地了解和服务顾客。他们需要结合顾客的特征和不同数字渠道的特征建立连贯的内容策略，在多种渠道（例如电脑、智能手机、门店等）之间引导顾客的消费旅程，与顾客产生正确时间、正确地点、正确方式的交互。基于从各种渠道获得的顾客本人及其行为的数据分析，他们可以向顾客提供定制化的内容、服务和产品推荐。作为必要的技术保障，所有数字渠道的软件应用（尤其是原生的Android和iOS应用）都应该实践持续交付，这样才能实现全渠道的快速响应。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在数字化的浪潮面前，传统企业不必恐惧于互联网企业的技术优势。只要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱，逐步建设自己的数字平台，不断提升IT效能、构建本行业的数字化生态系统、养成创新实验的习惯，传统企业同样可以用数字技术激活自己多年积累的核心资产，在新的竞争环境中找到自己的一席之地。</p>
<p><em>（更多关于数字平台战略的信息，请关注<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">ThoughtWorks数字平台战略网站</a>。）</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统企业正在面临IT新技术的挑战——单从“传统企业”这个居高临下的称谓，你就能读出“非传统企业”（也就是IT企业、互联网企业）满满的优越感。每天在各种新媒体平台看着BAT们又掌握了什么黑科技、又颠覆了哪个行业，“云大物移”已经成了高频出现的热词，传统企业们愈发清晰地感受到&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云时代的研发环境：实施路径</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/23/stack-management-approaches/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/23/stack-management-approaches/</id>
    <published>2017-04-23T05:04:00.000Z</published>
    <updated>2017-04-26T13:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2017/4/14/stack-management-implementation/">前文</a>讲到，在云计算的时代大背景下，我们推荐采用研发技术栈管理平台来集中管理组织中的技术栈，允许基于一个技术栈创建开发测试PaaS和生产PaaS两个PaaS服务，从而支撑开发、测试、生产三种运行时环境。通过三种运行时环境的区分，技术栈管理平台实质上设置了一条标准的精益软件生产流水线，为软件研发生命周期中的三个核心工种——开发、测试、运维——布置了标准的“工位”。在实施技术栈管理平台时，从这三个核心工种之中的任何一个切入，都可以优先建设该工种对应的工位，从而拉动整条云化生产流水线的实施。</p>
<p><img src="/assets/2017/4/22/base.png"></p>
<h2 id="从开发切入，打造规范的软件开发底座"><a href="#从开发切入，打造规范的软件开发底座" class="headerlink" title="从开发切入，打造规范的软件开发底座"></a>从开发切入，打造规范的软件开发底座</h2><p>在数字化的大背景下，众多IT组织都面临技术能力短缺的境况。尤其是传统企业的IT部门，需要用有限的研发专业技能交付越来越多、变化越来越频繁的IT系统，还需要管理外包合作方的团队，对于开发底座规范化的要求日益显著。这些开发团队常见的一些挑战包括：</p>
<ul>
<li>技术实践能力有限，不能保证每个项目采用业界最佳的框架与工具组合。</li>
<li>开发流程不规范，代码质量关注不够，技术债累积严重。</li>
<li>外包团队管理乏力，对外包团队的开发实践缺乏约束。</li>
</ul>
<p>实施技术栈管理平台以后，整个组织可以识别并聚焦几种具有普遍代表性的软件形态（例如“Java微服务”、“Java Web应用”、“安卓移动应用”等），集中技术骨干力量，搭建项目基础架构，以技术栈的形式固化下来。开发团队要启动一个项目时，只需要从技术栈管理的PaaS平台上选择自己需要的技术栈，就可以立即生成自己的构建运行时，其中包括代码仓库、应用基础框架、依赖软件、自动化构建工具等。基于这个构建运行时，开发团队可以基于已经搭好的脚手架立即开始编写代码，并在PaaS云上进行基本的验证，然后提交到团队代码仓库。团队的技术领导者不需要考虑开发环境应该如何配置，开发人员也不需要在自己的电脑上做任何环境准备工作，从而极大地降低了项目启动的技术门槛。</p>
<p>作为对开发工位的规范要求，技术栈中会规定“提交门”的质量标准，达不到质量标准的代码将无法提交到团队代码库中。这个实践与持续集成一样，都是源自丰田生产方式的“安灯”实践：如果出现质量隐患，应该立即停线修复，而不是让带着质量隐患的生产线继续运转。在一般的开发团队中，提交门的质量标准至少包括（1）代码能通过编译；（2）代码能通过静态质量检查。通过引入代码复杂度、代码规范性检查等基本质量标准，能促使开发团队关注代码质量，避免基本的技术债不断累积。水平较高的团队会在提交门中包含单元测试，单元测试不通过、或单元测试覆盖率达不到标准的代码将无法提交。</p>
<p>如果需要引入外包团队来协助开发，外包团队可以直接从技术栈管理PaaS服务商获得自己的构建运行时，绝大部分的开发规范可以用提交门验证的形式来承载，从而将组织的质量要求固化到开发环境中，降低规范化管理外包团队的难度和成本。</p>
<p><img src="/assets/2017/4/22/dev-impl.png"></p>
<p>在开发工位实施技术栈管理后，随着开发规范化底座的建立和开发阶段质量要求的逐渐提升，开发团队将具备逐步缩短交付周期的能力。随着开发交付周期缩短，待测试、待发布的版本会累积起来，对后续的测试和运维工位形成压力。此时研发管理者应该密切留意测试工位的累积情况。如果测试团队抱怨转测版本太多、人手不足，都反映出工位之间产能失衡的问题。当这一问题出现时，就应该抓住契机，提升测试工位的标准化和自动化程度，使测试工位能跟上开发的交付周期。</p>
<h2 id="从测试切入，建立云测试平台"><a href="#从测试切入，建立云测试平台" class="headerlink" title="从测试切入，建立云测试平台"></a>从测试切入，建立云测试平台</h2><p>在数字化、互联网化的IT大背景下，软件系统上线的周期不断缩短，两周一迭代已经成为众多团队的标准配置，一些创新型业务已经要求将上线周期缩短到一周、几天、甚至一天几次。不断缩短的上线周期，使很多IT组织在测试方面的问题暴露出来：</p>
<ul>
<li>测试自动化程度低，手工回归测试跟不上频繁上线的节奏。</li>
<li>测试环境争用，环境管理工作量大。</li>
<li>性能、安全等非功能性需求的测试投入不足，到项目晚期才开始测试。</li>
</ul>
<p>如果这些问题是一个组织当前最大的痛点，技术栈管理平台的实施也可以从测试工位开始入手，为整个组织打下坚实的质量保障基础。测试和开发的技术骨干可以一同选择适宜的自动化测试工具，将其连接配置好，准备好自动化测试的脚手架，打包到技术栈的验证运行时中。测试人员只需按照业务需求编写自动化测试例，并放在技术栈中规定的“验证门”环节自动执行。当系统最重要的功能都能被自动化测试覆盖，测试人员就能从繁重的手工回归测试中解脱。</p>
<p>自动化测试需要可靠且可复制的测试环境来执行，这正是云计算的优势所在。在技术栈管理PaaS中定义了测试运行时环境后，每当测试人员或自动化的验证门要执行自动化测试例时，就会从云中取出一个测试运行时，其中除了被测系统的依赖软件外，还包含了配置好的各种测试工具。被测系统会被加载到测试运行时环境中，执行自动化测试例，收集测试报告，然后测试运行时环境就会被销毁回收。整个过程中不需要测试人员手工管理测试环境，也不需要与其他测试或开发人员共用一套环境。</p>
<p>一旦测试人员不用“人肉回归”大部分软件功能，他们就可以把更多的精力投入非功能性测试。性能测试、安全性测试等非功能性测试所需的工具集同样可以被内建在技术栈中，方便测试人员日常工作。同时，测试人员还可以把非功能性测试编写成自动化的测试例，将其加入验证门的测试集，从而使非功能性需求也持续得到保障，以免在项目晚期才发现重大性能或安全问题。</p>
<p><img src="/assets/2017/4/22/test-impl.png"></p>
<p>当云测试平台建立起来，有了基本的自动化测试覆盖，测试人员就可以起到质量监督和建议的作用，而不是跟在开发后面做简单重复的手工验证。由于软件产品必须在验证运行时上通过测试，研发管理者就可以借此拉动开发团队使用云测试平台进行自验证，在习惯养成后再逐步在开发过程中推广使用构建运行时，从而用一个技术栈拉通开发和测试的工作环境。</p>
<h2 id="从运维切入，构建高响应运维能力"><a href="#从运维切入，构建高响应运维能力" class="headerlink" title="从运维切入，构建高响应运维能力"></a>从运维切入，构建高响应运维能力</h2><p>同样，数字化、互联网化的大背景也对运维团队提出了新的挑战。从业务客户的角度，他们不仅希望自己的需求能尽快上线被用户使用，而且还希望及时获得来自用户的反馈，帮助他们做出调整。在一些领先的企业，运维更是能支持业务客户针对真实用户进行快速的受控实验，从而验证自己的业务假设。在这些新的要求下，很多IT组织的运维团队暴露出了能力上的不足：</p>
<ul>
<li>运维自动化程度低，需要大量手工操作，工作量大，可靠性低，容易出错。</li>
<li>系统监控不完备，出现故障时不能及时发现和快速排错。</li>
<li>生产系统的信息不能快速转换成业务洞见，无法支持频繁的线上受控实验。</li>
</ul>
<p>技术栈管理平台的实施同样可以从运维工位入手，以打造高效的DevOps体系为优先目标。</p>
<blockquote>
<p><strong>你说的是哪种DevOps？</strong></p>
<p>由于历史原因，如今大家在谈起“<a href="https://en.wikipedia.org/wiki/DevOps" target="_blank" rel="external">DevOps</a>”这个词时，其中包含的可能是三重相关但不同的含义：</p>
<ol>
<li>如何借助基础设施即服务、运维自动化等手段，加快代码部署到生产环境的速度。</li>
<li>如何借助日志和监控手段，及时把生产环境的情况反馈到开发团队。</li>
<li>如何借助端到端的埋点、数据采集、分析和可视化，把用户行为反馈到业务。</li>
</ol>
</blockquote>
<p>以运维视角优先切入时，技术栈的建设就自然地偏向运维工具。在支持计算资源弹性分配的IaaS层（例如基于<a href="http://scaleworks.cn/" target="_blank" rel="external">ScaleWorks</a>的私有云）之上，将自动化配置管理工具（例如Chef、Puppet、Ansible）及其他常用的运维工具打包在应用运行时中，运维人员可以随时从技术栈管理的PaaS服务中获得完整且配置好的应用运行时，再从通过了测试验证（可能是手工验证）的发布候选版本中选择一个放入应用运行时，即可快速完成应用的部署上线。生产环境的配置以代码形式记录，可以由技术能力较强的DevOps团队专门维护，从而省去了大多数运维人员手动管理运行时环境的工作量与风险。</p>
<p>在应用运行时环境中，可以根据软件系统的特征预先配置好日志工具（例如ELK、Splunk）和服务指标监控工具（例如Collectd），使开发团队无需额外工作就能获得丰富有用的生产环境信息。一些水平更高的团队会在应用运行时环境中设置更智能化的运维功能（例如基于Hystrix的服务熔断机制），使运维更具响应力。</p>
<p>应用运行时环境中还可以植入端到端<a href="https://martinfowler.com/bliki/SyntheticMonitoring.html" target="_blank" rel="external">综合语义监控</a>所需的工具设置，从而支持对业务场景埋点和分析，甚至是结合<a href="http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/" target="_blank" rel="external">流量路由技术</a>进行受控实验，用数据为业务决策提供支撑。业务有了缩短反馈周期的诉求，运维有了快速响应变化的能力，两端夹击可以倒逼研发环节提升响应力、缩短交付周期，这也是研发组织变革的一个套路。</p>
<p><img src="/assets/2017/4/22/op-impl.png"></p>
<p>运维工位采用技术栈管理平台以后，研发管理者可以从交付物入手倒逼开发和测试环节，要求通过测试的发布候选版本以容器镜像的形式交付，以保证上线效率和可靠性；同时提供基于技术栈管理PaaS的构建和镜像版本管理基础设施，方便开发和测试团队构建符合要求的交付物。等开发和测试团队养成基于云和容器环境的交付方式，就可以逐步实施云测试平台和基于技术栈的开发底座。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>技术栈管理平台的目标是为现代IT组织创造云环境下的精益软件生产流水线。但对于很多组织而言，这条流水线并非一步到位，而是一个分阶段建设的过程。在这条流水线上，开发-测试-运维三个核心工位都可以成为实施技术栈管理的切入点。从组织当前最显著的痛点出发，选择一个工位开始实施云化的技术栈管理平台，并依循<a href="https://en.wikipedia.org/wiki/Theory_of_constraints" target="_blank" rel="external">瓶颈理论</a>拉动其他工位的逐步改进，这对于众多不以IT能力见长的组织而言，是一条可行的云化、数字化道路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2017/4/14/stack-management-implementation/&quot;&gt;前文&lt;/a&gt;讲到，在云计算的时代大背景下，我们推荐采用研发技术栈管理平台来集中管理组织中的技术栈，允许基于一个技术栈创建开发测试PaaS和生产PaaS两个PaaS服务
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>沃尔玛的数字化平台分析</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/19/walmart-digitization/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/19/walmart-digitization/</id>
    <published>2017-04-19T05:01:00.000Z</published>
    <updated>2017-04-18T13:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>尽管2009年就已上线了电商平台Marketplace，但直到2011年，沃尔玛在数字化领域也不能算成功者。当时他们的电商网站只有相当基本的功能，用户体验不算方便，搜索不太好用，也不能与店面或供应链无缝对接。之前的几年，沃尔玛的电商收入跟其他零售商（例如西尔斯、梅西）一样缓慢线性增长。正因为如此，当沃尔玛的电商收入在2011年至2014年的三年间增长150%、从年销量49亿美元增长到122亿美元、超过史泰博（Staples）成为亚马逊和苹果之后美国第三大在线零售商时，这一变化才更令人好奇。</p>
<p><img src="/assets/2017/4/19/wal-mart.jpg"></p>
<h2 id="数字化之旅"><a href="#数字化之旅" class="headerlink" title="数字化之旅"></a>数字化之旅</h2><p>沃尔玛的全球电商部门主要有三方面的责任与行动：</p>
<ol>
<li>运营沃尔玛全球10个网站，在线提供超过700万种SKU，无缝连接门店与仓库，给顾客提供多种购物选择。</li>
<li>通过@WalmartLabs这个创新孵化器，不断更新网站和移动应用，利用顾客数据和社交网络洞察预测顾客行为，给顾客提供更好的在线和在店购物体验。</li>
<li>对内打造沃尔玛的电商能力，在全美国建设线上业务服务中心，建设新的电商操作系统Pangaea。</li>
</ol>
<p>为了达到这些目标，沃尔玛在几年中收购了多家IT企业，光是作为创新引擎的@WalmartLabs就收购了14支科技团队，为整个企业的数字化转型提供了能力上和文化上的支撑。2013年，沃尔玛收购了提供云计算解决方案的<a href="http://oneops.com/" target="_blank" rel="external">OneOps</a>公司。该公司拥有成熟的PaaS和私有云IaaS能力，支持多种公有和私有云平台，包括Azure、Rackspace、AWS、OpenStack等，与沃尔玛的云化、服务化趋势相符。到2016年，沃尔玛全公司有超过3000名工程师基于OneOps平台开发和管理IT系统。</p>
<p>在电商销量猛增的过程中，沃尔玛的IT系统遭遇了性能瓶颈，这也是他们开始将IT系统服务化的重要出发点。他们希望“系统拥有足够的弹性去处理峰值，同时不产生负面的用户体验”。事实证明，微服务架构带来的效果是明显的：</p>
<ul>
<li>销售提升：转化率在一夜之间提升了20%，移动端的订单立即增长了98%；</li>
<li>可靠性提升：黑色星期五或节礼日等大型购物节期间，再没有出现过宕机；</li>
<li>运维成本降低：将昂贵的硬件换成了便宜的X86服务器，节省了40%的计算资源，总成本下降了20-50%。</li>
</ul>
<p>沃尔玛还把自己的数字化能力提供给自己的供应商。2014年，他们上线了自己的广告平台Walmart Exchange（WMX），用自己门店和线上电商的数据帮助供应商更有效地投放广告（包括沃尔玛网站、第三方网站和邮件广告）。</p>
<h2 id="数字平台战略视角分析"><a href="#数字平台战略视角分析" class="headerlink" title="数字平台战略视角分析"></a>数字平台战略视角分析</h2><p>从<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>的角度分析，沃尔玛在构建自己的数字平台能力支柱方面已经取得了令人瞩目的成绩，这也是其电商销量能大幅提升的重要原因。</p>
<h3 id="交付基础设施"><a href="#交付基础设施" class="headerlink" title="交付基础设施"></a>交付基础设施</h3><ul>
<li>通过将业务系统改造为大量、小规模、无状态的服务，使系统可以部署到廉价服务器的集群上。同时弹性基础设施也允许随需增减计算节点。</li>
<li>没有应用服务器。所有服务以standalone的形式通过docker部署。</li>
<li>全面的监控机制（使用ConductR），当服务失败时能自动响应，并提供排错所需的信息。在集群层面汇集日志，避免需要分别查看每个节点的日志。</li>
<li>Akka可以把一个交易建模为一个有穷状态机，可以在中途持久化状态，可以取回状态，提供了一种错误恢复的机制。</li>
<li>Akka的监控（supervisor）机制类似于Erlang：“let-it-crash”，不需要假设虚拟机或计算节点可靠。</li>
</ul>
<h3 id="API和架构治理"><a href="#API和架构治理" class="headerlink" title="API和架构治理"></a>API和架构治理</h3><ul>
<li>用Play实现API Gateway，以RESTful API的形式为其背后的系统提供统一的入口。</li>
<li>原来的大块系统按照业务领域划分为小块，团队也随之划分，例如搜索团队、商品团队等等。每个bounded context有它自己的词汇表、拥有自己的数据。</li>
<li>服务切分不仅仅是IT系统的事，而是组织、代码、数据库三个层面的重构。一开始不先直接做“硬”的切分，而是先从逻辑上做划分（例如数据库的schema命名规则、代码的包），然后检查是否有循环依赖；等依赖关系逐渐理清了，再分解成独立的服务、独立的数据库、甚至NoSQL数据库。</li>
<li>解决性能问题的主要方式是通过异步操作（使用Akka）：把数据库写操作异步化，从而减少对JVM线程的占用，并且使能并行处理，极大地提升系统的性能和可扩展性。</li>
</ul>
<h3 id="数据自服务"><a href="#数据自服务" class="headerlink" title="数据自服务"></a>数据自服务</h3><ul>
<li>因为数据量太大，必须改变ETL、数据预处理的思路，对数据做真正意义上的实时处理（使用Akka Streams）。</li>
<li>用Spark对数据进行单件流处理，数据处理的延迟由6小时（ETL过程）缩短到10秒。</li>
</ul>
<p>数据方面的架构如图：</p>
<p><img src="/assets/2017/4/19/data-arch.png"></p>
<h3 id="创新实验基础设施"><a href="#创新实验基础设施" class="headerlink" title="创新实验基础设施"></a>创新实验基础设施</h3><ul>
<li>组织层面上，@WalmartLabs是一个创新的孵化器机制。</li>
<li>技术层面上，OneOps提供了路由技术和监控能力，使在线的快速实验成为可能。</li>
<li>WMX能统一收集和利用各种渠道（门店和电商）的用户数据。</li>
</ul>
<h3 id="客户触点技术"><a href="#客户触点技术" class="headerlink" title="客户触点技术"></a>客户触点技术</h3><ul>
<li>@WalmartLabs对整个组织输出全渠道、移动、响应式设计等能力。</li>
<li>沃尔玛的电商平台支持多种客户触点（电脑、移动）。Walmart.com在美国的流量超过一半来自移动设备，Walmart Pay应用部署到4600多家门店。</li>
<li>使用大数据（购买行为、搜索历史等）个性化顾客的交互体验。个性化搜索引擎Polaris提升了20%在线销售转化率。</li>
<li>WMX支持单一顾客视图，形成对顾客的全面理解。</li>
</ul>
<h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><ul>
<li><a href="https://www.applicoinc.com/blog/walmart-jet-digital-transformation/" target="_blank" rel="external">电商平台的介绍</a></li>
<li><a href="https://rctom.hbs.org/submission/digitization-at-walmart/" target="_blank" rel="external">业务数字化整体介绍</a></li>
<li><a href="https://www.capgemini-consulting.com/resource-file-access/resource/pdf/walmart_pov_15_7_2015.pdf" target="_blank" rel="external">另一篇业务数字化整体介绍</a></li>
<li><a href="https://risnews.com/walmart-boosts-efficiency-digital-media-platform" target="_blank" rel="external">关于WMX的报道</a></li>
<li><a href="grumomedia.com/walmart-exchange-wmx/">介绍WMX的视频</a></li>
<li><a href="https://digit.hbs.org/submission/walmart-exchange-using-data-to-go-from-retail-to-media/" target="_blank" rel="external">WMX的分析</a></li>
<li><a href="https://www.youtube.com/watch?v=SPGCdziXlHU" target="_blank" rel="external">关于微服务架构转型的演讲</a></li>
<li><a href="https://techcrunch.com/2016/01/26/walmart-launches-oneops-an-open-source-cloud-and-application-lifecycle-management-platform/" target="_blank" rel="external">关于收购OneOps的报道</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管2009年就已上线了电商平台Marketplace，但直到2011年，沃尔玛在数字化领域也不能算成功者。当时他们的电商网站只有相当基本的功能，用户体验不算方便，搜索不太好用，也不能与店面或供应链无缝对接。之前的几年，沃尔玛的电商收入跟其他零售商（例如西尔斯、梅西）一样缓
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术栈管理：云时代的研发环境</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/14/stack-management-implementation/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/14/stack-management-implementation/</id>
    <published>2017-04-14T05:01:00.000Z</published>
    <updated>2017-04-13T15:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2017/3/31/stack-management">前文</a>介绍了云计算大背景对研发环境的影响。我们已经指出，现代IT组织应该把研发技术栈以PaaS的形式提供给开发人员，其中的要点是：</p>
<ul>
<li>将标准的研发环境封装为虚拟化、云化的技术栈，由技术专家管理维护；</li>
<li>核心业务价值与技术支撑解耦，工程师专注于业务系统的开发；</li>
<li>自动化研发流程，降低研发管理成本。</li>
</ul>
<p><img src="/assets/2017/4/13/hearty_cloud-wide.jpg"></p>
<p>如何实现这样一个研发技术栈管理的平台？我们的观点是，这样<strong>一个平台</strong>应该集中管理组织中的技术栈，允许基于一个技术栈创建开发测试PaaS和生产PaaS<strong>两个PaaS服务</strong>，从而支撑开发、测试、生产<strong>三种运行时环境</strong>。</p>
<h2 id="一个平台"><a href="#一个平台" class="headerlink" title="一个平台"></a>一个平台</h2><p>在一个典型的敏捷软件开发场景（例如更具体的“用Java开发微服务”的场景）中，开发者需要频繁地用到下列工具：</p>
<ul>
<li>编程框架，提供基础的结构与功能来支撑业务逻辑代码，例如Spring Boot和Jersey。</li>
<li>版本控制工具，例如git。</li>
<li>依赖软件，例如PostgreSQL数据库。</li>
<li>自动测试工具，包括单元测试工具（TestNG）和功能测试工具（Concordion、Selenium）。</li>
<li>自动构建工具，Maven或Gradle。</li>
<li>持续集成工具，Jenkins或GoCD。</li>
</ul>
<p>所有这些工具以及它们适当的组合与配置，我们把它称为一个<strong>技术栈</strong>。我们上面的例子就是“Java微服务开发技术栈”，类似的，一个组织中还可以有“Java Web应用开发技术栈”、“H5前端开发技术栈”、“ReactNative移动应用开发技术栈”等等若干个技术栈。对于一般的IT组织而言，有限的几种技术栈就可以覆盖大部分软件项目的形态。体量大如有数万研发员工的某IT巨头，提出的主要技术栈也只有十余种。</p>
<p>在传统的软件开发团队中，技术栈的组合与配置是<a href="http://insights.thoughtworkers.org/thoughtworks-practice-part8/" target="_blank" rel="external">由团队的技术领导者负责</a>的。在云计算的大背景下，将<a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code" target="_blank" rel="external">基础设施作为源代码</a>的思想再往前推一步，我们就会很自然地得出<strong>技术栈作为源代码</strong>的想法：使用Docker和Ansible等技术，将技术栈的结构以源代码的形式描述。在“基础设施作为源代码”的阶段我们已经知道，以源代码形式管理环境会带来很多好处，例如更高的自动化程度、允许版本控制等。把技术栈作为源代码以后，会带来几个重要的收益：</p>
<ol>
<li>技术栈可以很容易地复用，因此可以把搭建技术栈的工作收拢到较少数技术领导者手中，研发团队则只需在技术栈基础上开发业务功能，降低了研发团队的技能门槛。</li>
<li>最佳实践可以被内嵌到技术栈中，并通过持续集成的形式对研发团队形成约束，从而使研发改进举措更容易推行。</li>
<li>缩短研发实践的实验和创新周期，可以对多个研发团队开展受控对比实验，团队中自发产生的优秀实践可以被快速抽取并固化到技术栈中。</li>
</ol>
<p>技术栈管理平台作为组织级的研发管理载体，承载的是组织对研发团队的引领和治理形式。在这个平台上，技术领导者会创建并维护技术栈，项目团队则可以根据自己的需要选择适合的技术栈，跳过大部分<a href="http://peterschuh.com/?p=129" target="_blank" rel="external">迭代0的技术准备工作</a>，直接进入功能开发，并在整个产品生命周期中享受云化开发环境带来的收益。</p>
<p><img src="/assets/2017/4/13/stacks.png"></p>
<h2 id="两个PaaS"><a href="#两个PaaS" class="headerlink" title="两个PaaS"></a>两个PaaS</h2><p>基于已经定义好的技术栈，当项目团队开始研发工作时，技术栈管理平台可以为他们创建两个PaaS服务：一个是研发过程中使用的开发测试PaaS，另一个是真实上线用的生产PaaS。两个PaaS的协作关系如下：</p>
<p><img src="/assets/2017/4/13/two-paas.png"></p>
<ul>
<li>开发人员从开发测试PaaS中获得一个开发环境，在这个环境中编写代码；</li>
<li>新编写的代码被提交到代码库中，后台的服务自动运行“提交门”测试，测试通过后，把代码构建成可运行应用；</li>
<li>后台服务针对可运行应用自动运行“验证门”测试，测试通过后，这个版本的可运行应用即被标记为可发布应用，并被存入构建产物仓库；</li>
<li>测试人员针对通过了“验证门”测试的可发布应用进行必要的手工验证；</li>
<li>生产环境与开发/测试环境基于同一个技术栈（运行时环境上有具体的差别），开发测试PaaS中构建出的可运行应用可以直接部署到生产环境；</li>
<li>随不同组织的发布流程不同，构建产物仓库中的可发布应用可能直接（自动或手动）发布到生产环境，也可能被同步到生产PaaS的产品仓库，以后再手动发布到生产环境。</li>
</ul>
<p>可以注意到，这个流程、尤其是在开发测试PaaS中发生的流程，与Dave Farley在《<a href="http://www.infoq.com/cn/minibooks/thoughtworks-anthology" target="_blank" rel="external">一键发布</a>》文中介绍的持续集成流水线非常相似。我们相信：持续集成对于现代软件开发是如此重要，以至于它不应该以独立的工具形式存在（因为这样人们就有可能不用或者误用）。持续集成应该被内建在软件开发的工具和过程中，使它不被开发者注意、同时又不能被绕开——正如Spring内建了面向接口编程、IntelliJ IDEA内建了编译和代码格式检查。</p>
<h2 id="三个运行时环境"><a href="#三个运行时环境" class="headerlink" title="三个运行时环境"></a>三个运行时环境</h2><p>前面介绍的流水线已经暗示，在整个软件交付周期中，存在三个不同的运行时环境。这三个运行时环境都有同样的基础，例如操作系统、依赖软件等。同时它们也有一些重要的差异：</p>
<ol>
<li>构建运行时：包含开发工具、构建工具和（可能是部分）测试工具，这是开发人员编写代码的主要环境——需要注意，“编写代码”在敏捷软件开发的上下文中意味着“编写代码并频繁进行提交门测试”，这是为什么这个运行时环境中必须包含（至少部分）测试工具。</li>
<li>验证运行时：包含全部测试工具及其他质量保障工具，这是对软件质量进行全面验证的主要环境。</li>
<li>应用运行时：包含运维工具，这是软件真正运行的环境。这个运行时可能被应用于生产环境，也可能仅用在组织内部（例如UAT测试环境、培训环境、demo环境等）。这个运行时中的依赖软件（尤其是数据库）也有可能被替换为环境之外独立运行的软件。</li>
</ol>
<p><img src="/assets/2017/4/13/three-runtimes.png"></p>
<p>尽管为了支持不同环节的工作要求而有这些差异的存在，底线是：构建运行时构建出来的可运行应用，可以在验证运行时中接受完整的验证，也可以被部署到应用运行时正常运行。这与持续交付中“<a href="https://highops.com/insights/continuous-delivery-pipelines-gocd-vs-jenkins/" target="_blank" rel="external">制成件流过整个流水线</a>”（而非在各个构建步骤中分别生成制成件）的理念是一致的。</p>
<blockquote>
<p><strong>制成件的形式</strong></p>
<p>在<a href="/2017/3/31/stack-management">前文</a>中我们已经提到：软件包是一种对云环境不友好的交付形式，理想的研发交付物应该是容器镜像（很可能是一组彼此连接的容器镜像），可以在云上直接运行。Docker等容器技术使我们可以把所有软件（不论背后使用什么编程语言、实现什么功能）都抽象为“IP地址+端口”的服务；再加上例如Docker Swarm或Kubernetes之类集群工具的支持，更可以把服务进一步简化为一个端口。于是，技术栈管理的基础设施可以得到更大程度的复用：不同的技术栈（不管编程平台是Java、NodeJS还是Python）构建出的应用都是一个（或一组）Docker镜像，从而将“产物的形态”与“生产流程的结构”解耦。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>针对<a href="/2017/3/31/stack-management">前文</a>提出的云计算大背景下对软件研发提出的挑战，本文提议了一种解决方案：技术栈管理平台。通过实施技术栈管理平台，为研发团队提供开发测试PaaS和生产PaaS两个PaaS服务、构建/验证/应用三个运行时环境，研发组织能够将技术栈的搭建和管理与业务系统的研发解耦，从而降低研发团队技能门槛、快速有效地推广研发最佳实践、使研发过程中的技术与流程实验和创新成为可能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2017/3/31/stack-management&quot;&gt;前文&lt;/a&gt;介绍了云计算大背景对研发环境的影响。我们已经指出，现代IT组织应该把研发技术栈以PaaS的形式提供给开发人员，其中的要点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将标准的研发环境封装为虚拟化、云化
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云时代的研发环境长什么样？</title>
    <link href="http://gigix.thoughtworkers.org/2017/3/31/stack-management/"/>
    <id>http://gigix.thoughtworkers.org/2017/3/31/stack-management/</id>
    <published>2017-03-31T05:01:00.000Z</published>
    <updated>2017-03-30T15:29:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>云计算正在毫无疑问地成为企业IT的主流。据<a href="http://www.mckinsey.com/industries/high-tech/our-insights/it-as-a-service-from-build-to-consume" target="_blank" rel="external">麦肯锡调查</a>，六成以上的企业计划在两年内将某种形式的云作为主要IT平台。在国内银行业，<a href="http://www.cbrc.gov.cn/chinese/home/docView/1940BD4B2D7740CC90F4FE4C6B3CD316.html" target="_blank" rel="external">中国银行业信息科技“十三五”发展规划监管指导意见</a>中明确提出：到2020年，国内银行业面向互联网场景的重要信息系统应全部迁移至云计算架构平台，其他系统迁移比例不低于60%。其他行业也有同样的趋势。信息系统云化的大背景给软件系统的研发流程带来了什么挑战，作为软件研发组织的领导者应该如何应对这些挑战？这是本文试图回答的问题。</p>
<p><img src="/assets/2017/3/31/cloud_challenge.png"></p>
<p>首先，有必要回顾云计算给企业IT带来的收益。<a href="https://www.ibm.com/cloud-computing/learn-more/benefits-of-cloud-computing/" target="_blank" rel="external">IBM认为</a>云计算有三大优势：</p>
<ol>
<li>更灵活。用户可以根据需要，“弹性地”获得IT服务。</li>
<li>更高效。减少IT团队管理和维护底层基础设施的工作量，IT服务可以更快推向市场。</li>
<li>战略价值。通过灵活组合现有IT资产与新兴数字渠道，支撑企业业务创新。</li>
</ol>
<blockquote>
<p><strong>云计算与虚拟化的区别</strong></p>
<p>有很多企业已经采用了虚拟化技术：将企业的计算资源（服务器、存储等）集中管理，以虚拟机的形式分配给使用者。<a href="http://www.businessnewsdaily.com/5791-virtualization-vs-cloud-computing.html" target="_blank" rel="external">虚拟化与云计算的区别</a>在于：虚拟化是指“用软件管理硬件资源”，而云计算是指以虚拟化方式管理硬件资源之后能够对外提供的服务。</p>
<p>除去这个概念上的差异，我们注意到一些企业在谈论“虚拟化”的时候，背后隐含着一个自动化程度不高的、需要人工参与的虚拟机申请和开通的流程。在这样的流程下，获得一台虚拟主机需要的时间通常以天计。因此，虚拟机的使用者倾向于预先申请虚拟主机并长期占用。在这种情况下，“虚拟化”往往意味着缺乏弹性（elasticity）的计算资源分配——尽管虚拟化技术本身并不妨碍弹性。</p>
</blockquote>
<p>可以看出，为了兑现云计算的三大优势，企业IT系统必须云化：软件的形态由从前需要在本地安装的软件包，转变为透过网络在线使用的服务，让使用者随时能够获得；原来体型巨大的单体（monolithic）应用，需要转变为细粒度的服务，从而支持灵活的组合与复用。</p>
<p>原来习惯了开发本地安装的软件包和/或巨大的单体应用的研发团队，现在要转为开发云化的软件服务，这个转变并非总是无痛的。首先，研发交付物的形态应该是对云环境友好的。从前研发交付物通常是以软件包的形式提供给用户或是运维团队，例如平台特定的JAR、WAR、EGG等软件包，或是RPM、DEB、MSI等操作系统特定的软件包。软件包是一种对云环境不友好的交付形式，因为它没有包含软件运行的环境。例如一个软件需要用到PostgreSQL数据库和monit作为监控工具，平台特定的软件包无法确保这些软件依赖的存在；某些操作系统特定的软件包可以描述软件依赖，但也无法确保依赖软件被正确地配置。过去一段时间里，自动化的配置工具（例如Chef/Puppet/Ansible）被用于解决运行时环境的问题。而在今天的技术背景下，理想的研发交付物应该是容器镜像（很可能是一组彼此连接的容器镜像），可以在云上直接运行。</p>
<p>对研发交付物的要求随即会影响到研发过程。为了在研发流程的出口得到服务化友好的交付物，最好是在整个开发过程中一直使用与生产环境近似的环境。例如开发人员应该使用全套环境随时验证，自动化测试和手工测试都基于全套环境开展。在这种情况下，环境的设置、管理、更新不可能由每个开发人员和测试人员自己进行，所以环境的管理更新必定是集中进行的，环境的设置必定是自动化的。而且，如果环境固定分配、长期使用，对计算资源的占用可能很大，所以环境应该是云化的、弹性的、按需获得的。</p>
<p>云计算的大背景还会影响研发实践。为了降低搭建研发环境的技术难度，云化的研发环境应该内建研发工具链（包含开发工具、质量保障工具、持续集成/持续交付工具、DevOps工具、项目管理工具等）。为了规范团队研发质量水平，良好的研发实践（例如代码静态检查、自动化测试等）和流程要求应该固化在工具的日常操作中。理想的情况下，研发团队应该只聚焦关注业务功能开发。开发工具的组合、生产环境的配置、持续集成和持续交付流水线的搭建等工作都应该被标准化和自动化。</p>
<p>综上所述，在云计算的大背景下，IT组织需要将更多的软件应用部署在云上。云化的IT系统对软件研发的交付物、研发过程、研发实践都提出了新的要求。我们认为：现代IT组织应该从研发环节开始，以原生支持云计算的方式提供、管理和维护研发环境，从而在研发过程中利用云环境的弹性，确保研发交付物对云环境友好，并把优秀的研发实践和流程要求内嵌到研发环境之中。IT组织可以通过以下方式管理其研发环境：</p>
<ul>
<li>将标准的研发环境封装为虚拟化、云化的技术栈，由技术专家管理维护；</li>
<li>核心业务价值与技术支撑解耦，工程师专注于业务系统的开发；</li>
<li>自动化研发流程，降低研发管理成本。</li>
</ul>
<p>在下一篇文章里，我将介绍如何具体实现技术栈的云化管理，把研发技术栈以PaaS的形式提供给开发人员。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云计算正在毫无疑问地成为企业IT的主流。据&lt;a href=&quot;http://www.mckinsey.com/industries/high-tech/our-insights/it-as-a-service-from-build-to-consume&quot; target=&quot;_b
    
    </summary>
    
    
  </entry>
  
</feed>
