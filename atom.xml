<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>透明思考</title>
  <subtitle>Transparent Thoughts</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gigix.thoughtworkers.org/"/>
  <updated>2017-06-05T15:57:32.000Z</updated>
  <id>http://gigix.thoughtworkers.org/</id>
  
  <author>
    <name>Jeff Xiong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>持续交付2.0：云原生持续交付</title>
    <link href="http://gigix.thoughtworkers.org/2017/6/6/continuous-delivery-2/"/>
    <id>http://gigix.thoughtworkers.org/2017/6/6/continuous-delivery-2/</id>
    <published>2017-06-06T05:01:00.000Z</published>
    <updated>2017-06-05T15:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>《<a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">持续交付</a>》提出了一系列贯穿整个软件交付生命周期的最佳实践。但它成书的年代（2010年）云计算尚未得到广泛应用，尤其在软件开发过程中的应用非常有限。如果站在今天的技术水平和对云计算的理解水平基础上回顾《持续交付》的内容，我们有可能提出一组全新的、原生于云环境的持续交付实践。</p>
<p><img src="/assets/2017/6/6/cd.png"></p>
<h2 id="软件发布的反模式"><a href="#软件发布的反模式" class="headerlink" title="软件发布的反模式"></a>软件发布的反模式</h2><p>《持续交付》中列举了软件发布过程中的一些反模式，这些在行业中常见的不佳实践使软件发布过程容易出错，使软件发布的风险和压力增大。这些与可靠的发布过程相对应的常见的反模式包括：</p>
<ul>
<li><strong>手工部署软件</strong>。靠详尽的发布文档来描述发布步骤及每个步骤中易出错的地方，靠手工测试来确认发布后的应用程序是否运行正确。不自动化的部署过程既不可重复也不可靠，会在调试部署错误的过程中浪费很多时间。</li>
<li><strong>开发完成之后才向类生产环境部署</strong>。开发团队认为“开发完成了”，才第一次把软件部署到类生产环境（比如试运行环境）。假如应用程序是全新开发的，第一次将它部署到试运行环境时可能会非常棘手。</li>
<li><strong>生产环境的手工配置管理</strong>。通过专门的运维团队来管理生产环境的配置，如果需要修改一些东西，就由这个团队登录到生产服务器上进行手工修改。经常导致部署到生产环境时就失败，尽管多次部署到试运行环境都非常成功。</li>
</ul>
<p>在云计算的背景下，我们可以看得更远一步：这些反模式如果在今天的研发团队中仍然出现，背后反映的是这支研发团队还不会利用云计算提供给他们的便利能力。</p>
<ul>
<li><strong>手工部署软件 =&gt; 软件发布形态和流程不标准</strong>。因为软件的发布形态多种多样（JAR、WAR、RPM、DEB……），因为软件的功能与配置不解耦，所以才会需要手工部署。而发布形态和发布流程的不标准，背后的原因是计算资源稀缺，需要复用服务器。</li>
<li><strong>部署到类生产环境太晚 =&gt; 开发环境与生产环境不统一</strong>。因为开发和测试用的环境与生产环境有很大差异，才会出现部署到类生产环境时的种种困难。开发环境与生产环境的不统一，背后的原因也是计算资源稀缺，生产环境昂贵，无法做到随需可得。</li>
<li><strong>生产环境手工配置管理 =&gt; 环境管理情况复杂</strong>。因为环境需要长期使用且不断升级，才有了对环境进行管理的需求。环境需要长期使用和升级，背后的原因是计算资源缺乏弹性，不需要的时候不能随意丢弃。</li>
</ul>
<p>对于这些反模式，《持续交付》提出的解决办法是“将几乎所有事情自动化”。但在当时的技术水平下，由于软件发布的形态和流程不标准、开发/测试环境和生产环境不统一、环境管理情况复杂，“将发布流程自动化”在每个团队的具体做法都不同，因此持续交付的水平高度依赖于团队的能力与觉悟。《持续交付》也只能苦口婆心地劝说“如果需要执行这个流程数十次的话，就不是那么容易的事了”，而且“不需要把所有的东西一次性地全部自动化……随着时间的推移，最终你可以、也应该将所有环节全部自动化”。</p>
<p>但如果在软件的开发过程中充分利用云计算的弹性能力，这些反模式有可能被根除，而不必由每个开发团队重复地尝试通过自动化来缓解。</p>
<h2 id="部署流水线"><a href="#部署流水线" class="headerlink" title="部署流水线"></a>部署流水线</h2><p>《持续交付》提出了“部署流水线”的概念（如下图）。“随着某个构建逐步通过每个测试阶段，我们对它的信心也在不断提高。当然，我们在每个阶段上花在环境方面的资源也在不断增加，即越往后的阶段，其环境与生产环境越相似。”</p>
<p><img src="/assets/2017/6/6/pipeline.jpg"></p>
<p>在充分利用了云计算的情况下，部署流水线会有两方面的改变：</p>
<ol>
<li>不存在“所用环境与生产环境的相似度增加”的情况，从提交阶段开始（甚至在此之前的开发阶段），所有环境都与生产环境是一致的。</li>
<li>由于不需要根据项目拥有的计算资源来定制各个环境与生产环境的相似度，这个部署流水线不再是一个需要由开发团队来实现的概念模型。部署流水线可以是标准的、一致的，开发团队只需要定义自己这个软件的生产环境即可。</li>
</ol>
<p>《持续交付》中提倡整个部署流水线“只生成一次二进制包”，并且在各个验证步骤之间传递二进制包。只生成一次二进制包的实践是非常必要的，因为“出于审计的目的，确保从二进制包的创建到发布之间不会因失误或恶意攻击而引入任何变化是非常关键的”。但实际的项目中经常出现二进制包非常庞大、在各个步骤（及各个环境）之间传递二进制包很费时的情况，这也是导致一些项目最终仍然退回到每个步骤重新构建二进制包的原因：增量的编译和构建可能比通过网络传递整个二进制包还省时。</p>
<p>如果构建的产物是容器镜像，所有运行时环境都从云上获得，那么实际上不存在传递二进制包的过程。每个验证步骤都用指定版本的容器镜像搭配对应的配置，启动一个新的运行时环境后，在云上的运行时环境中执行（自动的或手工的）验证即可。</p>
<h2 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h2><p>尽管《持续交付》说“选择并安装好持续集成工具之后，只要再花几分钟的时间配置一下就可以工作了”，但实际上很少有哪个项目的持续集成实施会如此顺利。例如当“发现在运行持续集成工具的机器上缺少一些必需的软件和设置”时，《持续交付》提出的建议是“将接下来你所做的工作全部记录下来，并放在自己项目的知识共享库中……并将重建全新环境的整个活动变成一个自动化的过程”。实际上，这是一件需要高度技能水平和纪律性的事，拥有这两者的技术领导者（Tech Lead）很罕见，希望每个开发团队都有这样一名技术领导者坐镇是个奢侈的梦想。</p>
<p>而且，持续集成环境与开发环境仍然是有区别的，这个区别很可能是由于计算资源的限制。《持续交付》中说，“你可以很有把握地说：‘只要是在与持续集成一模一样的环境上，我的软件就可以工作。’”。然而问题就在于大多数情况下，开发环境与持续集成环境不是一模一样。这也是为什么持续集成必须集中式地进行，需要有“铃声和口哨”来及时发现构建失败，并且“要让持续集成能够发挥作用……整个开发团队就必须有高度的纪律性”。</p>
<p>在充分利用云计算的情况下，开发一类软件（例如“Java微服务”或“ReactNative移动应用”）所需的环境和部署流水线可以由少数几名优秀的技术领导者来标准化，开发团队不需要再操心如何配置一个持续集成环境的问题。</p>
<p>并且正如《<a href="/2017/5/24/ci-dying/">持续集成将死</a>》一文中所说，云的弹性能够使每个人、每次构建都使用标准的类生产环境，因此持续集成没有必要发生在一个中心化的“持续集成工具”上。由于持续集成的“集成”这个动作在代码进入团队代码库<strong>之前</strong>发生，很多的提醒和纪律变得不必要了：构建失败就不能提交代码，于是确保构建成功成了每个开发人员自己的事，不能把不成功的构建扔给团队去处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《&lt;a href=&quot;https://book.douban.com/subject/6862062/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;持续交付&lt;/a&gt;》提出了一系列贯穿整个软件交付生命周期的最佳实践。但它成书的年代（2010年）云计算尚未得到
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>持续集成将死</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/24/ci-dying/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/24/ci-dying/</id>
    <published>2017-05-24T05:04:00.000Z</published>
    <updated>2017-05-23T15:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在思考“<a href="/2017/3/31/stack-management/">云时代的研发环境长什么样</a>”这个问题的时候，我逐渐意识到一件很重要的事。2000年首次被提出、在过去十几年中我们习以为常的敏捷核心实践<a href="https://www.martinfowler.com/articles/continuousIntegration.html" target="_blank" rel="external">持续集成</a>，很可能正在走到它生命周期的尾声。</p>
<p><img src="/assets/2017/5/24/storm.jpg"></p>
<p>让我们来回顾一下Martin Fowler在他那篇<a href="http://article.yeeyan.org/view/2251/94882" target="_blank" rel="external">著名的文章</a>里如何描述持续集成这个过程：</p>
<blockquote>
<p>一旦完成了修改，我就会在自己的计算机上启动一个自动化build。……当我build成功后，我就可以考虑将改动提交到源码仓库。……然而，提交完代码不表示就完事大吉了。我们<strong>还要做一遍集成build，这次在集成计算机上并要基于mainline的代码</strong>。只有这次build成功了，我的修改才算告一段落。……在持续集成环境里，你必须尽可能快地修复每一个集成 build。好的团队应该每天都有多个成功的 build。错误的 build 可以出现，但必须尽快得到修复。</p>
</blockquote>
<p>从上面加粗的文字就能看出，过去的十多年里，在谈及持续集成这个实践时，我们已经预设了这个场景：有一个集中式的<strong>持续集成服务器</strong>在监听代码库的变化，每当有人提交代码时，持续集成服务器会自动取出最新的代码，执行整个构建和测试流程。围绕着这个场景，我们发展出了一整套的<a href="/2010/6/29/ci-discipline/">纪律</a>来保障持续集成少失败、失败的时候能尽快修复。围绕着这个场景，我们发明了CruiseControl、GoCD、SnapCI等一代又一代的持续集成服务器，并在我们所有的项目中使用它们。这个场景在我们的脑海中如此根深蒂固以至于我们不再去询问：为什么需要这样做？</p>
<p>实际上，我们需要一个集中式的持续集成服务器，这是有历史原因的。2000年代初期的技术时代背景，尤其是以下两个非常具体的约束条件，造成了今天我们看到的持续集成的形态：</p>
<ol>
<li><strong>计算资源短缺</strong>。这个约束条件决定了完整的、与生产环境相似的、能执行端到端验证的环境必定是稀缺品。典型的交付团队没有能力给每个成员配备整套环境，只能在他们各自的计算机上模拟一套尽可能接近于生产环境的开发环境。于是开发环境的验证结果不足为信，必须在一个标准的、更接近于生产环境的集成环境上通过验证，才能说软件达到了质量要求。</li>
<li><strong>版本控制工具的局限性</strong>。Subversion（以及其他更早的版本控制工具）在pre-commit阶段通过服务器端回调钩子很难——如果不是完全不可能的话——得到完整的“提交后版本”，因此svn的pre-commit钩子基本只能用于检查提交信息是否符合规范，完整的验证则必须在代码已经合入代码库之后才能——在一台独立的“持续集成服务器”上——进行。</li>
</ol>
<p>云计算彻底改变了第一个约束条件。计算资源仍然不能说极大丰富，但企业应用开发所需的x86架构计算资源在云环境下已经不再短缺，结合各种基础设施自动化和配置自动化的技术，随时、按需提供整套环境已经不是难题。而且使用docker等容器技术开通出来的环境是抛弃型的、不可变更的，因此也就不存在环境不一致、验证结果不可信的问题：每个开发人员都可以从云上拿出一套环境，执行build，其过程与效果都与持续集成服务器的build完全一致。</p>
<p>在过去的十多年里，持续集成之所以必须是一种“技能”、一门“手艺”，而不仅仅是一套工具的定制与实施，很大程度上正是由于计算资源短缺这个约束条件造成的。因为计算资源几乎总是短缺，所以每个团队、每个项目拥有的计算资源几乎总是有些这里那里的不同——这个项目可能有两套完整的测试环境，那个项目可能只有一套。这种资源的局限，逼迫每个项目的技术领导者们不得不根据手上能得到的环境，来微调持续集成的流水线乃至软件交付的流程。简言之，流程是依据环境来调整的。</p>
<p>当计算资源短缺的约束条件不再存在，在考虑构建流水线时就可以有一个根本的观念转变：可以制订一套标准的构建流水线，并要求计算环境向这套流水线对齐。这时，持续集成就可以不必是每个团队的技术领导者都掌握的“技能”和“手艺”，它完全可以在一个组织范围内定制和大规模实施。因为环境可以弹性地适配流程，我们就能够为相同类型的项目定义统一的最佳流程。</p>
<p>而git对svn的全面取代则带来一个细微而深远的影响：由于可以在pre-commit阶段直接获得完整的待提交快照、并在这个版本基础上执行测试，不能通过build的代码将直接被拒绝提交。换句话说，整个“持续集成纪律”尝试解决的问题——有缺陷的代码进入团队的代码仓库从而妨碍其他人不断提交没有缺陷的代码——将不复存在，有缺陷的代码将根本无法进入团队的代码仓库。</p>
<p>综上所述，这两个要素的结合：</p>
<ol>
<li>每个开发人员（以及自动构建）都可以在PaaS云上获得完整的技术栈运行时环境；以及，</li>
<li>pre-commit阶段可以对待提交的代码进行完整的构建</li>
</ol>
<p>带来的是一个非常重要的影响：持续集成服务器这个东西，我们不再需要了。持续集成的“集成”这个动作，将在代码进入团队代码库<strong>之前</strong>发生。我们有办法（git的pre-commit钩子）确保这次集成发生，也有办法（云化、容器化的环境）确保这次集成是可信的。因此我们不再需要一个持续集成服务器来扮演团队的守门人。集中式的持续集成服务器将退化为团队研发行为的可视化仪表盘：它不再负责管理环境和构建软件，只负责采集所有构建中产生的数据、并以适当的形式展示，作为团队研发过程的可视化呈现。</p>
<p>当持续集成服务器消亡，一个开发者的典型工作流程可能会是这样：</p>
<ul>
<li>从git仓库clone出代码，在自己的电脑上做修改；</li>
<li>修改完成，从研发PaaS上获得一个运行环境，把刚写好的代码运行起来，用浏览器查看一下效果；</li>
<li>执行构建，构建脚本自动从研发PaaS上获得一个运行环境，在其中执行编译、打包、代码检查和测试；</li>
<li>构建通过，提交代码并push，git仓库的pre-commit钩子自动触发一次构建，过程与效果都与刚才手动执行的完全一致；</li>
<li>如果没有手工执行构建就尝试提交，自动构建会失败，代码无法push到团队的代码仓库中，开发者自己去修复；</li>
<li>如果自动构建成功，代码提交完成，最新版本的代码被构建成容器镜像；</li>
<li>测试人员从研发PaaS上获得一个运行环境，把待测版本的容器镜像装载上去，执行测试，如果测试通过就将该版本标记为“发布候选”；</li>
<li>运维人员从生产PaaS上获得一个运行环境，把发布候选版本的容器镜像装载上去，即完成上线。</li>
</ul>
<p>这个流程直接地实现了《<a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">持续交付</a>》中描述的“两道门”结构。虽然每个项目运行的环境不同，但这个持续交付的结构可以是完全一致的，因为环境可以弹性地适配研发流程。</p>
<p><img src="/assets/2017/4/22/base.png"></p>
<p>与持续集成服务器同时消亡的，还有持续集成这个概念本身。由于对响应力（responsiveness）的要求是如此之高，现代的IT团队已经不能容忍有缺陷的代码先进入代码库、阻塞整个团队的工作、然后再来修复（甚至不修复、或者还需要说服某些团队成员去及时修复）。持续集成是如此重要，以致于它会变成团队的“空气和水”。它会被嵌入到日常的研发工具当中，成为程序员感知不到、而又不可妥协的质量要求——正如IntelliJ之类现代IDE把“通过编译”这项要求变成了程序员感知不到、而又不可妥协的质量要求。</p>
<blockquote>
<p>持续集成对于软件开发是如此重要，以至于不应该把它交给软件开发者自己去做。</p>
</blockquote>
<p>这就是为什么我认为持续集成工具、以及这些工具背后的持续集成概念在云计算深入研发之后将会消亡。取代持续集成的，将是更紧密地内嵌质量要求、更充分地利用云计算优势的云原生（Cloud Native）开发方法及支撑工具。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在思考“&lt;a href=&quot;/2017/3/31/stack-management/&quot;&gt;云时代的研发环境长什么样&lt;/a&gt;”这个问题的时候，我逐渐意识到一件很重要的事。2000年首次被提出、在过去十几年中我们习以为常的敏捷核心实践&lt;a href=&quot;https://www.mar
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字化企业的API架构治理</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/22/dps-api-architecture-remediation/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/22/dps-api-architecture-remediation/</id>
    <published>2017-05-22T05:04:00.000Z</published>
    <updated>2017-05-22T00:40:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/4/25/ditigal-platform-strategy-intro/">前文</a>中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住<a href="/2017/5/7/dps-delivery-infrastructure/">交付基础设施</a>、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱。今天我们就来谈一谈API、架构治理这些听起来非常技术性的概念与企业的数字化战略之间有何关系。</p>
<p><img src="/assets/2017/5/22/architecture.jpg"></p>
<h2 id="企业资源服务化"><a href="#企业资源服务化" class="headerlink" title="企业资源服务化"></a>企业资源服务化</h2><p>从1990年代起，企业资源计划（ERP）一直是企业信息化的核心议题。植根于供应链管理，ERP通过对企业内部财务会计、制造、进销存等信息流的整合，提升企业的计划能力与控制能力。然而近年来，在互联网的冲击下，传统企业开始面临全新的挑战。尤其是在互联网的<a href="https://en.wikipedia.org/wiki/Disintermediation" target="_blank" rel="external">去中介化</a>效应影响下，原本在供应链上下游各安其位的企业突然间都被压缩到了“生产-流通-消费”这个极度精简的价值链中。<a href="http://news.xinhuanet.com/yuqing/2017-02/10/c_129474135.htm" target="_blank" rel="external">药品购销两票制</a>就是这个极简价值模型的直观呈现。在这个模型中，掌握技术优势和消费者入口的互联网企业有可能形成一家独大的超级垄断，挤死传统的流通企业，把生产企业变成自己的OEM厂商，这是传统企业对来自互联网的竞争者恐惧的根源。</p>
<p>为了对抗互联网企业的竞争，传统企业最好的办法不是硬拼互联网上的技术和流量，而是在自己擅长的领域开战：把自己多年积累的线下资源变成线上服务，构建起本行业的线上生态系统，不仅支撑本企业的线上经营，而且为上下游周边企业提供线上经营的平台，从而把线下优势转化为线上优势，以资源优势对抗技术优势。</p>
<p>为了支撑企业资源的服务化，在设计在线服务的API和架构时需要考虑以下问题：</p>
<ul>
<li>平台架构和API的设计应该注重<strong>开发者体验</strong>。</li>
<li>在API的背后，应该从业务功能的角度出发划分合理的限界上下文和<strong>服务边界</strong>，对外提供高内聚低耦合的服务。</li>
<li>在服务边界之间，应该考虑使用异步的<strong>事件机制</strong>实现服务之间的通信，来解耦领域模型，客观地描述运行时间比较长、甚至本质上不可能立即完成的操作。</li>
<li>为了方便使用，应该提供<strong>API网关</strong>作为所有服务使用者的单一入口，在API网关背后去处理众多内部IT系统的复杂性。</li>
<li>整个API架构应该以<strong>微服务的风格</strong>呈现，避免典型SOA架构中普遍存在的过于复杂的ESB编排逻辑。</li>
</ul>
<blockquote>
<p><strong>ERP之后是什么？</strong></p>
<p>进入2010年代以来，“后ERP时代”这个说法不断被提出。在谈到ERP的发展方向时，通常都会涉及业务与技术两个角度。例如<a href="http://www.ccw.com.cn/article/view/76781" target="_blank" rel="external">一种观点认为</a>，ERP需要从以流程为中心转变为以客户为中心，并且需要用好云计算、社交网络、大数据和移动化等新技术。</p>
<p>ThoughtWorks认为，ERP在互联网时代的发展方向将是企业资源服务化（Enterprise Resource Servicification，ERS），通过数字平台的技术能力，把一家企业的资源融入一个行业的互联网生态，为企业铺下明确的数字化道路。</p>
</blockquote>
<h2 id="API和架构治理解读"><a href="#API和架构治理解读" class="headerlink" title="API和架构治理解读"></a>API和架构治理解读</h2><p>下面我们来近距离看看，在“API和架构治理”这顶帽子下面，有哪些具体的问题需要被考虑到。</p>
<p><img src="/assets/2017/5/22/pillar-2.jpg"></p>
<h3 id="开发者体验"><a href="#开发者体验" class="headerlink" title="开发者体验"></a>开发者体验</h3><p>当企业资源以服务的形式对外提供，也就意味着不可能——像传统的IT系统建设那样——强迫别人使用这些服务。尤其是要把这些服务提供给第三方开发者、希望他们开发出形形色色的应用程序，那么服务的API是否易用就会很大程度上影响它能吸引到多少第三方开发者。ThoughtWorks<a href="http://thoughtworks.com/radar" target="_blank" rel="external">第16期技术雷达</a>还专门把开发者体验作为一个重要的技术主题。</p>
<p>在讨论开发者体验时，可以从开发工具和开发环境的安装、配置、管理、使用、维护等角度来考量。具体而言，开发环境和测试环境是否能弹性地随需获得，开发/测试基础设施和持续交付流水线是否以源代码的形式提供并完全自动化，是否提供对主流开源软件的支持，是否提供可编程的、命令行友好的（而不仅仅是图形化的）工具界面，安全、数据访问权限等企业规章是否严重影响开发者的效率和感受，这些都是影响开发者体验的要素。</p>
<h3 id="服务边界"><a href="#服务边界" class="headerlink" title="服务边界"></a>服务边界</h3><p>和所有的面向对象设计一样，服务的设计应该是高内聚低耦合的：与一个业务相关的修改只在一个服务内部进行，并且一个服务的修改/部署不需要影响其他服务。和一个代码库内部的对象设计不同，每个服务通常有专属的代码库，并且由专人负责维护（而不是所有人拥有所有代码），因此服务边界的改变会带来更大的变更成本。所以，服务边界的划分需要投入精力认真对待。</p>
<p>从设计原则上来说，服务的边界应该体现业务的边界，而不是单纯从技术角度出发划分服务边界。从业务功能的角度出发划分合理的限界上下文，以领域模型和领域事件的聚合为出发点来划分服务，更可能得出与业务边界一致的服务边界。随后再以业务目标驱动建设全功能一体化团队，就能做到业务、技术、团队三者对齐（<a href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank" rel="external">康威定律</a>再次起作用）。<a href="http://www.infoq.com/cn/articles/xh-four-color-modeling" target="_blank" rel="external">四色建模</a>、<a href="https://techbeacon.com/introduction-event-storming-easy-way-achieve-domain-driven-design" target="_blank" rel="external">事件风暴</a>等方法都能有效地实现<a href="https://book.douban.com/subject/5344973/" target="_blank" rel="external">领域驱动设计</a>，从而建立起良好的领域模型及服务边界。</p>
<h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><p>使用异步的事件机制实现服务之间的通信。对于运行时间比较长、甚至本质上不可能立即完成的操作（例如涉及人工操作），使用异步通信是合理的选择。即便不考虑响应的实时性，事件驱动的架构还表达了领域模型之间的松散耦合关系：跨领域的协作以事件而非方法调用的形式来表达，系统追求最终一致性而非强一致性。这一结构准确地映射了真实世界中多支相关但独立的团队之间的协作关系，避免了过度依赖其他服务的响应速度或可靠性等服务质量指标，使服务真正具有技术上的独立性。</p>
<p>在设计系统时，借助事件风暴方法，可以通过领域事件识别出聚合根，进而划分微服务的限界上下文。当出现跨多个聚合根的事件时，可以很自然地将其实现为异步的领域事件，从而获得与领域设计高度吻合的实现。关于如何设计和实现领域事件，可以参阅ThoughtWorks咨询师<a href="https://zhuanlan.zhihu.com/p/26446019" target="_blank" rel="external">滕云的文章</a>。</p>
<p><img src="/assets/2017/5/22/events.png"></p>
<p>在实现事件驱动的架构时，当然可以沿用传统的SOA架构中的消息中间件。但由于微服务架构中，业务逻辑都存在于各个服务内部，没有庞大臃肿的ESB（稍后我们还会详谈这个问题），因此消息机制也不需要强大的服务编排（orchestration）能力。RabbitMQ这样标准的消息代理当然很好，也有很多系统（例如<a href="http://bahmni.org/" target="_blank" rel="external">Bahmni</a>）采用更简单的做法：领域事件发生时，以ATOM格式发布；关心特定领域事件的其他领域模型则订阅特定的ATOM feed主题。这种基于HTTP的事件传播方式最大的好处就是简单，几乎不需要增加新的软件就可以实现。不过这个方案在处理低延迟的场景时表现不佳。</p>
<h3 id="公共网关"><a href="#公共网关" class="headerlink" title="公共网关"></a>公共网关</h3><p>微服务提供的API粒度与客户端的需求不同，所以客户端一个请求经常需要多个服务；服务端和客户端之间可能需要通信协议转换；不同的客户端对数据的需求不同，例如浏览器客户端需要的信息可能多于移动客户端；服务的终端信息（主机+端口）可能变化；不同数据片可能由不同的服务终端来提供——以上这些因素都指出：有必要对服务做一层门面封装，提供API网关作为所有服务使用者的单一入口点。</p>
<p>API网关处理请求的方式有两种：一种是直接代理/路由给合适的服务；另一种是由一个请求扇出/分发给多个服务。API网关可能针对不同客户端提供不同的API，可能包含针对客户端的适配代码。横切需求（例如安全）也可能在API网关实现。</p>
<p>当服务数量变多、API网关变大以后，维护一个通用的API网关会增加API网关层的复杂度，导致一个独立的“API团队”出现，协调和沟通的工作量加大。这时可以考虑引入公共网关的一个变体：为特定前端设计的后端（Backend For Frontend，BFF），即为每个前端应用提供一个单独的API网关，使对齐业务的一体化团队能够拉通前后端开发、而不必等待“API团队”完成他们的backlog。</p>
<p>API网关可以实现为一个独立的服务端应用，其代价则是增加一层复杂度（和出错的可能性）。为了降低这一代价，可以考虑用<a href="https://github.com/Netflix/zuul" target="_blank" rel="external">Zuul</a>等工具来实现API网关。</p>
<h3 id="微服务SOA拓扑"><a href="#微服务SOA拓扑" class="headerlink" title="微服务SOA拓扑"></a>微服务SOA拓扑</h3><p>与传统的SOA架构相比，所谓“微服务”最大的特点可能就在于没有一个重量级的ESB。重量级的ESB有其历史原因。在2000年代业界刚开始采用SOA时，很多企业尽管把业务系统包装成了web服务，但IT团队的组织结构并没有发生改变，仍然是由一组人集中式地掌管整个业务流程——只不过系统集成的方式不再是直接的方法调用，而是服务编排（orchestration）。原本存在于集成代码中的复杂逻辑，现在被转移到了ESB中。而这个“ESB团队”成了IT交付的瓶颈：不论发布事件的服务还是消费事件的服务、或是编排逻辑本身的改变，与事件相关的变更都需要通过ESB团队。这个团队的backlog堆积起来，使得每个服务、每个应用都无法提供快速响应。</p>
<p>微服务架构更重视服务与业务的对齐。贝索斯所说的“两个pizza的团队”不仅负责一个IT系统的交付，而且要负责用这个IT系统来支撑一个业务的成功。为了做到单个服务能够独立开发、独立部署、独立运行，这支团队应该能够在很大程度上掌控自己的进度，而不依赖于一个集中式技术团队的进度。因此微服务应该通过服务注册与发现机制获得自己需要的依赖服务、自己判断是否要直接调用或订阅依赖服务的事件，每个服务包含与其业务对应的复杂度，而不是把整个系统的复杂度集中在ESB和编排逻辑上。整个系统的架构（以及团队的架构）应该呈现为若干个端到端拉通的、与业务对齐的纵切服务，而不是一个横切的大块（ESB）覆盖所有业务。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>为了激活企业线下资源、打造行业线上生态，IT需要一套有效的服务API和架构治理方法。首先从领域驱动设计入手，划分出合理的限界上下文和服务边界，然后用异步消息机制来描述领域事件。设计好的服务通过API网关或BFF暴露给前端应用，把依赖关系和集成逻辑约束在与业务对齐的一体化团队内部。在整个服务架构的设计中，需要保持对开发者体验的关注。顺畅地将企业资源服务化，这是企业数字化旅程的第二步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/4/25/ditigal-platform-strategy-intro/&quot;&gt;前文&lt;/a&gt;中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住&lt;a href=&quot;/2017/5/7/dps-delivery-infrastructure
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数字化企业的交付基础设施</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/7/dps-delivery-infrastructure/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/7/dps-delivery-infrastructure/</id>
    <published>2017-05-07T05:04:00.000Z</published>
    <updated>2017-05-07T02:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2017/4/25/ditigal-platform-strategy-intro/">前文</a>中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱。那么，当我们谈“交付基础设施”，我们究竟在谈什么？怎样的交付基础设施能加速数字化项目的交付？</p>
<p><img src="/assets/2017/5/7/infra.jpg"></p>
<h2 id="什么是交付基础设施"><a href="#什么是交付基础设施" class="headerlink" title="什么是交付基础设施"></a>什么是交付基础设施</h2><p><a href="/2017/3/31/stack-management/">云时代的研发环境</a>应该以原生支持云计算的方式提供、管理和维护。在提供基础的弹性计算能力的IaaS平台之上，交付基础设施负责为交付团队提供便利的、最好是自助式的工作环境，让交付团队专注于交付软件的功能性需求，而不必操心软件功能之外的“脚手架”工作。按照ThoughtWorks<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>的定义，这些脚手架包括：</p>
<ul>
<li><strong>弹性基础设施</strong>，即交付团队使用底层云计算平台的方式，既包括各种虚拟机和镜像的管理，也包括生产环境的水平伸缩能力。</li>
<li><strong>持续交付流水线</strong>，交付团队编写的代码需要通过这条流水线最终变成可以上线运行的软件。</li>
<li><strong>部署运行时</strong>，软件在开发、测试、试运行、用户验收、培训、生产等各种环境需要部署的环境。</li>
<li><strong>监控</strong>，为交付团队提供生产环境（及其他环境）的可观测性，方便他们发现和解决问题。</li>
<li><strong>安全</strong>，把安全内建在软件的研发过程中，尽量避免因为人为失误造成安全隐患。</li>
</ul>
<p>从前这些交付基础设施脚手架通常是由每个交付团队的技术领导者（<a href="http://insights.thoughtworkers.org/thoughtworks-practice-part8/" target="_blank" rel="external">Tech Lead</a>）来负责搭建和维护的。并且由于软硬件资源的稀缺和不灵活，团队经常需要微调自己的实践来适应不同的环境。所以，即使在同一家公司，各支团队所使用的交付基础设施也可能大相径庭。交付基础设施不一致、不规范的情况会迫使团队花费额外的精力去操心脚手架工作，并且使<a href="/2017/5/2/stack-management-and-tech-radar/">最佳实践不易推广普及</a>。走上数字化道路的企业必定有大量的软件项目，尤其是微服务架构风格的引入会使企业拥有数量更多、单体规模更小的软件应用，此时交付基础设施不一致、不规范的情况就会对企业的数字化进程带来更大的阻力。</p>
<p>云计算带来的弹性和灵活性让组织级的交付基础设施标准化、规范化成为可能。一个跨越项目团队的、组织级的交付基础设施团队现在可以在IaaS的基础上封装标准的脚手架，甚至把<a href="/2017/4/14/stack-management-implementation/">脚手架本身以PaaS的形式提供</a>给交付团队。通过把整个企业优秀技术领导者的知识与经验内嵌在交付基础设施脚手架中，就降低了对单个交付团队的技术要求，帮助企业缓解优秀技术领导者难以获得的人才挑战。从这个意义上，以PaaS形式提供的交付基础设施本质上是<strong>技术领导者作为服务</strong>（Tech Lead as a Service）的云计算应用形式，它解决的是优秀技术人才的弹性和灵活性问题，让企业能够以一种创新的方式使用这些人才。</p>
<blockquote>
<p><strong>架构师写代码吗？</strong></p>
<p>关于“架构师是否应该写代码”这个问题，业界有各种不同的声音。在敏捷的社区里，意见倾向于认为<a href="https://www.infoq.com/articles/architects-should-code-bryson" target="_blank" rel="external">架构师需要写代码</a>，因为这是他们获得关于技术决策的反馈和建立技术领导力的重要方式。将交付基础设施明确提出来，就给了架构师又一个清晰的编程目标——他们需要<a href="https://yaowenjie.github.io/devops/infrastructure-as-code" target="_blank" rel="external">用代码的形式描述</a>软件交付中的基础设施和最佳实践。除了培训、开会、代码评审等我们已经知道效率并不太高的方式以外，架构师对交付团队的指导和监管现在可以用实实在在的代码来承载。当交付团队不理解架构师说的某件事应该怎么做，现在他们更有理由要求架构师“show me the code”。</p>
</blockquote>
<h2 id="交付基础设施解读"><a href="#交付基础设施解读" class="headerlink" title="交付基础设施解读"></a>交付基础设施解读</h2><p>下面我们来看看，在“交付基础设施”这顶帽子下面，架构师/技术领导者们究竟应该关心哪些问题，又有哪些最佳实践应该被纳入他们的视线。</p>
<p><img src="/assets/2017/5/7/di.jpg"></p>
<h3 id="弹性基础设施"><a href="#弹性基础设施" class="headerlink" title="弹性基础设施"></a>弹性基础设施</h3><p>允许交付随需获得计算能力。在微服务语境下，这种弹性有两层常见的含义：在生产环境下，服务可以随负载动态获得和释放计算资源，从而更高效地使用计算资源，更自动化地应对负载变化；在研发环境下，开发、测试、运维等不同角色可以随需动态获得完整的环境，从而统一环境、标准化研发实践、规范化研发能力，并且给研发提供体验更好的开发环境。</p>
<p>为了实现弹性基础设施，一方面基础设施需要支持弹性，例如使用支持弹性计算的公有/私有云，并且有对生产环境的监控和自动化手段；另一方面应用本身需要有可扩展性，例如服务能分别独立部署、无状态化、容器化、有透明的前端负载均衡机制。有状态服务（比如数据库服务）的弹性伸缩问题是特别需要考虑的重要挑战。</p>
<h3 id="持续交付流水线"><a href="#持续交付流水线" class="headerlink" title="持续交付流水线"></a>持续交付流水线</h3><p>用持续交付实践打通微服务的开发、构建、验证和部署流程。在数字化、服务化的背景下，众多互相依赖的微服务形成的系统架构，对构建、验证和部署造成更大的压力：各个服务有独立的代码库和构建流程，又需要随时能组合成可用的软件；构建产物需要有统一的存储管理；完整的运行时环境应该能按需获得；配置和部署应该能快速准确地完成。</p>
<p>为了应对这些挑战，交付基础设施中应该包含完整的持续交付概念：流水线、环境管理、构建产物管理等。应该鼓励对服务虚拟化，最好是每个主机运行一个微服务，而不共享使用主机。应该包含配置自动化工具，例如Chef、Puppet等。在服务化的背景下，持续交付流水线需要体现服务间的依赖关系和团队间的协作关系，设计一个运转良好的流水线不是容易的任务。</p>
<h3 id="部署运行时"><a href="#部署运行时" class="headerlink" title="部署运行时"></a>部署运行时</h3><p>交付基础设施应该包含生产系统所使用的运行时环境，并把生产环境前向拉通到验证和研发环节。为了在研发流程的出口得到服务化友好的交付物，最好是在整个开发过程中一直使用与生产环境近似的环境。例如开发人员应该使用全套环境随时验证，自动化测试和手工测试都基于全套环境开展。在这种情况下，环境的设置、管理、更新不可能由每个开发人员和测试人员自己进行，所以环境的管理更新必定是集中进行的，环境的设置必定是自动化的。</p>
<p>在《<a href="/2017/4/14/stack-management-implementation/">技术栈管理：云时代的研发环境</a>》一文中，我们已经介绍过“一个平台、两个PaaS服务、三个运行时环境”的技术栈管理理念。特别需要注意的是，如何将生产数据拉通到验证和研发环节。</p>
<h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>在微服务架构中，系统由多个小服务组成，且广泛使用异步通信，使问题和故障更难定位。因此交付基础设施需要提供全面可靠的监控机制，帮助交付团队了解系统的整体状况。</p>
<p>监控的实现涉及日志、服务指标跟踪、业务语义综合监控等方式。在云环境下如何划分和管理监控的层级，监控系统如何无侵入的在各个微服务体系中收集故障和信息，如何有效管理监控的反馈环，如何在前后端分离和移动应用情况下收集和监控客户端日志，都是常见的挑战。</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>当数字化、服务化IT系统的数量剧增，安全的设置会变得更加复杂。在微服务架构下，系统的安全性需要有一个整体的考虑。例如单点登录、服务间的身份验证和授权、各种防御措施等安全考量不应该下放到交付团队，而应该被涵盖在交付基础设施中统一提供、统一管理、统一更新。</p>
<p>交付基础设施还应该鼓励<a href="https://www.buildsecurityin.net/zh/" target="_blank" rel="external">安全实践内建</a>（Build Security In），例如团队应该熟悉OWASP安全列表和测试框架、需求分析中应该包含安全需求和恶意用户需求、测试过程中应该包含安全性测试、应该进行自动化安全性测试并纳入持续交付流水线。这些流程与工作方法虽然不能完全以软件代码的形式承载，但它们同样是交付基础设施的重要组成部分。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>数字化、服务化的IT大背景会让企业开发和拥有的IT系统数量剧增。当企业IT交付更多地以“两个pizza团队”的形式组织，依赖于每个交付团队的技术领导者来搭建和维护一套完整高效的交付基础设施脚手架，这种期望即使不是完全不现实，也会对企业的人才积累提出非常高的要求。因此，企业应该集中优秀的技术人才（包括架构师们），打造一套标准的交付基础设施，充分考虑生产环境与研发环境的弹性、持续交付、部署运行时的统一、监控、安全等因素，并借助云计算的弹性和灵活性将其提供给交付团队。用便利的脚手架赋能一支能快速交付的团队，这是企业的数字化旅程的第一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2017/4/25/ditigal-platform-strategy-intro/&quot;&gt;前文&lt;/a&gt;中我们说到，传统企业在逐步建设自己的数字平台过程中，需要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术栈管理与云时代的持续集成</title>
    <link href="http://gigix.thoughtworkers.org/2017/5/2/stack-management-and-tech-radar/"/>
    <id>http://gigix.thoughtworkers.org/2017/5/2/stack-management-and-tech-radar/</id>
    <published>2017-05-02T05:04:00.000Z</published>
    <updated>2017-05-23T15:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>在刚刚发布的<a href="https://assets.thoughtworks.com/assets/technology-radar-vol-16-cn.pdf" target="_blank" rel="external">第16期技术雷达</a>中，我们看到ThoughtWorks在“技术”象限里旗帜鲜明地列举了几项与持续集成相关的反模式。这些存在多年的实践和现象被放在了“暂缓”一环中，意味着ThoughtWorks正式向我们的客户指出：如果你的组织仍在这样实施持续集成，我们认为你应该考虑改变了。那么，这些被批评的点背后映射出哪些问题，基于技术栈管理的云时代研发环境又能带来什么新的思路？我们一起来深入分析。</p>
<p><a href="http://www.bagevent.com/event/405803" target="_blank" rel="external"><img src="/assets/2017/5/2/tech-radar-card.png"></a></p>
<h2 id="持续集成的反模式"><a href="#持续集成的反模式" class="headerlink" title="持续集成的反模式"></a>持续集成的反模式</h2><p>最需要被点名批评的现象莫过于“<a href="https://www.thoughtworks.com/radar/techniques/ci-theatre" target="_blank" rel="external">持续集成剧场</a>”了：</p>
<blockquote>
<p>很多开发者只是简单的搭建了持续集成服务器就以为在做“持续集成”，但他们实际上会遗失持续集成的关键优点而导致失败。常见的失败模式包括：虽然在一个共享的主分支上运行持续集成，但是代码提交不频繁，所以集成并没有真正的“持续”。以及在一个测试覆盖率不足，甚至是长期状态为红的情况下进行构建；或者在功能分支上运行持续集成，这会导致持续隔离。</p>
</blockquote>
<p>简而言之，这些团队并没有真正体会到持续集成的好处，而是为了完成上级的任务而演一场“我们在持续集成”的戏——这也正是这个反模式的名字由来。过去十年中，我们在众多刚开始实施持续集成的企业见过这一幕。领导认识到持续集成的好处，但是推行成了个大问题：推轻了，下面团队不愿动，技术问题解决不了；推重了，下面团队来个上有政策下有对策，领导想看什么就给你演什么——持续集成剧场就此落成。比如说你见过一个表面看起来一直是绿色但是背后连编译都不敢跑的持续集成吗？我见过。真是一场好戏。</p>
<p>为了解决持续集成演戏的问题，一些规模较大的企业开始建设持续集成中心。想法很符合直觉：既然团队自己做持续集成有技术困难、还有可能变成演戏，那么我就组建一支团队专门帮他们一个个把持续集成跑通、帮他们管理持续集成服务器，持续集成的运行和统计数据都在这个中央团队手里，下面的团队总没办法演戏了吧？于是，他们又遭遇了第二个持续集成反模式：“<a href="https://www.thoughtworks.com/radar/techniques/a-single-ci-instance-for-all-teams" target="_blank" rel="external">所有团队共用一个持续集成实例</a>”。</p>
<blockquote>
<p>那些必须使用中心化持续集成服务器的交付团队，常常依赖中心的团队去完成小的配置任务，或者在共享的基础设置和工具中排查问题，这给他们在进度上带来长时间的滞后。</p>
</blockquote>
<p>这次是<a href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank" rel="external">康威定律</a>带来的困难：如果每个团队使用的技术栈配置不同、技术栈配置和管理的职责仍然在每个团队中，那么技术栈演进与持续集成的演进就难免出现节拍不一致。于是管理着持续集成中心的中央团队开始疲于奔命，帮一个个项目团队修持续集成，而项目团队还感到没有得到足够的支持。</p>
<p>第三个反模式是“<a href="https://www.thoughtworks.com/radar/techniques/enterprise-wide-integration-test-environments" target="_blank" rel="external">企业级集成测试环境</a>”，这也是很多组织建设持续集成中心的初衷之一：由于能执行完整端到端测试的环境稀缺，各个团队的集成测试无论如何也必须在一个瓶颈处统一调度，所以中心化管理持续集成也就顺理成章。然而，</p>
<blockquote>
<p>这些企业集成测试环境通常称为 SIT 或预生产环境）是当下持续交付常见的瓶颈。环境本身很脆弱而且维护成本很高，而这些环境通常存在一些需要由单独的环境管理团队手动配置的组件。在预生产环境的测试给出的反馈慢且不可靠，而且会重复测试那些在隔离的组件上已经测过的功能。</p>
</blockquote>
<h2 id="云时代的新思考"><a href="#云时代的新思考" class="headerlink" title="云时代的新思考"></a>云时代的新思考</h2><p>技术雷达中批评的这些持续集成的反模式，是过去的时代背景造就的。尤其是以下几点约束条件，造成了今天我们看到的持续集成的形态（以及长久以来存在的挑战）：</p>
<ol>
<li><strong>计算资源短缺</strong>。这个约束条件决定了完整的、与生产环境相似的、能执行端到端验证的环境必定是稀缺品，因此一个组织中多个团队的集成必定会受限于某个瓶颈，或是企业级集成测试环境、或是持续集成中心。</li>
<li><strong>计算环境没有弹性</strong>。不仅硬件资源短缺，而且环境的开通、配置和管理很麻烦，所以团队会调整自己的技术实践去适应已有的环境，而这个调整的动作主要由团队内的技术领导者来执行。其结果是即便多个团队开发的软件在技术栈上非常相似，他们的持续集成实践也可能相当不同，在技术能力不足的团队就会变成持续集成剧场。</li>
<li><strong>版本控制工具的局限性</strong>。Subversion（以及其他更早的版本控制工具）在pre-commit阶段通过服务器端回调钩子很难——如果不是完全不可能的话——得到完整的“提交后版本”，因此svn的pre-commit钩子基本只能用于检查提交信息是否符合规范，完整的验证则必须在代码已经合入代码库之后才能——在一台独立的“持续集成服务器”上——进行，而此时如果构建失败就会阻塞整个团队的工作。这也导致更多的团队倾向于放松持续集成的要求、甚至沦落成持续集成剧场。</li>
</ol>
<p>而这几个约束条件在今天的时代背景下已经不复存在：计算资源仍然不能说极大丰富，但企业应用开发所需的x86架构计算资源在云环境下已经不再短缺；在IaaS的基础上，技术栈管理的PaaS提供了计算环境的弹性，使用相同技术栈的多个团队可以轻易地获得完全一样的环境，因此团队也可以采用标准的技术实践，而不必为了将就手边的环境而调整实践。而git对svn的全面取代尤为值得玩味：由于可以在pre-commit阶段直接获得完整的待提交快照、并在这个版本基础上执行测试，不符合持续集成要求的代码将直接被拒绝提交——而不是在提交后才把问题暴露出来。于是，以下两个要素的结合：</p>
<ol>
<li>每个开发人员（以及自动构建）都可以在PaaS云上获得完整的技术栈运行时环境；以及，</li>
<li>pre-commit阶段可以对待提交的代码进行完整的构建</li>
</ol>
<p>将带来两个重要的影响。首先，持续集成不再需要一个“服务器”。从它发展的早期开始，持续集成这个概念就一直与各种“持续集成服务器”软件工具紧密关联：从早期的CruiseControl、Bamboo到后来的Jenkins、GoCD，以及云上提供服务的TravisCI、SnapCI，持续集成中的“集成”这个动作一直发生在代码已经提交之后、发生在一个团队共有的服务器上。而现在，持续集成可以在代码提交之前发生、在一个从PaaS云上弹性生成的环境中发生。</p>
<p>这个技术性的改变带来的组织性改变将有着重要的意义：保证持续集成通过将会彻底变成每个开发人员自己的责任，没有折扣可打，没有其他地方可以推卸责任——现在构建不通过不会阻碍其他人提交代码了，只有这个开发人员自己不能提交代码。由此，持续集成将由一项团队实践变成一项个人实践、由一项有较大妥协空间的实践变成一项强制性的实践。正如IntelliJ之类现代IDE把“通过编译”这项要求变成了程序员感知不到的、而又不可妥协的质量要求，技术栈管理PaaS平台将把持续集成也变成程序员感知不到的、而又不可妥协的质量要求。</p>
<blockquote>
<p>持续集成是如此重要，以至于我们不应该把它交给程序员自己去做。</p>
</blockquote>
<p>在这样的一个研发环境下，每个开发人员从写下第一行代码开始就必须遵循组织的质量规范，能够被提交到团队代码库的代码都是通过了验证流程、符合质量要求的。<a href="/2011/9/9/development-as-delivery/">6年前当我构想这样一个研发环境</a>，我觉得它更像是一个遥远的梦想。然而今天，支持这样研发环境的<a href="/2017/4/14/stack-management-implementation/">技术栈管理PaaS平台</a>已经被实现出来了。你需要的就是在你的研发云上实施它。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在刚刚发布的&lt;a href=&quot;https://assets.thoughtworks.com/assets/technology-radar-vol-16-cn.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第16期技术雷达&lt;/a&gt;中，我们看到Th
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>什么是数字平台战略</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/25/ditigal-platform-strategy-intro/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/25/ditigal-platform-strategy-intro/</id>
    <published>2017-04-25T05:04:00.000Z</published>
    <updated>2017-04-25T02:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>传统企业正在面临IT新技术的挑战——单从“传统企业”这个居高临下的称谓，你就能读出“非传统企业”（也就是IT企业、互联网企业）满满的优越感。每天在各种新媒体平台看着BAT们又掌握了什么黑科技、又颠覆了哪个行业，“云大物移”已经成了高频出现的热词，传统企业们愈发清晰地感受到<a href="/2016/1/13/it-talent-trend/">IT的重要性与挑战</a>。数字化浪潮躲不过，和BAT拼技术又拼不过，传统企业的出路在哪里？</p>
<p><img src="/assets/2017/4/25/digital-platform.jpg"></p>
<p>目光投向大洋彼岸，最传统的传统企业、年收入数千亿美元的<a href="/2017/4/19/walmart-digitization/">沃尔玛在过去几年中的数字化历程</a>颇有可玩味之处。直到2011年，沃尔玛还不是出色的数字化玩家，只能算有个电商网站的线下零售商而已。正因为如此，当沃尔玛的电商收入在2011年至2014年的三年间增长150%、从年销量49亿美元增长到122亿美元、超过史泰博（Staples）成为亚马逊和苹果之后美国第三大在线零售商时，这一变化才更令人惊叹。像沃尔玛一样的数字化转型先行者，能给我们带来哪些启示？</p>
<h2 id="数字化企业的三个关键字"><a href="#数字化企业的三个关键字" class="headerlink" title="数字化企业的三个关键字"></a>数字化企业的三个关键字</h2><p>首先，传统企业们需要清楚一件事：“传统”不应该是贬义词，它同时意味着数十年积累的宝贵资产，包括客户关系、数据、品牌形象、供应链、渠道等等。传统企业要在互联网时代的竞争环境中占得一席之地，靠的不是突破最高精尖的技术领域，而是以数字化的形式激活自己多年累积的核心资产，将核心资产转变为可以在互联网上使用的服务，使其焕发新的价值。</p>
<p>对众多成功的数字化企业的调研显示，这些企业有着一些引人注目的共性。在“激活核心资产”的过程中，他们对三个关键字的关注特别值得我们关注：IT效能；生态系统；创新实验。</p>
<p><img src="/assets/2017/4/25/3-goals.png"></p>
<p>首先，这些成功的数字化企业重视<strong>提升IT团队的效能</strong>。正如ThoughtWorks在<a href="https://www.thoughtworks.com/radar" target="_blank" rel="external">第16期技术雷达</a>中所指出的，技术人员的工作体验正在成为科技企业的差异化竞争优势。这里所说的“体验”不止是给程序员舒适的座椅和人体工学键盘，更重要的是消除IT团队在工作中遇到的阻力和摩擦，尤其是充分利用云计算的弹性能力大量简化和自动化与实现业务功能无关的基础设施性工作，让IT团队将注意力集中在真正与业务相关的工作上。这里涉及的一些技术和实践（例如<a href="/2017/4/14/stack-management-implementation/">技术栈管理</a>）乍听起来可能困难重重，但为提升IT团队效能付出的成本终将物有所值。</p>
<p>随后，这些成功的数字化企业把他们的核心商业能力与资产以服务的形式在互联网上提供出来，<strong>构建本行业的数字化生态系统</strong>，使新的服务和产品能够在这些服务的基础上被创造出来。同样是在技术雷达中，我们看到了“平台的崛起”：几年前只有亚马逊这样的巨头企业能在互联网上提供各种云服务；而现在有更多原本不太有“互联网基因”的企业围绕自己的核心资产建立起了数字化平台，不仅对内、而且对外提供服务。在国内，我们看到<a href="http://www.hwclouds.com/devcloud/" target="_blank" rel="external">华为把软件开发能力变成了云服务</a>、<a href="https://www.haihangyun.com/landing" target="_blank" rel="external">海航建立了自己的云生态</a>。我们相信，更多的企业也能从核心资产的服务化中受益良多。</p>
<p>最后但绝非最不重要的，这些成功的数字化企业养成了<strong>创新实验的习惯</strong>。在互联网中弄潮的经验让他们承认，自己不能预先掌握所有需求、做好所有设计。因此他们转而打造组织的响应力，致力于缩短精益创业的“构建-度量-学习”周期。他们知道成千上万的用户不会明明白白地说自己想要什么功能，于是他们监控用户行为、用A/B测试等方法进行受控实验，用“假说-实验”代替了“需求-实现”，在不断的反馈中完善自己的产品和服务。</p>
<h2 id="数字平台战略的五大支柱"><a href="#数字平台战略的五大支柱" class="headerlink" title="数字平台战略的五大支柱"></a>数字平台战略的五大支柱</h2><p>以提升IT效能、构建行业生态、促进业务创新为目标，有志于迈出数字化步伐的企业应该立即开始制订自己的数字平台战略蓝图。不要被“平台”和“战略”这样的大词欺骗：这个以增强企业响应力为目标的平台战略不应该是漫长的规划之后建设出一个庞然大物，而应该是迭代的、精益的、价值驱动的。更多的时候，我们谈论的“数字平台”更像是一系列IT技术与实践的落地结合。这些技术与实践有机构成的五个支柱，让数字化的企业能快速交付IT系统、围绕核心资产构建云上生态系统、从线上系统和用户行为中获得洞察、开展受控实验、并为顾客创造全渠道统一的用户体验。在成功的数字化转型案例（例如<a href="/2017/4/19/walmart-digitization/#数字平台战略视角分析">沃尔玛的案例</a>）中，我们就能看到这五个支柱的投影。</p>
<p><img src="/assets/2017/4/25/5-pillars.png"></p>
<p>第一个支柱是支持云和敏捷的<strong>交付基础设施</strong>。为了让IT团队快速交付，他们使用的基础设施应该具有弹性，开发、测试、运维等不同角色应该可以随需动态获得完整的应用环境，从而统一环境、标准化研发实践、规范化研发能力。他们开发的应用程序应该用持续交付实践打通开发、构建、验证和部署流程，使软件随时处于可发布状态。他们的交付流程中应该内建对安全的考量，而不是依赖最后的整体安全检查。生产系统所使用的运行时环境应该前向拉通到验证和研发环节，保障运行时环境的一致性。需要对系统的IT运维和业务运营进行全面的监控，聚合起来了解系统整体状况。</p>
<p>第二个支柱是以微服务为核心的<strong>API和架构治理</strong>。为了鼓励不仅企业内、还包括企业外的开发者在平台上发挥创造力，平台架构和API的设计应该注重开发者体验。在API的背后，应该从业务功能的角度出发划分合理的限界上下文和服务边界，对外提供高内聚低耦合的服务。在服务边界之间，应该考虑使用异步的事件机制实现服务之间的通信，来客观地描述运行时间比较长、甚至本质上不可能立即完成的操作（例如涉及人工操作）。为了方便使用者，应该提供API网关作为所有服务使用者的单一入口点，在API网关背后去处理众多内部IT系统的复杂性。整个API架构应该以微服务的风格呈现，避免典型SOA架构中普遍存在的过于复杂的ESB编排逻辑。</p>
<p>第三个支柱是允许开发团队<strong>数据自服务</strong>。为了让业务和研发团队获得关于生产环境、关于线上业务、关于顾客的洞见，他们需要首先定义数据流水线，使数据能够顺畅地流过收集、转换、存储、探索/预测、可视化等阶段，产生业务价值。他们需要用实时的架构和API在短时间内处理大量、非结构化的数据，从中获得洞见，并“实时”影响决策。为了提高应变能力，系统中的数据不做ETL预处理，而是以“生数据”的形式首先存入数据湖，等有了具体的问题要回答时，再去组织和筛选数据，从中找出答案。IT团队会更进一步把数据包装成能供外人使用的产品，让第三方从数据中获得新的洞见与价值。为了支持数据产品的运营，他们需要实现细粒度的身份认证，针对不同的用户身份，授权访问不同范围的数据。</p>
<p>第四个支柱是<strong>创新实验基础设施和监控体系</strong>。为了让创新真正基于数据（而非拍脑袋）来开展，IT团队需要从多种来源采集关于系统、关于顾客的数据。需要根据业务目标在系统中埋设监控点，并及时把监控结果可视化呈现给业务用户。为了降低实验试错的风险，在把新版本发布给全部用户之前，应该以“金丝雀发布”的形式首先发布给一小部分用户，确保新版本不造成重大损害。系统需要支持功能切换开关（toggle），允许团队在不修改代码的前提下改变系统的行为，再加上用路由技术支持蓝-绿部署和A/B测试，方可高效地开展受控实验。</p>
<p>第五个支柱是支持全渠道的<strong>用户触点技术</strong>。为了通过多样化的触点技术向顾客提供随时随地、连贯一致的用户体验，整个企业需要建立对其顾客和目标顾客的唯一、连贯、准确、整体的视图，从而更好地了解和服务顾客。他们需要结合顾客的特征和不同数字渠道的特征建立连贯的内容策略，在多种渠道（例如电脑、智能手机、门店等）之间引导顾客的消费旅程，与顾客产生正确时间、正确地点、正确方式的交互。基于从各种渠道获得的顾客本人及其行为的数据分析，他们可以向顾客提供定制化的内容、服务和产品推荐。作为必要的技术保障，所有数字渠道的软件应用（尤其是原生的Android和iOS应用）都应该实践持续交付，这样才能实现全渠道的快速响应。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在数字化的浪潮面前，传统企业不必恐惧于互联网企业的技术优势。只要抓住交付基础设施、API和架构治理、数据自服务、创新实验基础设施和监控体系、用户触点技术这五个支柱，逐步建设自己的数字平台，不断提升IT效能、构建本行业的数字化生态系统、养成创新实验的习惯，传统企业同样可以用数字技术激活自己多年积累的核心资产，在新的竞争环境中找到自己的一席之地。</p>
<p><em>（更多关于数字平台战略的信息，请关注<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">ThoughtWorks数字平台战略网站</a>。）</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;传统企业正在面临IT新技术的挑战——单从“传统企业”这个居高临下的称谓，你就能读出“非传统企业”（也就是IT企业、互联网企业）满满的优越感。每天在各种新媒体平台看着BAT们又掌握了什么黑科技、又颠覆了哪个行业，“云大物移”已经成了高频出现的热词，传统企业们愈发清晰地感受到&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云时代的研发环境：实施路径</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/23/stack-management-approaches/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/23/stack-management-approaches/</id>
    <published>2017-04-23T05:04:00.000Z</published>
    <updated>2017-04-26T13:06:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2017/4/14/stack-management-implementation/">前文</a>讲到，在云计算的时代大背景下，我们推荐采用研发技术栈管理平台来集中管理组织中的技术栈，允许基于一个技术栈创建开发测试PaaS和生产PaaS两个PaaS服务，从而支撑开发、测试、生产三种运行时环境。通过三种运行时环境的区分，技术栈管理平台实质上设置了一条标准的精益软件生产流水线，为软件研发生命周期中的三个核心工种——开发、测试、运维——布置了标准的“工位”。在实施技术栈管理平台时，从这三个核心工种之中的任何一个切入，都可以优先建设该工种对应的工位，从而拉动整条云化生产流水线的实施。</p>
<p><img src="/assets/2017/4/22/base.png"></p>
<h2 id="从开发切入，打造规范的软件开发底座"><a href="#从开发切入，打造规范的软件开发底座" class="headerlink" title="从开发切入，打造规范的软件开发底座"></a>从开发切入，打造规范的软件开发底座</h2><p>在数字化的大背景下，众多IT组织都面临技术能力短缺的境况。尤其是传统企业的IT部门，需要用有限的研发专业技能交付越来越多、变化越来越频繁的IT系统，还需要管理外包合作方的团队，对于开发底座规范化的要求日益显著。这些开发团队常见的一些挑战包括：</p>
<ul>
<li>技术实践能力有限，不能保证每个项目采用业界最佳的框架与工具组合。</li>
<li>开发流程不规范，代码质量关注不够，技术债累积严重。</li>
<li>外包团队管理乏力，对外包团队的开发实践缺乏约束。</li>
</ul>
<p>实施技术栈管理平台以后，整个组织可以识别并聚焦几种具有普遍代表性的软件形态（例如“Java微服务”、“Java Web应用”、“安卓移动应用”等），集中技术骨干力量，搭建项目基础架构，以技术栈的形式固化下来。开发团队要启动一个项目时，只需要从技术栈管理的PaaS平台上选择自己需要的技术栈，就可以立即生成自己的构建运行时，其中包括代码仓库、应用基础框架、依赖软件、自动化构建工具等。基于这个构建运行时，开发团队可以基于已经搭好的脚手架立即开始编写代码，并在PaaS云上进行基本的验证，然后提交到团队代码仓库。团队的技术领导者不需要考虑开发环境应该如何配置，开发人员也不需要在自己的电脑上做任何环境准备工作，从而极大地降低了项目启动的技术门槛。</p>
<p>作为对开发工位的规范要求，技术栈中会规定“提交门”的质量标准，达不到质量标准的代码将无法提交到团队代码库中。这个实践与持续集成一样，都是源自丰田生产方式的“安灯”实践：如果出现质量隐患，应该立即停线修复，而不是让带着质量隐患的生产线继续运转。在一般的开发团队中，提交门的质量标准至少包括（1）代码能通过编译；（2）代码能通过静态质量检查。通过引入代码复杂度、代码规范性检查等基本质量标准，能促使开发团队关注代码质量，避免基本的技术债不断累积。水平较高的团队会在提交门中包含单元测试，单元测试不通过、或单元测试覆盖率达不到标准的代码将无法提交。</p>
<p>如果需要引入外包团队来协助开发，外包团队可以直接从技术栈管理PaaS服务商获得自己的构建运行时，绝大部分的开发规范可以用提交门验证的形式来承载，从而将组织的质量要求固化到开发环境中，降低规范化管理外包团队的难度和成本。</p>
<p><img src="/assets/2017/4/22/dev-impl.png"></p>
<p>在开发工位实施技术栈管理后，随着开发规范化底座的建立和开发阶段质量要求的逐渐提升，开发团队将具备逐步缩短交付周期的能力。随着开发交付周期缩短，待测试、待发布的版本会累积起来，对后续的测试和运维工位形成压力。此时研发管理者应该密切留意测试工位的累积情况。如果测试团队抱怨转测版本太多、人手不足，都反映出工位之间产能失衡的问题。当这一问题出现时，就应该抓住契机，提升测试工位的标准化和自动化程度，使测试工位能跟上开发的交付周期。</p>
<h2 id="从测试切入，建立云测试平台"><a href="#从测试切入，建立云测试平台" class="headerlink" title="从测试切入，建立云测试平台"></a>从测试切入，建立云测试平台</h2><p>在数字化、互联网化的IT大背景下，软件系统上线的周期不断缩短，两周一迭代已经成为众多团队的标准配置，一些创新型业务已经要求将上线周期缩短到一周、几天、甚至一天几次。不断缩短的上线周期，使很多IT组织在测试方面的问题暴露出来：</p>
<ul>
<li>测试自动化程度低，手工回归测试跟不上频繁上线的节奏。</li>
<li>测试环境争用，环境管理工作量大。</li>
<li>性能、安全等非功能性需求的测试投入不足，到项目晚期才开始测试。</li>
</ul>
<p>如果这些问题是一个组织当前最大的痛点，技术栈管理平台的实施也可以从测试工位开始入手，为整个组织打下坚实的质量保障基础。测试和开发的技术骨干可以一同选择适宜的自动化测试工具，将其连接配置好，准备好自动化测试的脚手架，打包到技术栈的验证运行时中。测试人员只需按照业务需求编写自动化测试例，并放在技术栈中规定的“验证门”环节自动执行。当系统最重要的功能都能被自动化测试覆盖，测试人员就能从繁重的手工回归测试中解脱。</p>
<p>自动化测试需要可靠且可复制的测试环境来执行，这正是云计算的优势所在。在技术栈管理PaaS中定义了测试运行时环境后，每当测试人员或自动化的验证门要执行自动化测试例时，就会从云中取出一个测试运行时，其中除了被测系统的依赖软件外，还包含了配置好的各种测试工具。被测系统会被加载到测试运行时环境中，执行自动化测试例，收集测试报告，然后测试运行时环境就会被销毁回收。整个过程中不需要测试人员手工管理测试环境，也不需要与其他测试或开发人员共用一套环境。</p>
<p>一旦测试人员不用“人肉回归”大部分软件功能，他们就可以把更多的精力投入非功能性测试。性能测试、安全性测试等非功能性测试所需的工具集同样可以被内建在技术栈中，方便测试人员日常工作。同时，测试人员还可以把非功能性测试编写成自动化的测试例，将其加入验证门的测试集，从而使非功能性需求也持续得到保障，以免在项目晚期才发现重大性能或安全问题。</p>
<p><img src="/assets/2017/4/22/test-impl.png"></p>
<p>当云测试平台建立起来，有了基本的自动化测试覆盖，测试人员就可以起到质量监督和建议的作用，而不是跟在开发后面做简单重复的手工验证。由于软件产品必须在验证运行时上通过测试，研发管理者就可以借此拉动开发团队使用云测试平台进行自验证，在习惯养成后再逐步在开发过程中推广使用构建运行时，从而用一个技术栈拉通开发和测试的工作环境。</p>
<h2 id="从运维切入，构建高响应运维能力"><a href="#从运维切入，构建高响应运维能力" class="headerlink" title="从运维切入，构建高响应运维能力"></a>从运维切入，构建高响应运维能力</h2><p>同样，数字化、互联网化的大背景也对运维团队提出了新的挑战。从业务客户的角度，他们不仅希望自己的需求能尽快上线被用户使用，而且还希望及时获得来自用户的反馈，帮助他们做出调整。在一些领先的企业，运维更是能支持业务客户针对真实用户进行快速的受控实验，从而验证自己的业务假设。在这些新的要求下，很多IT组织的运维团队暴露出了能力上的不足：</p>
<ul>
<li>运维自动化程度低，需要大量手工操作，工作量大，可靠性低，容易出错。</li>
<li>系统监控不完备，出现故障时不能及时发现和快速排错。</li>
<li>生产系统的信息不能快速转换成业务洞见，无法支持频繁的线上受控实验。</li>
</ul>
<p>技术栈管理平台的实施同样可以从运维工位入手，以打造高效的DevOps体系为优先目标。</p>
<blockquote>
<p><strong>你说的是哪种DevOps？</strong></p>
<p>由于历史原因，如今大家在谈起“<a href="https://en.wikipedia.org/wiki/DevOps" target="_blank" rel="external">DevOps</a>”这个词时，其中包含的可能是三重相关但不同的含义：</p>
<ol>
<li>如何借助基础设施即服务、运维自动化等手段，加快代码部署到生产环境的速度。</li>
<li>如何借助日志和监控手段，及时把生产环境的情况反馈到开发团队。</li>
<li>如何借助端到端的埋点、数据采集、分析和可视化，把用户行为反馈到业务。</li>
</ol>
</blockquote>
<p>以运维视角优先切入时，技术栈的建设就自然地偏向运维工具。在支持计算资源弹性分配的IaaS层（例如基于<a href="http://scaleworks.cn/" target="_blank" rel="external">ScaleWorks</a>的私有云）之上，将自动化配置管理工具（例如Chef、Puppet、Ansible）及其他常用的运维工具打包在应用运行时中，运维人员可以随时从技术栈管理的PaaS服务中获得完整且配置好的应用运行时，再从通过了测试验证（可能是手工验证）的发布候选版本中选择一个放入应用运行时，即可快速完成应用的部署上线。生产环境的配置以代码形式记录，可以由技术能力较强的DevOps团队专门维护，从而省去了大多数运维人员手动管理运行时环境的工作量与风险。</p>
<p>在应用运行时环境中，可以根据软件系统的特征预先配置好日志工具（例如ELK、Splunk）和服务指标监控工具（例如Collectd），使开发团队无需额外工作就能获得丰富有用的生产环境信息。一些水平更高的团队会在应用运行时环境中设置更智能化的运维功能（例如基于Hystrix的服务熔断机制），使运维更具响应力。</p>
<p>应用运行时环境中还可以植入端到端<a href="https://martinfowler.com/bliki/SyntheticMonitoring.html" target="_blank" rel="external">综合语义监控</a>所需的工具设置，从而支持对业务场景埋点和分析，甚至是结合<a href="http://blog.christianposta.com/deploy/blue-green-deployments-a-b-testing-and-canary-releases/" target="_blank" rel="external">流量路由技术</a>进行受控实验，用数据为业务决策提供支撑。业务有了缩短反馈周期的诉求，运维有了快速响应变化的能力，两端夹击可以倒逼研发环节提升响应力、缩短交付周期，这也是研发组织变革的一个套路。</p>
<p><img src="/assets/2017/4/22/op-impl.png"></p>
<p>运维工位采用技术栈管理平台以后，研发管理者可以从交付物入手倒逼开发和测试环节，要求通过测试的发布候选版本以容器镜像的形式交付，以保证上线效率和可靠性；同时提供基于技术栈管理PaaS的构建和镜像版本管理基础设施，方便开发和测试团队构建符合要求的交付物。等开发和测试团队养成基于云和容器环境的交付方式，就可以逐步实施云测试平台和基于技术栈的开发底座。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>技术栈管理平台的目标是为现代IT组织创造云环境下的精益软件生产流水线。但对于很多组织而言，这条流水线并非一步到位，而是一个分阶段建设的过程。在这条流水线上，开发-测试-运维三个核心工位都可以成为实施技术栈管理的切入点。从组织当前最显著的痛点出发，选择一个工位开始实施云化的技术栈管理平台，并依循<a href="https://en.wikipedia.org/wiki/Theory_of_constraints" target="_blank" rel="external">瓶颈理论</a>拉动其他工位的逐步改进，这对于众多不以IT能力见长的组织而言，是一条可行的云化、数字化道路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2017/4/14/stack-management-implementation/&quot;&gt;前文&lt;/a&gt;讲到，在云计算的时代大背景下，我们推荐采用研发技术栈管理平台来集中管理组织中的技术栈，允许基于一个技术栈创建开发测试PaaS和生产PaaS两个PaaS服务
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>沃尔玛的数字化平台分析</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/19/walmart-digitization/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/19/walmart-digitization/</id>
    <published>2017-04-19T05:01:00.000Z</published>
    <updated>2017-04-18T13:58:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>尽管2009年就已上线了电商平台Marketplace，但直到2011年，沃尔玛在数字化领域也不能算成功者。当时他们的电商网站只有相当基本的功能，用户体验不算方便，搜索不太好用，也不能与店面或供应链无缝对接。之前的几年，沃尔玛的电商收入跟其他零售商（例如西尔斯、梅西）一样缓慢线性增长。正因为如此，当沃尔玛的电商收入在2011年至2014年的三年间增长150%、从年销量49亿美元增长到122亿美元、超过史泰博（Staples）成为亚马逊和苹果之后美国第三大在线零售商时，这一变化才更令人好奇。</p>
<p><img src="/assets/2017/4/19/wal-mart.jpg"></p>
<h2 id="数字化之旅"><a href="#数字化之旅" class="headerlink" title="数字化之旅"></a>数字化之旅</h2><p>沃尔玛的全球电商部门主要有三方面的责任与行动：</p>
<ol>
<li>运营沃尔玛全球10个网站，在线提供超过700万种SKU，无缝连接门店与仓库，给顾客提供多种购物选择。</li>
<li>通过@WalmartLabs这个创新孵化器，不断更新网站和移动应用，利用顾客数据和社交网络洞察预测顾客行为，给顾客提供更好的在线和在店购物体验。</li>
<li>对内打造沃尔玛的电商能力，在全美国建设线上业务服务中心，建设新的电商操作系统Pangaea。</li>
</ol>
<p>为了达到这些目标，沃尔玛在几年中收购了多家IT企业，光是作为创新引擎的@WalmartLabs就收购了14支科技团队，为整个企业的数字化转型提供了能力上和文化上的支撑。2013年，沃尔玛收购了提供云计算解决方案的<a href="http://oneops.com/" target="_blank" rel="external">OneOps</a>公司。该公司拥有成熟的PaaS和私有云IaaS能力，支持多种公有和私有云平台，包括Azure、Rackspace、AWS、OpenStack等，与沃尔玛的云化、服务化趋势相符。到2016年，沃尔玛全公司有超过3000名工程师基于OneOps平台开发和管理IT系统。</p>
<p>在电商销量猛增的过程中，沃尔玛的IT系统遭遇了性能瓶颈，这也是他们开始将IT系统服务化的重要出发点。他们希望“系统拥有足够的弹性去处理峰值，同时不产生负面的用户体验”。事实证明，微服务架构带来的效果是明显的：</p>
<ul>
<li>销售提升：转化率在一夜之间提升了20%，移动端的订单立即增长了98%；</li>
<li>可靠性提升：黑色星期五或节礼日等大型购物节期间，再没有出现过宕机；</li>
<li>运维成本降低：将昂贵的硬件换成了便宜的X86服务器，节省了40%的计算资源，总成本下降了20-50%。</li>
</ul>
<p>沃尔玛还把自己的数字化能力提供给自己的供应商。2014年，他们上线了自己的广告平台Walmart Exchange（WMX），用自己门店和线上电商的数据帮助供应商更有效地投放广告（包括沃尔玛网站、第三方网站和邮件广告）。</p>
<h2 id="数字平台战略视角分析"><a href="#数字平台战略视角分析" class="headerlink" title="数字平台战略视角分析"></a>数字平台战略视角分析</h2><p>从<a href="https://www.thoughtworks.com/digital-platform-strategy" target="_blank" rel="external">数字平台战略</a>的角度分析，沃尔玛在构建自己的数字平台能力支柱方面已经取得了令人瞩目的成绩，这也是其电商销量能大幅提升的重要原因。</p>
<h3 id="交付基础设施"><a href="#交付基础设施" class="headerlink" title="交付基础设施"></a>交付基础设施</h3><ul>
<li>通过将业务系统改造为大量、小规模、无状态的服务，使系统可以部署到廉价服务器的集群上。同时弹性基础设施也允许随需增减计算节点。</li>
<li>没有应用服务器。所有服务以standalone的形式通过docker部署。</li>
<li>全面的监控机制（使用ConductR），当服务失败时能自动响应，并提供排错所需的信息。在集群层面汇集日志，避免需要分别查看每个节点的日志。</li>
<li>Akka可以把一个交易建模为一个有穷状态机，可以在中途持久化状态，可以取回状态，提供了一种错误恢复的机制。</li>
<li>Akka的监控（supervisor）机制类似于Erlang：“let-it-crash”，不需要假设虚拟机或计算节点可靠。</li>
</ul>
<h3 id="API和架构治理"><a href="#API和架构治理" class="headerlink" title="API和架构治理"></a>API和架构治理</h3><ul>
<li>用Play实现API Gateway，以RESTful API的形式为其背后的系统提供统一的入口。</li>
<li>原来的大块系统按照业务领域划分为小块，团队也随之划分，例如搜索团队、商品团队等等。每个bounded context有它自己的词汇表、拥有自己的数据。</li>
<li>服务切分不仅仅是IT系统的事，而是组织、代码、数据库三个层面的重构。一开始不先直接做“硬”的切分，而是先从逻辑上做划分（例如数据库的schema命名规则、代码的包），然后检查是否有循环依赖；等依赖关系逐渐理清了，再分解成独立的服务、独立的数据库、甚至NoSQL数据库。</li>
<li>解决性能问题的主要方式是通过异步操作（使用Akka）：把数据库写操作异步化，从而减少对JVM线程的占用，并且使能并行处理，极大地提升系统的性能和可扩展性。</li>
</ul>
<h3 id="数据自服务"><a href="#数据自服务" class="headerlink" title="数据自服务"></a>数据自服务</h3><ul>
<li>因为数据量太大，必须改变ETL、数据预处理的思路，对数据做真正意义上的实时处理（使用Akka Streams）。</li>
<li>用Spark对数据进行单件流处理，数据处理的延迟由6小时（ETL过程）缩短到10秒。</li>
</ul>
<p>数据方面的架构如图：</p>
<p><img src="/assets/2017/4/19/data-arch.png"></p>
<h3 id="创新实验基础设施"><a href="#创新实验基础设施" class="headerlink" title="创新实验基础设施"></a>创新实验基础设施</h3><ul>
<li>组织层面上，@WalmartLabs是一个创新的孵化器机制。</li>
<li>技术层面上，OneOps提供了路由技术和监控能力，使在线的快速实验成为可能。</li>
<li>WMX能统一收集和利用各种渠道（门店和电商）的用户数据。</li>
</ul>
<h3 id="客户触点技术"><a href="#客户触点技术" class="headerlink" title="客户触点技术"></a>客户触点技术</h3><ul>
<li>@WalmartLabs对整个组织输出全渠道、移动、响应式设计等能力。</li>
<li>沃尔玛的电商平台支持多种客户触点（电脑、移动）。Walmart.com在美国的流量超过一半来自移动设备，Walmart Pay应用部署到4600多家门店。</li>
<li>使用大数据（购买行为、搜索历史等）个性化顾客的交互体验。个性化搜索引擎Polaris提升了20%在线销售转化率。</li>
<li>WMX支持单一顾客视图，形成对顾客的全面理解。</li>
</ul>
<h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><ul>
<li><a href="https://www.applicoinc.com/blog/walmart-jet-digital-transformation/" target="_blank" rel="external">电商平台的介绍</a></li>
<li><a href="https://rctom.hbs.org/submission/digitization-at-walmart/" target="_blank" rel="external">业务数字化整体介绍</a></li>
<li><a href="https://www.capgemini-consulting.com/resource-file-access/resource/pdf/walmart_pov_15_7_2015.pdf" target="_blank" rel="external">另一篇业务数字化整体介绍</a></li>
<li><a href="https://risnews.com/walmart-boosts-efficiency-digital-media-platform" target="_blank" rel="external">关于WMX的报道</a></li>
<li><a href="grumomedia.com/walmart-exchange-wmx/">介绍WMX的视频</a></li>
<li><a href="https://digit.hbs.org/submission/walmart-exchange-using-data-to-go-from-retail-to-media/" target="_blank" rel="external">WMX的分析</a></li>
<li><a href="https://www.youtube.com/watch?v=SPGCdziXlHU" target="_blank" rel="external">关于微服务架构转型的演讲</a></li>
<li><a href="https://techcrunch.com/2016/01/26/walmart-launches-oneops-an-open-source-cloud-and-application-lifecycle-management-platform/" target="_blank" rel="external">关于收购OneOps的报道</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管2009年就已上线了电商平台Marketplace，但直到2011年，沃尔玛在数字化领域也不能算成功者。当时他们的电商网站只有相当基本的功能，用户体验不算方便，搜索不太好用，也不能与店面或供应链无缝对接。之前的几年，沃尔玛的电商收入跟其他零售商（例如西尔斯、梅西）一样缓
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>技术栈管理：云时代的研发环境</title>
    <link href="http://gigix.thoughtworkers.org/2017/4/14/stack-management-implementation/"/>
    <id>http://gigix.thoughtworkers.org/2017/4/14/stack-management-implementation/</id>
    <published>2017-04-14T05:01:00.000Z</published>
    <updated>2017-04-13T15:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/2017/3/31/stack-management">前文</a>介绍了云计算大背景对研发环境的影响。我们已经指出，现代IT组织应该把研发技术栈以PaaS的形式提供给开发人员，其中的要点是：</p>
<ul>
<li>将标准的研发环境封装为虚拟化、云化的技术栈，由技术专家管理维护；</li>
<li>核心业务价值与技术支撑解耦，工程师专注于业务系统的开发；</li>
<li>自动化研发流程，降低研发管理成本。</li>
</ul>
<p><img src="/assets/2017/4/13/hearty_cloud-wide.jpg"></p>
<p>如何实现这样一个研发技术栈管理的平台？我们的观点是，这样<strong>一个平台</strong>应该集中管理组织中的技术栈，允许基于一个技术栈创建开发测试PaaS和生产PaaS<strong>两个PaaS服务</strong>，从而支撑开发、测试、生产<strong>三种运行时环境</strong>。</p>
<h2 id="一个平台"><a href="#一个平台" class="headerlink" title="一个平台"></a>一个平台</h2><p>在一个典型的敏捷软件开发场景（例如更具体的“用Java开发微服务”的场景）中，开发者需要频繁地用到下列工具：</p>
<ul>
<li>编程框架，提供基础的结构与功能来支撑业务逻辑代码，例如Spring Boot和Jersey。</li>
<li>版本控制工具，例如git。</li>
<li>依赖软件，例如PostgreSQL数据库。</li>
<li>自动测试工具，包括单元测试工具（TestNG）和功能测试工具（Concordion、Selenium）。</li>
<li>自动构建工具，Maven或Gradle。</li>
<li>持续集成工具，Jenkins或GoCD。</li>
</ul>
<p>所有这些工具以及它们适当的组合与配置，我们把它称为一个<strong>技术栈</strong>。我们上面的例子就是“Java微服务开发技术栈”，类似的，一个组织中还可以有“Java Web应用开发技术栈”、“H5前端开发技术栈”、“ReactNative移动应用开发技术栈”等等若干个技术栈。对于一般的IT组织而言，有限的几种技术栈就可以覆盖大部分软件项目的形态。体量大如有数万研发员工的某IT巨头，提出的主要技术栈也只有十余种。</p>
<p>在传统的软件开发团队中，技术栈的组合与配置是<a href="http://insights.thoughtworkers.org/thoughtworks-practice-part8/" target="_blank" rel="external">由团队的技术领导者负责</a>的。在云计算的大背景下，将<a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code" target="_blank" rel="external">基础设施作为源代码</a>的思想再往前推一步，我们就会很自然地得出<strong>技术栈作为源代码</strong>的想法：使用Docker和Ansible等技术，将技术栈的结构以源代码的形式描述。在“基础设施作为源代码”的阶段我们已经知道，以源代码形式管理环境会带来很多好处，例如更高的自动化程度、允许版本控制等。把技术栈作为源代码以后，会带来几个重要的收益：</p>
<ol>
<li>技术栈可以很容易地复用，因此可以把搭建技术栈的工作收拢到较少数技术领导者手中，研发团队则只需在技术栈基础上开发业务功能，降低了研发团队的技能门槛。</li>
<li>最佳实践可以被内嵌到技术栈中，并通过持续集成的形式对研发团队形成约束，从而使研发改进举措更容易推行。</li>
<li>缩短研发实践的实验和创新周期，可以对多个研发团队开展受控对比实验，团队中自发产生的优秀实践可以被快速抽取并固化到技术栈中。</li>
</ol>
<p>技术栈管理平台作为组织级的研发管理载体，承载的是组织对研发团队的引领和治理形式。在这个平台上，技术领导者会创建并维护技术栈，项目团队则可以根据自己的需要选择适合的技术栈，跳过大部分<a href="http://peterschuh.com/?p=129" target="_blank" rel="external">迭代0的技术准备工作</a>，直接进入功能开发，并在整个产品生命周期中享受云化开发环境带来的收益。</p>
<p><img src="/assets/2017/4/13/stacks.png"></p>
<h2 id="两个PaaS"><a href="#两个PaaS" class="headerlink" title="两个PaaS"></a>两个PaaS</h2><p>基于已经定义好的技术栈，当项目团队开始研发工作时，技术栈管理平台可以为他们创建两个PaaS服务：一个是研发过程中使用的开发测试PaaS，另一个是真实上线用的生产PaaS。两个PaaS的协作关系如下：</p>
<p><img src="/assets/2017/4/13/two-paas.png"></p>
<ul>
<li>开发人员从开发测试PaaS中获得一个开发环境，在这个环境中编写代码；</li>
<li>新编写的代码被提交到代码库中，后台的服务自动运行“提交门”测试，测试通过后，把代码构建成可运行应用；</li>
<li>后台服务针对可运行应用自动运行“验证门”测试，测试通过后，这个版本的可运行应用即被标记为可发布应用，并被存入构建产物仓库；</li>
<li>测试人员针对通过了“验证门”测试的可发布应用进行必要的手工验证；</li>
<li>生产环境与开发/测试环境基于同一个技术栈（运行时环境上有具体的差别），开发测试PaaS中构建出的可运行应用可以直接部署到生产环境；</li>
<li>随不同组织的发布流程不同，构建产物仓库中的可发布应用可能直接（自动或手动）发布到生产环境，也可能被同步到生产PaaS的产品仓库，以后再手动发布到生产环境。</li>
</ul>
<p>可以注意到，这个流程、尤其是在开发测试PaaS中发生的流程，与Dave Farley在《<a href="http://www.infoq.com/cn/minibooks/thoughtworks-anthology" target="_blank" rel="external">一键发布</a>》文中介绍的持续集成流水线非常相似。我们相信：持续集成对于现代软件开发是如此重要，以至于它不应该以独立的工具形式存在（因为这样人们就有可能不用或者误用）。持续集成应该被内建在软件开发的工具和过程中，使它不被开发者注意、同时又不能被绕开——正如Spring内建了面向接口编程、IntelliJ IDEA内建了编译和代码格式检查。</p>
<h2 id="三个运行时环境"><a href="#三个运行时环境" class="headerlink" title="三个运行时环境"></a>三个运行时环境</h2><p>前面介绍的流水线已经暗示，在整个软件交付周期中，存在三个不同的运行时环境。这三个运行时环境都有同样的基础，例如操作系统、依赖软件等。同时它们也有一些重要的差异：</p>
<ol>
<li>构建运行时：包含开发工具、构建工具和（可能是部分）测试工具，这是开发人员编写代码的主要环境——需要注意，“编写代码”在敏捷软件开发的上下文中意味着“编写代码并频繁进行提交门测试”，这是为什么这个运行时环境中必须包含（至少部分）测试工具。</li>
<li>验证运行时：包含全部测试工具及其他质量保障工具，这是对软件质量进行全面验证的主要环境。</li>
<li>应用运行时：包含运维工具，这是软件真正运行的环境。这个运行时可能被应用于生产环境，也可能仅用在组织内部（例如UAT测试环境、培训环境、demo环境等）。这个运行时中的依赖软件（尤其是数据库）也有可能被替换为环境之外独立运行的软件。</li>
</ol>
<p><img src="/assets/2017/4/13/three-runtimes.png"></p>
<p>尽管为了支持不同环节的工作要求而有这些差异的存在，底线是：构建运行时构建出来的可运行应用，可以在验证运行时中接受完整的验证，也可以被部署到应用运行时正常运行。这与持续交付中“<a href="https://highops.com/insights/continuous-delivery-pipelines-gocd-vs-jenkins/" target="_blank" rel="external">制成件流过整个流水线</a>”（而非在各个构建步骤中分别生成制成件）的理念是一致的。</p>
<blockquote>
<p><strong>制成件的形式</strong></p>
<p>在<a href="/2017/3/31/stack-management">前文</a>中我们已经提到：软件包是一种对云环境不友好的交付形式，理想的研发交付物应该是容器镜像（很可能是一组彼此连接的容器镜像），可以在云上直接运行。Docker等容器技术使我们可以把所有软件（不论背后使用什么编程语言、实现什么功能）都抽象为“IP地址+端口”的服务；再加上例如Docker Swarm或Kubernetes之类集群工具的支持，更可以把服务进一步简化为一个端口。于是，技术栈管理的基础设施可以得到更大程度的复用：不同的技术栈（不管编程平台是Java、NodeJS还是Python）构建出的应用都是一个（或一组）Docker镜像，从而将“产物的形态”与“生产流程的结构”解耦。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>针对<a href="/2017/3/31/stack-management">前文</a>提出的云计算大背景下对软件研发提出的挑战，本文提议了一种解决方案：技术栈管理平台。通过实施技术栈管理平台，为研发团队提供开发测试PaaS和生产PaaS两个PaaS服务、构建/验证/应用三个运行时环境，研发组织能够将技术栈的搭建和管理与业务系统的研发解耦，从而降低研发团队技能门槛、快速有效地推广研发最佳实践、使研发过程中的技术与流程实验和创新成为可能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;/2017/3/31/stack-management&quot;&gt;前文&lt;/a&gt;介绍了云计算大背景对研发环境的影响。我们已经指出，现代IT组织应该把研发技术栈以PaaS的形式提供给开发人员，其中的要点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将标准的研发环境封装为虚拟化、云化
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>云时代的研发环境长什么样？</title>
    <link href="http://gigix.thoughtworkers.org/2017/3/31/stack-management/"/>
    <id>http://gigix.thoughtworkers.org/2017/3/31/stack-management/</id>
    <published>2017-03-31T05:01:00.000Z</published>
    <updated>2017-03-30T15:29:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>云计算正在毫无疑问地成为企业IT的主流。据<a href="http://www.mckinsey.com/industries/high-tech/our-insights/it-as-a-service-from-build-to-consume" target="_blank" rel="external">麦肯锡调查</a>，六成以上的企业计划在两年内将某种形式的云作为主要IT平台。在国内银行业，<a href="http://www.cbrc.gov.cn/chinese/home/docView/1940BD4B2D7740CC90F4FE4C6B3CD316.html" target="_blank" rel="external">中国银行业信息科技“十三五”发展规划监管指导意见</a>中明确提出：到2020年，国内银行业面向互联网场景的重要信息系统应全部迁移至云计算架构平台，其他系统迁移比例不低于60%。其他行业也有同样的趋势。信息系统云化的大背景给软件系统的研发流程带来了什么挑战，作为软件研发组织的领导者应该如何应对这些挑战？这是本文试图回答的问题。</p>
<p><img src="/assets/2017/3/31/cloud_challenge.png"></p>
<p>首先，有必要回顾云计算给企业IT带来的收益。<a href="https://www.ibm.com/cloud-computing/learn-more/benefits-of-cloud-computing/" target="_blank" rel="external">IBM认为</a>云计算有三大优势：</p>
<ol>
<li>更灵活。用户可以根据需要，“弹性地”获得IT服务。</li>
<li>更高效。减少IT团队管理和维护底层基础设施的工作量，IT服务可以更快推向市场。</li>
<li>战略价值。通过灵活组合现有IT资产与新兴数字渠道，支撑企业业务创新。</li>
</ol>
<blockquote>
<p><strong>云计算与虚拟化的区别</strong></p>
<p>有很多企业已经采用了虚拟化技术：将企业的计算资源（服务器、存储等）集中管理，以虚拟机的形式分配给使用者。<a href="http://www.businessnewsdaily.com/5791-virtualization-vs-cloud-computing.html" target="_blank" rel="external">虚拟化与云计算的区别</a>在于：虚拟化是指“用软件管理硬件资源”，而云计算是指以虚拟化方式管理硬件资源之后能够对外提供的服务。</p>
<p>除去这个概念上的差异，我们注意到一些企业在谈论“虚拟化”的时候，背后隐含着一个自动化程度不高的、需要人工参与的虚拟机申请和开通的流程。在这样的流程下，获得一台虚拟主机需要的时间通常以天计。因此，虚拟机的使用者倾向于预先申请虚拟主机并长期占用。在这种情况下，“虚拟化”往往意味着缺乏弹性（elasticity）的计算资源分配——尽管虚拟化技术本身并不妨碍弹性。</p>
</blockquote>
<p>可以看出，为了兑现云计算的三大优势，企业IT系统必须云化：软件的形态由从前需要在本地安装的软件包，转变为透过网络在线使用的服务，让使用者随时能够获得；原来体型巨大的单体（monolithic）应用，需要转变为细粒度的服务，从而支持灵活的组合与复用。</p>
<p>原来习惯了开发本地安装的软件包和/或巨大的单体应用的研发团队，现在要转为开发云化的软件服务，这个转变并非总是无痛的。首先，研发交付物的形态应该是对云环境友好的。从前研发交付物通常是以软件包的形式提供给用户或是运维团队，例如平台特定的JAR、WAR、EGG等软件包，或是RPM、DEB、MSI等操作系统特定的软件包。软件包是一种对云环境不友好的交付形式，因为它没有包含软件运行的环境。例如一个软件需要用到PostgreSQL数据库和monit作为监控工具，平台特定的软件包无法确保这些软件依赖的存在；某些操作系统特定的软件包可以描述软件依赖，但也无法确保依赖软件被正确地配置。过去一段时间里，自动化的配置工具（例如Chef/Puppet/Ansible）被用于解决运行时环境的问题。而在今天的技术背景下，理想的研发交付物应该是容器镜像（很可能是一组彼此连接的容器镜像），可以在云上直接运行。</p>
<p>对研发交付物的要求随即会影响到研发过程。为了在研发流程的出口得到服务化友好的交付物，最好是在整个开发过程中一直使用与生产环境近似的环境。例如开发人员应该使用全套环境随时验证，自动化测试和手工测试都基于全套环境开展。在这种情况下，环境的设置、管理、更新不可能由每个开发人员和测试人员自己进行，所以环境的管理更新必定是集中进行的，环境的设置必定是自动化的。而且，如果环境固定分配、长期使用，对计算资源的占用可能很大，所以环境应该是云化的、弹性的、按需获得的。</p>
<p>云计算的大背景还会影响研发实践。为了降低搭建研发环境的技术难度，云化的研发环境应该内建研发工具链（包含开发工具、质量保障工具、持续集成/持续交付工具、DevOps工具、项目管理工具等）。为了规范团队研发质量水平，良好的研发实践（例如代码静态检查、自动化测试等）和流程要求应该固化在工具的日常操作中。理想的情况下，研发团队应该只聚焦关注业务功能开发。开发工具的组合、生产环境的配置、持续集成和持续交付流水线的搭建等工作都应该被标准化和自动化。</p>
<p>综上所述，在云计算的大背景下，IT组织需要将更多的软件应用部署在云上。云化的IT系统对软件研发的交付物、研发过程、研发实践都提出了新的要求。我们认为：现代IT组织应该从研发环节开始，以原生支持云计算的方式提供、管理和维护研发环境，从而在研发过程中利用云环境的弹性，确保研发交付物对云环境友好，并把优秀的研发实践和流程要求内嵌到研发环境之中。IT组织可以通过以下方式管理其研发环境：</p>
<ul>
<li>将标准的研发环境封装为虚拟化、云化的技术栈，由技术专家管理维护；</li>
<li>核心业务价值与技术支撑解耦，工程师专注于业务系统的开发；</li>
<li>自动化研发流程，降低研发管理成本。</li>
</ul>
<p>在下一篇文章里，我将介绍如何具体实现技术栈的云化管理，把研发技术栈以PaaS的形式提供给开发人员。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;云计算正在毫无疑问地成为企业IT的主流。据&lt;a href=&quot;http://www.mckinsey.com/industries/high-tech/our-insights/it-as-a-service-from-build-to-consume&quot; target=&quot;_b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cybersyn的系统架构</title>
    <link href="http://gigix.thoughtworkers.org/2017/3/27/cybersyn-architecture/"/>
    <id>http://gigix.thoughtworkers.org/2017/3/27/cybersyn-architecture/</id>
    <published>2017-03-27T05:01:00.000Z</published>
    <updated>2017-03-26T13:27:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>前文《<a href="http://gigix.thoughtworkers.org/2016/12/24/cybersyn-1/">半个世纪前的大数据时代</a>》讲到，1970年代初，英国的控制论学者斯塔福·比尔应阿连德总统之邀，远赴智利去开发一套用于管理国有经济的大数据IT系统。本文将介绍这套远远超前于时代的系统是如何在当时的技术条件下架构和建设起来的。</em></p>
<p><img src="/assets/2017/3/27/title.jpeg"></p>
<h2 id="生产大战中的控制论"><a href="#生产大战中的控制论" class="headerlink" title="生产大战中的控制论"></a>生产大战中的控制论</h2><p>在阿连德执政的第⼀年，智利政府开始将国内最重要的⼀些⼯业收归国有。到1971年底，政府已经把所有主要矿业公司和68家最重要的⼯⼚由私有转为公有。智利正在打⼀场“⽣产⼤战”，提⾼⼯业⽣产⽔平被视为智利社会主义成功的关键。管理已经成为国有化进程的⼀个核⼼问题，政府计划把⼯业管理作为第⼆年的⼯作重⼼。国有经济的⾼速发展创造了⼀个笨重的、智利政府从未⻅过的怪兽，这是问题的根本所在。</p>
<p>在这样的大背景下，斯塔福·⽐尔于1971年11⽉4⽇星期⼆抵达智利，邀请他的是智利国家开发公司（CORFO）的技术主管费尔南多·弗洛雷斯。经过弗洛雷斯的介绍，比尔对智利面临的挑战有了一个大体的理解。控制论思考帮他识别出如何改进智利政府管理经济的⽅式。例如，⽐尔发现政府可以建⽴新的通信渠道，促进数据交换，提升政府决策速度。同时他也认识到⾃⼰⾯临的约束。成⽴新的政府部⻔或是对现有政府机关进⾏根本性重组可能可以极⼤提升管理能⼒，但当前的关键是要快速⻅效，政府没有时间来成⽴新的调控部⻔，也⽆法⼤规模修正和重建现有的机构。</p>
<p>在⽐尔和弗洛雷斯的构想中，控制论科学扮演着双重⾓⾊。控制论的管理视⾓，尤其是可⽣存系统模型，能够指导CORFO所需的组织变⾰、避免实施⻓远来看低效甚⾄有害的权宜之计。同时，控制论中关于反馈与掌控的思想能够指导开发⼀套新的科技系统来改善国有经济的管理，从⻋间直到CORFO办公室。发源于⽐尔的“⾃由机器”思想，这样⼀个系统将会搭建起实时信息交换的网络，其中会⽤到⼤型主机技术。管理者和政府官员将能够基于实时数据来做决策，并能够快速调整⾏动⽽不被政府官僚体系束缚。管理控制论还能改善政府从国营企业获取信息的⽅式。当这些数据流得到改善，弗洛雷斯和⽐尔相信政府能加强对智利⼯业的管控，并最终赢得⽣产⼤战。</p>
<p>基于这一构想，比尔提议建设Cyberstride项目，后来这个项目改名为“Cybersyn”。Cybersyn系统结合了比尔早期著作中的思想，包括他的文章《自由机器》中提到过的控制室。这个系统将依赖于每天从国有产业采集来的数据，用大型主机对未来经济行为进行统计学预测。随着智利的计算机操作员输入更多来自企业的最新数据，系统每天都会对预测做出更新。</p>
<h2 id="只有一台计算机的网络"><a href="#只有一台计算机的网络" class="headerlink" title="只有一台计算机的网络"></a>只有一台计算机的网络</h2><p>Cybersyn的骨干是一个支持实时数据交换的通信网络。将国家开发公司（CORFO）与工厂车间连接起来，就能建立“向上滚动”式管理所需的条件，使政府能够快速处理诸如原材料短缺等紧急状况，并及时调整政策。最新的生产数据还让经验丰富的管理者（通常位于行业委员会或更高的级别）能帮助缺乏经验的干预者识别他们工厂里的问题，并在必要时调整生产行为以达到国家的目标。按照比尔的构想，这种信息交换会以很快的速度持续发生，并且总是以指导行动为目标。通信、适应和行动，这些都是管理控制论的核心要素，它们就是比尔在组织与生物有机体之间发现的共性：两者都需要快速适应，才能在变动的环境中生存。弗洛雷斯与比尔一样重视时间，两人都认为：数据如果不能指导行动，那就是被浪费了。</p>
<p>除了通信网络和用于生成经济预测的软件，Cybersyn项目还需要一个计算机程序来模拟智利经济。另外，CORFO成员会把生产数据汇总，并以直观的形式显示在指挥室里，以便政府的决策者理解。这些数据显示会帮助决策者看清国家经济形势，并基于智利工业的现状制定政策。</p>
<p>按照比尔的提议，Cybersyn项目的设计考虑到了智利科技的局限。国家计算机公司（ECOM）的主管雷蒙多·贝卡只给比尔提供了一台大型主机的处理时间，这是一台IBM 360/50，ECOM当时性能最强的主机。鉴于计算机公司只有4台主机，全都非常繁忙，贝卡只能提供一台机器是完全能理解的。但这就意味着比尔的团队必须用一台计算机来建设一个计算机网络。</p>
<p>对这个看似不可能的要求，比尔给出了设计方案：他为Cybersyn项目设计了一个通信网络，整个网络都连接到这一台大型主机。为了实现这个非传统的网络架构，比尔和团队需要找到一种便宜的方式来实时、长距离传输数字数据和文本。他们找到的办法是电传机（电传打字机），这些机器已经通过现有的电话线、卫星或微波通道联网。在1970年代初，电传机已经在全世界广泛使用，不是什么高新科技。每台电传机都有一个身份识别号，就跟电话号码类似，用户拨打这个号码，就可以在两台机器间建立连接。然后用户可以用电传机的键盘输入信息；信息会被翻译成纸带上的打孔，再通过网络把打孔纸带的信息传输出去；另一端的电传机则读取纸带，翻译出原来的信息，从而完成信息的传播。用户往往会预先准备好纸带，以便尽量减少连接网络的成本，不过电传机也允许两端的用户通过打字来回交谈。一旦收到信息，接收方的电传机就会在一串嘈杂的咔嗒声中打出一行行文字，听起来不像是传真机，倒更像是电子打字机。在1970年代初的智利，电话尚属稀缺资源，电话网络也不够可靠。电传机提供了另一种国内乃至国际通信的方式。所以，比尔提议在电传机网络的基础上建设Cybersyn项目，于是整个通信网络就只需要一台IBM大型主机。</p>
<p>比尔提议的系统工作方式如下：干预者用电传机从各自的企业将生产数据发送给国家计算机公司的电传机，计算机专家们再把数据以打孔卡片的形式输入到主机系统中；计算机会运行统计软件，将新的数据与过往采集的数据对比，寻找显著的差异；如果发现重大差异，系统会向计算机操作员告警，后者则通过电传网络把数据发送给CORFO和相关的干预者，随后CORFO会联络这些干预者，以便更好地了解现状并帮助解决问题。</p>
<h2 id="统计软件"><a href="#统计软件" class="headerlink" title="统计软件"></a>统计软件</h2><p>在部署电传网络的同时，比尔向安达信请求帮助，希望他们参与到后台软件的开发中。安达信的评估结果是，他们可以在1972年3月中旬之前编写并安装一个“临时套件”。这个临时的软件只能接受限定范围内的输入值，但至少能在原定的期限之前给智利人一套软件先用起来。为了在3月的交付期限前完成这个临时套件，他们需要砍掉很多边角。同时安达信会负责设计功能完备、长期使用的软件套件，但长期套件的开发和实施由智利团队负责。在此过程中，三名安达信咨询师会出差到圣地亚哥提供支持：一人负责安装临时套件，一人帮助智利程序员编写长期套件，另一名高级合伙人会为团队提供指导、并在项目结束时签字代表咨询公司正式签字。</p>
<p>Cybersyn的软件系统是控制论管理领域的新突破。它是比尔的可生存系统模型的第一个软件实现。这个程序还实现了一个新的、从未实验过的贝叶斯统计预测方法，这个名为哈里森-史蒂文斯方法的统计预测方法1971年12月才首次发表在《运筹学季刊》上。安达信的咨询师阿兰·邓斯缪尔在为项目做文献综述时偶然发现了这个新方法。他说服比尔这个方法可以识别生产数据中的显著变量，并根据初始数据点预测未来的趋势：是线性趋势、指数趋势、还是步进函数、或者只是暂时的异常数据。用这个方法，软件就不止能记录和汇总历史数据，还能对未来作出预测。而且一旦计算机操作员输入新的生产数据，软件就能自动调整其预测。</p>
<p>哈里森-史蒂文斯方法的提出者之一杰夫·哈里森是华威大学统计学系的创始人和首任系主任。在<a href="http://www2.warwick.ac.uk/insite/news/warwickpeople/in_memoriam_professor/" target="_blank" rel="external">大学给他的讣告</a>中说“他远远超前于他的时代”，这话绝非溢美之词。如果你看Wikipedia的<a href="https://en.wikipedia.org/wiki/History_of_statistics" target="_blank" rel="external">“统计学历史”词条</a>，其中有这样一段话：“1965年……林德利把贝叶斯方法介绍给更广泛的听众；1980年代，贝叶斯方法的应用大幅增加。”似乎贝叶斯方法在1970年代没有取得重要的进展。然而哈里森于1971年发表的文章《<a href="http://link.springer.com/article/10.1057/jors.1971.78" target="_blank" rel="external">一种用于短期预测的贝叶斯方法</a>》可能是首次将贝叶斯函数用于统计预测，Cybersyn则可能是第一个实现贝叶斯预测方法的计算机程序。然而在他的年代，因为计算能力的局限，贝叶斯方法不被学界主流认可；等到1980年代计算能力提升、尤其是马尔科夫链蒙特卡洛方法的发现解决了大量计算问题使得贝叶斯方法受到重视，哈里森就直接被历史跳过了。考虑到现在贝叶斯预测方法在机器学习领域的热门程度，哈里森近乎默默无闻的一生不禁令人唏嘘。</p>
<p>【杰夫·哈里森可能仅有的一次出现在学术领域之外的出版物上是在一本叫做《<a href="https://book.douban.com/subject/26965601/" target="_blank" rel="external">难以置信的巧合</a>》的伪科学著作上。这本书收录了很多奇妙的偶然事件，其中一个故事讲到哈里森在给某一届学生上第一堂概率课的时候抛了一个硬币，本打算借此讲解概率的基本概念例如硬币正反面落地的概率各为1/2，没想到硬币落下以后不偏不倚地立在了桌上。】</p>
<h2 id="经济模拟器"><a href="#经济模拟器" class="headerlink" title="经济模拟器"></a>经济模拟器</h2><p>统计软件运行的结果会进入一个经济模拟器，用于模拟智利经济状况并预测未来走势。比尔希望经济模拟器成为“政府的实验室”。一旦完成，这个模拟器能帮助政府决策者跳出日常事务进行全局决策，并实验多种不同的长期经济政策。所以这个模拟器需要反映不断变化的经济行为，尤其考虑到智利经济正处于转型期，这一点就愈发困难：它不仅要接受不断变化的输入值，还要不断调整变量之间的关系，并引入新的考虑因素。在真实世界中，这些变化不断在发生，因此模拟器的模型也需要能处理动态的变化。</p>
<p>比尔决定采用一种不太常见的建模方式。当时大多数经济模拟都采用“输入－输出”方法，用庞大的数据集来计算不同生产过程之间的相关性。这种分析方法可能需要几年时间来采集数据，然后用固定的方程式计算系统行为。比尔批评这种方法“死板得无可救药”。如果“目标是重组经济”，比尔写道，那么这种刻板的方法就是“糟糕的工具”。为了寻找不同的方法，比尔把眼光投向了著名的MIT工程师杰·福瑞斯特的研究。</p>
<p>在计算史上，福瑞斯特最广为人知的成就是发明了磁芯存储器，以及领导了“贤者”陆基防空系统的计算机设计团队。从1950年代后期开始，福瑞斯特的研究重心已经转移到工业管理领域。他对建模随时间变化的复杂系统尤为感兴趣，并把这个这个领域称作“系统动力学”。福瑞斯特鼓励政策制定者借助模型来识别出为数不多的一些关键参数，通过调节这些参数就能获得期望的结果。随后政策制定者就可以集中精力在这些领域。为了编程实现他的动态系统模型，福瑞斯特发明了DYNAMO编程语言，比尔发现这种语言很适合用来编写新的经济模拟器。</p>
<p>比尔找到了罗恩·安德顿，一位系统工程师、运筹学家、以及英国首屈一指的DYNAMO专家，请他投入到经济模拟项目中。到1972年3月，安德顿已经实现了经济模拟器的最初版本，这个软件被命名为CHECO（“智利经济模拟器”的英文缩写）。最终，安德顿写道，这个模拟器将使CORFO“对包含10到100个变量的系统逐步获得动态的理解，作为对比，缺乏系统指导的大脑只能理解5到10个变量。”同时，邓斯缪尔带着完成的临时软件套件从伦敦来到了圣地亚哥。3月中旬，第一批结果数据从工厂车间传到了CORFO。Cybersyn系统的流程走通了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;前文《&lt;a href=&quot;http://gigix.thoughtworkers.org/2016/12/24/cybersyn-1/&quot;&gt;半个世纪前的大数据时代&lt;/a&gt;》讲到，1970年代初，英国的控制论学者斯塔福·比尔应阿连德总统之邀，远赴智利去开发一套用于管理国有
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>印度儿童诗雅拉尔之死</title>
    <link href="http://gigix.thoughtworkers.org/2017/2/6/bahmni-story/"/>
    <id>http://gigix.thoughtworkers.org/2017/2/6/bahmni-story/</id>
    <published>2017-02-06T05:01:00.000Z</published>
    <updated>2017-02-06T10:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>来自里格瓦尔村、6岁大的诗雅拉尔·雅达夫已经发烧和头疼三天了。当他的皮肤开始浮现病态的黄色，他的父母找了一个巫医来进行“jhar-phook”（把魔鬼的灵魂赶出孩童的身体）。然后他们又带着孩子去看了一个村里的无证医生，他给孩子打了一针，退烧效果维持了一天。第二天，诗雅拉尔的父亲阿南德从农田里回家，发现孩子发着高烧、呼吸困难。恐慌的父亲想带孩子去拉坦浦尔镇的基层卫生中心去，但拉坦浦尔镇远在25公里外，当天最后一班去镇上的大巴早已发车。村长热心地给他们找了摩托车。基层卫生中心的值班医生做了简单的检查，叫阿南德赶快带孩子去比拉斯浦尔县上的医院——又是30公里路程。阿南德身上只有200卢比（约合20元人民币），于是他恳请医生照顾孩子一夜，他自己回去筹钱，但医生拒绝了他。阿南德只好带着诗雅拉尔赶最后一趟大巴回到村里，此时孩子的意识已经模糊。孤注一掷的阿南德用家里的一亩地和地里的所有庄稼做抵押，借到了8000卢比（约合800元人民币）。一家人紧握着钞票，与轻声喘息的男孩一起等待太阳升起。凌晨4点，诗雅拉尔说想喝水。当母亲端来水，孩子已经离世了。</p>
<p><img src="/assets/2017/2/6/1.png"></p>
<p>在包括中国在内的很多国家，疟疾几乎已经绝迹。但在印度中部的恰蒂斯加尔邦，它仍在投下死亡的阴影。2010年10月到12月之间，恰蒂斯加尔邦爆发了恶性疟疾流行。据邦政府的统计，两个月中全邦共有32人因疟疾死亡。然而，仅比拉斯浦尔县的加尼亚黎村一地就有7例死亡病例。“人民健康扶助团”（<a href="http://www.jssbilaspur.org/" target="_blank" rel="external">Jan Swasthya Sahyog</a>，简称“JSS”）在这个村里设有医院。在附近的科塔乡，JSS的社区医疗团队进行了250例口述验尸，其中200人被证实死于疟疾。如果一个县一个乡就有这么多人死亡，整个邦的数字恐怕只有天知道。</p>
<p>根据政府的官方数字，印度全国每年有200万人患上疟疾，约700人因此丧生。然而据世界卫生组织的估计，印度每年有1500万病例，其中2万人死亡。由加拿大一家机构发起的“百万死亡研究”的估计是每年有15万到22.5万人死于疟疾——印度传染病控制部门则对这个研究项目表达了强烈的抗议。大多数疟疾死亡发生在家里，因此不会被计入正式的统计数据。正式的数据来源仅限于公立卫生机构，并且要求疟原虫阳性涂片作为证据，然而大部分病人根本没有进行这项化验。</p>
<p>在缺乏正确信息的情况下，公共卫生政策必然是错误和低效的。而且越是偏远贫困的人群，遭受的损害就越是严重。政府的官方数据显示，50%的恶性疟疾病例和90%的死亡病例发生在被称为“阿迪瓦西”的部落民当中，而他们仅占全国人口的8%。缺乏公共卫生基础设施使得偏远贫困地区大部分病痛与死亡无人知晓，而统计数据的缺失又使得政府疏于投资基础设施建设。这成了一个难解的死结。</p>
<p>＊    ＊    ＊</p>
<p>黄昏的阳光穿过柚木和娑罗的树叶，在车窗前洒下斑驳的光影。越野车二档通过安查纳克玛老虎保护区泥泞的道路。JSS的医院位于恰蒂斯加尔邦西北部的加尼亚黎村，离比拉斯浦尔县城23公里。进村的道路需要穿过玛尼亚黎河，当季风带来大量雨水，这条道路就会被河流阻断。在降雨稀少的旱季，越野车能够平稳地驶过河水，在日落前进入村庄。</p>
<p>村边的几栋水泥房屋本来是为一个灌溉项目而建的。这个政府投资的灌溉项目无疾而终，于是JSS把这几栋房屋改造成了转诊医院，包括门诊部、70张床位的住院病房、一个功能齐全的化验室和两个手术室。现在这家医院每天接诊400名病人，并在三个偏远地区设立分中心，向居住在森林边缘的人群提供基本医疗服务。</p>
<p>现代科技与这里的环境显得有些格格不入。基础设施的薄弱当然是原因之一：这里没有3G信号，2G信号时断时续，停电也是家常便饭；另一方面，村里人识字的不多，医院的医生、护士和工作人员也几乎从未接触过智能手机。病人拿到的药品用塑料袋装好，药盒上贴着一张纸，上面画着代表服药时间的太阳／月亮图标和代表剂量的药片图标。一个房间里纸质病历堆积如山，接诊时护士就要去这个房间里翻找病人的病历交给医生。这是JSS医院的日常。</p>
<p><a href="http://www.bahmni.org/" target="_blank" rel="external">Bahmni</a>（读作“巴姆尼”）的目标是让JSS医院、以及其它成千上万类似的医院实现信息化。ThoughtWorks印度公司从2013年开始的这个产品，其核心是一个开源的电子病历（Electronic Medical Record）系统OpenMRS。这个软件内建了一套标准的医疗信息记录数据体系，在北美和南美的一些医院里的实施收到了很好的反馈，并且有一个活跃的社区（包括医学专家、公共卫生专家和IT专家）在不断完善它。但OpenMRS缺省的用户体验不是为JSS这样的医院设计的：它假设了IT水平较高的用户，界面是针对电脑屏幕设计，而且使用过程中需要一直连接网络。于是ThoughtWorks的团队与JSS的医生们协作，在OpenMRS的基础上开发了适合低资源环境的前端用户体验：在平板电脑上使用，界面操作简洁易懂，断网情况下照常工作，等连上网再同步数据。这就是Bahmni的雏形。</p>
<p><img src="/assets/2017/2/6/2.png"></p>
<p>随后，为了让医院信息化端到端拉通，Bahmni产品又整合了几个其它的开源软件。Odoo（曾经叫OpenERP）提供了药房库存管理、账目管理、财务会计的功能；dcm4chee实现了放射影像的信息化集成；OpenELIS打通了化验流程。今天的Bahmni已经是一个完整的一站式医院信息化系统，覆盖挂号、门诊、化验、影像、住院、诊断、手术、处方、取药、预后跟踪的整个医疗服务流程。有了及时准确的信息在手边，医生的诊疗能够更加精准、更加高效。</p>
<p>一家区级转诊医院的信息化能够积累一个区、几个乡、几十个村的电子病历。如果一个邦的几十个区都有这样一家医院，把它们的电子病历信息汇总起来，政府卫生部门就能得到完整真实的公共卫生数据。如果全国的几十个邦能做到医疗信息联网，国家的公共卫生政策和基础设施投资就能有的放矢。在雅鲁藏布江下游和喜马拉雅山南麓，孟加拉和尼泊尔的政府都有着这样的愿景。他们与ThoughtWorks的咨询师一起，规划为期数年的IT项目，目标是建设全国联网的医疗信息交换（Health Information Exchange，简称“HIE”）体系。</p>
<p>HIE是一个世界级的难题。医疗信息的联网需要打破卫生、财政、人力资源、社会保障等多个领域的壁垒，需要解决可用性、可靠性、可维护性、信息安全等技术挑战。美国政府每年投入到HIE的投资平均到每个临床医生身上达1.7万美元，至今也未能实现全国联网的目标。孟加拉和尼泊尔这两个位列世界银行中低收入列表的国家希望达成这个梦想，Bahmni是他们选择的武器之一。这个开源、易于配置、易于管理的软件系统，使两国国内的软件团队也能掌握实施和维护能力，从而极大地降低了实施成本，而且——更重要的是——最大程度地避免了对外国高科技企业的依赖。Bahmni采用国际通行的医疗信息交换开放协议HL7 FHIR（读作“fire”），所有主流电子病历系统都能与之集成交换信息。ThoughtWorks的团队与世界各国的HIE实践者紧密协作，将Bahmni融入了OpenHIE信息架构，使国家的HIE建设成为了一个开放的产业生态，政府、企业、研究机构、非营利组织、国际发展机构都能参与和贡献。</p>
<p>＊    ＊    ＊</p>
<p>诗雅拉尔死后3天，他的小表弟，1岁大的提拉克兰也出现了同样的症状。提拉克兰的父母已经提前找人借了钱，他们立即租了一辆轿车把孩子从卡吉路的社区卫生中心送去比拉斯浦尔。但社区卫生中心没有空闲的氧气瓶给这个呼吸困难的婴儿。提拉克兰没有挺过去比拉斯浦尔的这段路程，给他的父母留下了1万卢比（约合1000元人民币）债务，和无尽的悲伤。</p>
<p><img src="/assets/2017/2/6/3.png"></p>
<p>JSS医院的医生们和Bahmni的开发者们希望，在不远的将来，政府卫生部门能从及时准确的公共卫生数据中窥见恶性疟疾爆发的前兆，及早把青蒿素等药品和预防、诊断、治疗疟疾的知识送到每个村庄，让诗雅拉尔和提拉克兰这样的孩子不再因为疟疾而夭折。</p>
<p>我们在为这个梦想奋斗。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自里格瓦尔村、6岁大的诗雅拉尔·雅达夫已经发烧和头疼三天了。当他的皮肤开始浮现病态的黄色，他的父母找了一个巫医来进行“jhar-phook”（把魔鬼的灵魂赶出孩童的身体）。然后他们又带着孩子去看了一个村里的无证医生，他给孩子打了一针，退烧效果维持了一天。第二天，诗雅拉尔的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016年，读过的那些好故事</title>
    <link href="http://gigix.thoughtworkers.org/2016/12/31/2016-readings/"/>
    <id>http://gigix.thoughtworkers.org/2016/12/31/2016-readings/</id>
    <published>2016-12-31T05:01:00.000Z</published>
    <updated>2016-12-30T12:35:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年是忙碌的一年。为了MBA毕业论文，大半年里所有的业余时间都被耗尽。好在总算功不唐捐，战胜了各种拖延症，写出一篇还算对得起自己的论文，同一个主题在QCon做了一次<a href="http://www.infoq.com/cn/presentations/explore-talent-strategy-in-the-digital-era" target="_blank" rel="external">演讲</a>。而且托<a href="https://www.douban.com/tag/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/" target="_blank" rel="external">东野大神</a>的福，竟然还读了64本书，其中颇有不少打得出5星的好故事。</p>
<p><img src="/assets/2016/12/30/books-reading.jpeg"></p>
<h2 id="中国的故事"><a href="#中国的故事" class="headerlink" title="中国的故事"></a>中国的故事</h2><ul>
<li><a href="https://book.douban.com/subject/25802944/" target="_blank" rel="external">大唐李白</a>（少年游、凤凰台、将进酒） - 既有精彩的故事，又有旖丽的文字，典故又多，读起来觉得身轻如燕。我唐啊，真是繁华瑰丽，美不胜收！</li>
<li><a href="https://book.douban.com/subject/10471333/" target="_blank" rel="external">叫魂</a> - 重要的不在于那个事本身是什么，而在于当时的人是怎么看那个事，并从这个“怎么看”折射出当时的制度环境。方法真好！</li>
<li><a href="https://book.douban.com/subject/25938605/" target="_blank" rel="external">天国之秋</a> - “这个故事说明了我们认为跨越文化与距离的联结有时其实我们虚构的东西。当我们庆幸终于看透将我们与另一个文明隔开的那扇阴暗的窗户，心喜于在另一边的阴影之间发现隐藏其中的类似形体时，有时我们不晓得自己只是在凝视我们自己的倒影。”</li>
<li><a href="https://book.douban.com/subject/25773436/" target="_blank" rel="external">乱世潜流</a> - 罗大师一贯的风格，从时人眼光看当时事。讲辛亥到北洋一段时人的思想变迁，与《大波》放一起看，正是相映成趣。</li>
</ul>
<h2 id="外国的故事"><a href="#外国的故事" class="headerlink" title="外国的故事"></a>外国的故事</h2><ul>
<li><a href="https://book.douban.com/subject/26698660/" target="_blank" rel="external">巨人的陨落</a> - 好像以前没有这种全球视野的演义小说吧？细节很靠谱。要是笔锋再好一点就能写成一战背景的冰与火之歌了。</li>
<li><a href="https://book.douban.com/subject/2063579/" target="_blank" rel="external">古拉格群岛</a> - 本来只想给四星，但是当看到作者说“并不是什么人都宽恕，我只宽恕倒下的人”，就决定给他五星了。真实的信息有最大的力量。</li>
<li><a href="https://book.douban.com/subject/25897763/" target="_blank" rel="external">周期表</a> - 漂亮的小故事，没有特别着意写奥斯维辛，可是那种深远的影响随处可见。</li>
<li><a href="https://book.douban.com/subject/26606359/" target="_blank" rel="external">新自由主义简史</a> - 知道它的历史，才知道所谓“市场主导”、“自由至上”等观念是多么新鲜、多么人为。</li>
<li><a href="https://book.douban.com/subject/5980471/" target="_blank" rel="external">生命如歌</a> - 震撼人心。强烈推荐所有对国际发展和全球医疗感兴趣的人看。</li>
<li><a href="https://book.douban.com/subject/25836293/" target="_blank" rel="external">底特律</a> - 我们太习惯于经济的高速增长，以至于我们忘记了盛衰有时。一座曾经拥有上千万人口的城市如何衰落成不到70万人口，这是当代人几乎无法想象的幻景。</li>
<li><a href="https://book.douban.com/subject/26724249/" target="_blank" rel="external">资本的终结</a> - 简洁的理论，清晰的数据，有力地阐释今天世界的种种现状。要多么努力地自我欺骗才能死守住自由主义经济学观点而不信这么明显的道理？正如齐泽克所说，freedom hurts。</li>
</ul>
<h2 id="虚构的故事"><a href="#虚构的故事" class="headerlink" title="虚构的故事"></a>虚构的故事</h2><ul>
<li><a href="https://book.douban.com/subject/26286208/" target="_blank" rel="external">没有女人的男人们</a> - 虽说都是小故事，可是写得很真挚，而且致敬变形记那篇相当妙。</li>
<li><a href="https://book.douban.com/subject/20390695/" target="_blank" rel="external">银河帝国</a>（8～12卷） - 什么机器人三定律，其实只是写好玩的本格推理可以用到的一组预设条件而已。幻想的前提条件用好了以后，写出来的本格推理小说果然严密又精彩，连悬疑感都写出来了。但是仍然不怎么喜欢“人类整体”这个概念…而且心理史学必须建立在心灵控制的基础上，这样合适吗？</li>
<li><a href="https://book.douban.com/subject/25862578/" target="_blank" rel="external">解忧杂货店</a> - 很感人的小故事，而且结构很周密</li>
<li><a href="https://book.douban.com/subject/3646172/" target="_blank" rel="external">恶意</a> - 写作手法真漂亮，不但推理层层推进，叙述的视角也不断切换，佳作。</li>
<li><a href="https://book.douban.com/subject/26417643/" target="_blank" rel="external">歪笑小说</a> - 不剧透，不过最后一页的大反转可真是令人感动啊，满满的都是温情啊。</li>
</ul>
<h2 id="科技的故事"><a href="#科技的故事" class="headerlink" title="科技的故事"></a>科技的故事</h2><ul>
<li><a href="https://book.douban.com/subject/26644070/" target="_blank" rel="external">凤凰项目</a> - 很棒的故事。可惜的是，最后那段介绍的持续交付，需要相当高的技术能力。所以，雇不起优秀的技术人才、玩不转docker的企业，就只能眼睁睁看着比自己强且敏捷的对手屠杀自己，毫无反抗可能性。</li>
<li><a href="https://book.douban.com/subject/26702829/" target="_blank" rel="external">精益企业</a> - 套路非常清晰，材料非常齐全，Jez桑的集大成之作，IT驱动组织转型的必读</li>
<li><a href="https://book.douban.com/subject/26107390/" target="_blank" rel="external">Cybernetic Revolutionaries</a> - 尝试用政治与技术的合力建设一个更公正的社会，这样的努力会打开很多新的可能性：技术的、知识的、政治的、等等。Cybersyn是重要的技术和历史遗产，即使它的宏大愿景从未实现。</li>
<li><a href="https://book.douban.com/subject/3805815/" target="_blank" rel="external">控制论</a> - “预测一个消息的未来，就是用某种算符去运算这个消息的过去……最优预测问题的解决仅仅取决于要加以预测的时间序列的统计性质”——写于1948年，跪了。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年是忙碌的一年。为了MBA毕业论文，大半年里所有的业余时间都被耗尽。好在总算功不唐捐，战胜了各种拖延症，写出一篇还算对得起自己的论文，同一个主题在QCon做了一次&lt;a href=&quot;http://www.infoq.com/cn/presentations/explo
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>科技想要的 vs. 人民想要的</title>
    <link href="http://gigix.thoughtworkers.org/2016/12/25/cybersyn-1-chat/"/>
    <id>http://gigix.thoughtworkers.org/2016/12/25/cybersyn-1-chat/</id>
    <published>2016-12-25T05:01:00.000Z</published>
    <updated>2016-12-25T03:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>2016年12月14日晚，我就《<a href="http://gigix.thoughtworkers.org/2016/12/24/cybersyn-1/">半个世纪前的大数据时代</a>》一文与读者进行了一场主题交流。以下是对交流现场的记录。</em></p>
<p><img src="/assets/2016/12/25/pills.gif"></p>
<p><strong>问：你如何看待控制论和信息论的关系，以及控制论对互联网公司决策的影响？</strong></p>
<p>答：值得注意的，控制论在最近十来年已经不怎么被提及了。不是因为它过时。恰恰相反，是因为它渗入了各个学科、尤其是科技和商业领域的各个方面。控制论与“前控制论”管理思路的关键区别就一个词：反馈。“瀑布式”的管理理念认为，我只要提前做好设计，一步一步走下去，最后就能达成目标。然而控制论——用人体震颤这一例子——精辟地指出：别说管理什么大项目了，如果只有预先设计没有反馈和调整，你连杯水都拿不起来。</p>
<p>迟至2000年前后，IT行业对反馈还不是那么重视的，大家看重的仍然是计划和执行。证据是2001年《程序员》杂志仍然在用大篇幅报道CMM。我都做过……当时一个CMM认证国家补贴80万。好多骗钱的。对反馈的重视，随着商业－科技环境的日益不稳定，终于得到了普遍的认同。现在大家谈的是敏捷、精益，包括在传统上最保守的财务领域也开始谈Beyond Budgeting——本质上就是以滚动预算的方式获得较短周期的投资反馈。我2005年在中国软件行业大会上讲敏捷，台下都听得一愣一愣的。不是反对也不是赞同，是完全不知道讲的啥——一个项目怎么可能做20%就上线给用户用呢？现在这种观念、这种对反馈的重视大家都认同了。本质上这些都是控制论的影响。</p>
<p>大家已经不再提控制论，因为到处都是控制论。</p>
<p><strong>问：我们的世界会变成像《黑客帝国》那部电影一样吗？为什么？</strong></p>
<p>答：要回答这个问题，我们首先得问：黑客帝国描绘的是一个什么样的世界？也许你马上就会说：是人类被机器操纵、只能看到幻象的世界。对，也不对。这个问题不能只从“世界”这边看，同时要从“人”这边看。尼奥能看到真实的世界，不仅仅因为真实的世界存在，而且还因为他选择了红色药丸。换句话说，除了尼奥之外的很多人（尽管不是所有人），之所以看不见真实世界的样子，是因为他们选择了不去看。有一种假象在蒙蔽所有人、并且有很多人主动——有意识或者无意识地——地选择了看到这个假象而非真相，这才是黑客帝国描绘的世界。</p>
<p>从这个意义上来说，我们的世界真的和这个世界很像。比如我随便举个例子好了。你知道年收入10万元在中国是什么收入水平吗？请大家来猜一猜。猜一猜？前3%。</p>
<p>你能相信你公司刚入职每天背个破电脑包挤地铁吃煎饼的那个毕业生是中国前3%的高收入者吗？你能相信你自己是中国前1%甚至前0.1％的高收入者吗？当你看到街上流落的无家可归者、农村背井离乡的打工者，你是否意识到，你自己是造成他们苦难生活的系统中的一部分、甚至是系统的既得利益者？你不需要回答这个问题。因为这种事情就像尼奥的红药丸蓝药丸一样，当你选择了蓝药丸，你就不会看到某些被称为“真相”的事情。</p>
<p>我们这些中产阶级城市知识分子，互联网在我们周围造起了一座回音壁，让我们以为整个世界都是跟我们一样的人，因为我们每天听到的都是跟我们一样的（或者更强的）人发出的声音。然而只要稍微动动脑筋你就会意识到这件事情有多可笑。能在互联网上发出声音的，都是受过良好教育、有着良好经济基础的人。中国90%以上的人在互联网是无声的。你去看看知乎就知道了，你应该能感受到这个回音壁有多牢固。</p>
<p>赵然：全年全国居民人均可支配收入21966元，比上年增长8.9%，扣除价格因素，实际增长7.4%。数据来源：<a href="http://www.stats.gov.cn/tjsj/zxfb/201602/t20160229_1323991.html" target="_blank" rel="external">国家统计局2015年的公报</a>。</p>
<p>答：多谢赵然，正想找这个。所以，是的，我的答案非常简单：我们这个世界不需要“变成”，它现在就跟黑客帝国里的世界一样。众多像你一样的人看不见这个世界的真相。真正有意义的问题是，你是否选择看到，以及，当你看到了之后，你会怎么办。</p>
<p>靓汤：我们的思维是建立在这种壁垒之内，我们怎么选择一种积极的，正能量的活法？</p>
<p>答：首先要看到！列宁说的，学习学习再学习！</p>
<p>谢工：我记得熊节好象去非州国家做过项目，是不是有类似的感受经历，因此思考和看书看的很多。</p>
<p>答：对啊。你看到这些人是怎么生活的，然后你以前相信的系统就崩塌了。你就开始想：一个让人去死的系统，不管它多么有道理，终归是不对的吧。</p>
<p>余晟：资本主义和市场经济就是这样。你可能觉得岁月静好，现世安稳。结果远在天边跟你八竿子打不着的某个家伙吃得苦耐得烦，凑巧干了跟你一样的活，也可能他有天赋也可能他要求低，然后你忽然就没活可干了，然后一群人冲上来说：呸，懒鬼，谁让你不努力。</p>
<p>谢工：我们Chat当时和熊节讨论策划一系列的话题，名字叫寻找IT技术史，后来我们找到第一个半个世纪前的大数据时代。</p>
<p>答：谢工这个背景介绍，正好引出下一个问题。</p>
<p><strong>问：数据量没有那么大时通过什么方式提高结果的准确度呢？</strong></p>
<p>答：实际上比尔在设计Cybersyn的时候，有两个原因故意不采集所有巨细靡遗的生产数据。第一，计算资源不足。因为美国的禁运，智利当时只有4台主机，Cybersyn系统只能使用其中的1台。如果采集所有数据，算不过来。IBM 360哟～第二，这是比尔主动的设计。因为如果中央掌握并处理所有数据，那么中央就会对工厂进行微观管理（micro management），那么真正在做事的人就会被跳过、被架空、被剥夺主观能动性。那将是一个机器取代人的系统。Cybersyn从设计的第一天起，在比尔和阿连德的心中，它就是一个为人民服务的系统。</p>
<p>它是一个赋权的系统，不是一个剥夺的系统。话题扯开一点……我认为冷战的终结对人类是一个巨大的损失。因为人类社会从此失去了一个坐标系，只剩下了唯一的坐标系、唯一的维度（历史的终结）。那么在单一坐标系上，人和人、国家和国家，就只有“发达”与“落后”之分，失去了多样性，失去了多角度思考的可能性。</p>
<p>回到大数据和预测系统这里。当我们谈到“准确度”（以及，与它类似的，效率）这个概念，我们不应该把它看做仅有的维度。准确度是多个可能的维度中的一个。其它的维度还包括，比如说，激励人，帮助人。Cybersyn的准确度不高，不仅是条件局限的结果，更是主动权衡、选择了其它维度的结果。我们应该看到设计者选择了什么，而不仅仅看他们放弃了什么。当准确度/效率成为唯一的维度，机器取代人的时机也就到来了。因为准确度/效率不是人的度量，是机器的度量。</p>
<p><strong>问：有关公平创新，包括国家推动全民创业，青少年创业热潮，用本篇文章观点，能否解释一下目的和意义？</strong></p>
<p>答：从一个非常抽象的意义上，可以看到这个问题与本文有一个牵强的关联：科技发展与社会、尤其是与跟不上科技发展的普通劳动者之间的关系。“全民创业”本身的目的非常清晰，一望即知。这就是甩包袱。结构性失业就摆在面前，国家管不了，企业不想管，所以就拿出这么一个招数来甩包袱，让结构性失业的受害者自己承担。当然国家管不了这本身就是1992年深化国有经济改革所追求的结果。说回来。那么这个结构性失业是从何而来？原因有很多，其中一个重要的原因，是机器取代人。机器100年前就取代了人的体力劳动，现在机器开始取代人的脑力劳动和服务性劳动。</p>
<p>机器取代人对谁有利？用创业、创新制造新的增长点，促就业效率又高，成本又低，对资本家有利。机器取代人对谁有害？对那些被取代、被失业却无力再就业的劳动者有害。所以这一波技术发展的趋势，是对掌握资源的极少数强者有利、对不掌握资源的大多数弱者有害。你觉得这种现象、这种行为叫什么？这就叫剥削。这就叫掠夺。你看到的“全民创业”，就是掠夺者吃完肉以后吐骨头的那个动作。</p>
<p>想论证这个观点是否合理，看你身边的“全民创业者”有几个成功——不用多成功，挣钱能赶上房价——就知道了。</p>
<p>georgesuperman：吴军老师说2%的人掌握人工智能。剩下的就会被剥削。</p>
<p>答：然后那2%的掠夺者擦干净嘴唇，对被掠夺的98%说：我也很无奈呀，然而这就是技术发展的必然趋势呀，你说我又能怎么办呢？要不我给你们捐款吧，我做慈善吧？</p>
<p>所以啊。幸亏有像智利的Cybersyn这样的历史在前面，我们才有机会看到：原来科技的发展不一定是以取代人为目的的；原来科技的发展不一定是有利于极少数强者而有害于大多数弱者的；原来科技的发展是可以为人民服务的。</p>
<p>所以，对“全民创业”这种口号（以及强者的慈善捐款），唯一正确的姿态就是对他竖起一根中指说“fuck you”。科技应该属于人民、为人民服务。如果它不是，就革它的命！</p>
<p>魏犇：但是科技是一种工具，请问如何革科技的命？</p>
<p>答：所以我们要研究像Cybersyn这样的历史。历史上是有像阿连德这样的人，想过这样的问题，想得非常深入的。虽然最终被美帝国主义给扼杀了，但是留下了经验和教训给我们。（并向卡斯特罗同志致敬）。</p>
<p><strong>问：控制论下将引导社会向什么样的结构进行演化，会有什么样新的分工，又会有哪些阶层会消逝？</strong></p>
<p>答：这个问题问到了点子上。社会朝哪里演化，不是一个技术的问题。有些未来学者认为科技本身有要求，去研究“科技要什么”，这是很幼稚的。幼稚的地方在于：他假设了政治的缺位。然而政治从不缺位。过去三十年中如果我们看不到政治的存在，仅仅是因为一种政治（美国的政治）占据了垄断地位。现在我们看到了。十几年前有本书很畅销，叫《世界是平的》。现在怎么样？世界是不是平的？打脸打得piapia响。所以（在科技的影响下）社会朝哪里演化，这从来都是一个政治问题。我随便举个身边的例子。</p>
<p>科技可以让出租车司机收入越来越低，工作时间越来越长，越来越无力与公司抗争。但是科技也可以让出租车司机获得体面的收入，与乘客形成良好的互助合作关系，关心环保问题。（感兴趣的同学可以看<a href="https://www.thenation.com/article/denver-taxi-drivers-are-turning-ubers-disruption-on-its-head/" target="_blank" rel="external">Green Taxi的案例</a> ）那么为什么我们感觉，科技好像只能朝一个方向去发展人类社会呢？因为那个方向是对资本家有利的。资本家用他们控制的媒体来宣传那个方向，压制别的方向，使我们无法知道有别的方向存在。所以回到这个问题本身：不知道，人类社会发展的可能性有很多很多，我们需要去了解这些可能性，然后主动选择一个对人类有利的可能性，而不是茫茫然地发展到对资本家有利的方向上，然后还以为这是“科技想要的”。</p>
<p><strong>问：如果面对完全透明的同一组大数据，不同的人会得出不同的结论。那么，如何才能假设，只有国家的分析决策，才是正确的呢？换句话说，是不是将数据完全提供给每一个人，交由市场博弈，会更加合理呢？</strong></p>
<p>答：这个问题可以很快速。跟前面问题一样：“正确”是一个政治决策，而不是数学计算。数据可以给每一个人，然而决策不可能给每一个人。还不要说每一个人。乌克兰选个总统，永远都是得票率略高于50%，永远都有另一半人反对他。所谓“市场博弈”这也是个很幼稚的想法。我们看到的从来都是赤裸裸血淋淋的阶级斗争。</p>
<p>庄表伟：还是讨论下吧，别快速过。</p>
<p>答：卡斯特罗去世不是就有一帮住在美国的古巴人弹冠相庆么。</p>
<p>庄表伟：我理解的计划经济，就是由政府，做出一些决策。而那些决策，在市场经济下，应该是由经营者来做的。</p>
<p>答：米塞斯说的所谓“企业家”嘛。然而马云已经意识到这个问题了。马云作为一个企业家，他计划、管控的规模已经超过了世界上很多国家。那么我们有什么理由认为企业家和政府有本质的区别？在管控的效率这个意义上。这正是为什么马云自己在浙商大会上说，我们可能已经摸到计划经济成功的门把手了。</p>
<p>庄表伟：也许不是政府与企业家的区别，而是：作为利益相关方，他是否有权力，为了自己的利益做决策。还是，他被人决策了。或者说，无论是政府，还是马云，他的决策，如果影响了我的利益，我有没有办法？</p>
<p>答：罗纳德高斯的企业理论讲的恰恰就是这么回事：为了追求效率降低交易成本，人们主动度让自己的决策权，这就是企业。</p>
<p>庄表伟：如果，我不但没有办法，还需要拍手称快。还要欢喜赞叹。那就不正常。</p>
<p>王渊命：政府和企业家的本质的区别在于是否掌握暴力机关啊。</p>
<p>答：说得对，但是。未来你对阿里和腾讯不满意的时候，你有选择吗？其实是一回事。统治不一定需要暴力的，也可以通过大数据。</p>
<p>庄表伟：是啊，我可以让渡，也意味着我可以收回。假设，让渡是合理的，收回却不行。那就麻烦了。</p>
<p>Pegasus：企业对员工和国家对公民是有很大区别的。</p>
<p>答：但是，仍然，你说得对。归根结底这是一个政治问题，不是技术问题。解决人民如何当家作主的问题，靠的是政治运动。没有政治运动，那么美国人民一样当不了家做不来主。</p>
<p>王渊命：企业，乃至政府计划的存在是为了降低交易成本，但技术的增长，同时也在降低交易成本。有没有可能技术的发展最终其实是消灭了企业和政府的存在呢？</p>
<p>Pegasus：企业和员工相对更平等。</p>
<p>答：你觉得平等嘛。你觉得你可以选择不跟腾讯和阿里玩嘛。就跟美国人民曾经觉得他们可以选举一样。</p>
<p><strong>问：有关经济预测尤其是宏观经济预测，我在五道口的教授说相信因果逻辑大于相信概率。先因果再以概率。请问老师如何看得宏观经济预测的方法论？</strong></p>
<p>答：这个我一点也不专业，还是避免多说的好。如果说“先因果再概率”是指宏观经济需要预先设计，我完全赞同。中国今天的成就已经充分证明了这一点，如果没有当年的4万亿，哪有今天的顺丰即日达。</p>
<p><strong>问：Cybersyn 这种系统实现的机制有两种，一种是最后完全中心化的，由中心化的一个系统来进行调度和分配，一种是完全去中心化的，因为技术的发展也为完全去中心化带来了可能。熊节老师认为哪种的可能性更大？</strong></p>
<p>答：Cybersyn这个系统，我们要避免用孤立的IT视角去看它。 实际上Beer当时一直把IT系统和人看作整个系统。他提到“Cybersyn”的时候，大部分时候他指的是机器和人的一个整体。从这个意义上来说，Cybersyn是一个结合了中心化和去中心化的系统。</p>
<p>被机器赋权的劳动者分散在各地，做出去中心化的决策。这个视角是我们现在的IT业者非常需要注意的。缺少了对人的重视、没有赋权的出发点，我们做的IT系统就注定是剥夺的系统。</p>
<p>谢工：在寻找IT技术史系列中，熊节目前在这个话题里，是有个系列讲智利的大数据，７０年代的互联网变革。挖掘书背后的故事，就是我们讨论的一个方向。虽然现在这类书国内尚未引进，但至少我们可以通过熊节的思考来认识一些本质上发生过的事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;2016年12月14日晚，我就《&lt;a href=&quot;http://gigix.thoughtworkers.org/2016/12/24/cybersyn-1/&quot;&gt;半个世纪前的大数据时代&lt;/a&gt;》一文与读者进行了一场主题交流。以下是对交流现场的记录。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>半个世纪前的大数据时代</title>
    <link href="http://gigix.thoughtworkers.org/2016/12/24/cybersyn-1/"/>
    <id>http://gigix.thoughtworkers.org/2016/12/24/cybersyn-1/</id>
    <published>2016-12-24T05:01:00.000Z</published>
    <updated>2017-03-26T10:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>马云在最近的<a href="http://www.yicai.com/news/5162510.html" target="_blank" rel="external">一次公开演讲</a>中谈到市场经济与计划经济的比较：“我们过去的一百多年来一直觉得市场经济非常之好，我个人看法未来三十年会发生很大的变化，计划经济将会越来越大。为什么？因为数据的获取，我们对一个国家市场这只无形的手有可能被我们发现。”这听起来是一个相当大胆、甚至有科幻感的设想：如果能用深入基层的信息终端采集生产和消费数据，用全国连通的网络汇总经济数据，用数据分析软件识别和预测经济异常波动，在国家经济尺度上实时统筹和调整计划，那么近百年来计划经济面临的最大挑战“<a href="https://en.wikipedia.org/wiki/Economic_calculation_problem" target="_blank" rel="external">经济计算问题</a>”有可能得到彻底解决，从而使计划经济有可能成为一种可行的、甚至更优于市场经济的方案。然而更显科幻的是，早在近半个世纪前的1970年代初期，在南美的智利，这样一个意在掌控全国经济的“大数据”系统已经被设计并实现出来了。</p>
<p>＊    ＊    ＊</p>
<p>故事从1970年开始。在这一年的智利大选中，萨尔瓦多·阿连德被选为总统，并立即开始推行被称为“智利社会主义之路”的规划。在一系列的改革政策中，最为重要的是对大型企业（包括智利经济支柱的铜矿业）的国有化。这一改革进程很快遭遇了困难，原因不是企业主抗拒国有化，而是国有化进行得太顺利，政府很快发现自己没有足够的人才来对新生的国有企业进行整体调控。面对挑战，阿连德产生了一个大胆的构想：如果仅靠人不足以有效管理国家尺度的经济，再加上技术的支持如何？</p>
<p>阿连德看中的技术是控制论。1948年，控制论这门学科的创始人诺伯特·维纳将其定义为“<a href="https://book.douban.com/subject/3805815/" target="_blank" rel="external">关于动物和机器中控制和通信的科学</a>”。在二战中，控制论的理论与技术被用于研发防空火控系统——人手操作的高射炮很难准确命中敌方战机，而维纳设计的计算机系统则可以采集敌机飞行的数据、并实时预测敌机的飞行路线、进而自动操作高射炮击中敌机。维纳事后总结，这项研究的核心在于“预测未来”：“预测一个消息的未来，就是用某种算符去运算这个消息的过去……最优预测问题的解决仅仅取决于要加以预测的时间序列的统计性质”。这门新兴学科让阿连德看到了希望：如果控制论可以用于实现防空火控系统这样实时的、复杂的、涉及大量人为因素（驾驶战机的都是由经验丰富且绝对不想被击落的飞行员）的自动化系统，它是否能被用于其他实时的、复杂的、涉及大量人为因素的领域——比如说，经济计划？</p>
<p>在寻找合适的技术领导者的过程中，阿连德的政治乌托邦愿景也吸引了英国控制论学者斯塔福·比尔的兴趣。尽管美国政府对“社会主义”这个字眼<a href="https://book.douban.com/subject/2441402/" target="_blank" rel="external">极度紧张</a>，不惜以各种政治、经济手段扼杀阿连德的改革政策，阿连德所构想的其实是介于美苏两个超级大国、两种意识形态之间的“第三条路线”，一种既能全面提升智利经济和人民生活水平、又不损害智利保持四十年的民主自由氛围的两全方案。1971年，比尔和阿连德政府开始了合作，在这个政治乌托邦愿景之上又加上了一个科技乌托邦的愿景：构建一个计算机系统来实施调控国家经济——在互联网普及之前二十年。</p>
<p>以维纳为代表的控制论学者经常用人体作为类比。例如维纳这样谈论一个基本的控制论系统：“为了能对外界产生有效的动作，重要的不仅是我们必须具有良好的效应器，而且必须把效应器的动作情况恰当地回报给中枢神经系统，而这些报告的内容必须适当地和其他来自感官的信息组合起来，以便对效应器产生一个适当的调节输出。”比尔则对这一结构进一步深化，提出了“<a href="https://en.wikipedia.org/wiki/Viable_system_model" target="_blank" rel="external">可生存系统模型</a>”的概念。在这一模型中，组成一个系统的各个部件被分为5级子系统：系统1到系统3分别负责感知、信息传导、以及监控和协作的功能，系统4和系统5则负责常规运作层面之上的、有目的的管理和治理职能。比尔用生理学的类比来解释这个模型（如下图），并认为同样的模型也适用于企业和国家经济。</p>
<p><img src="http://7xpvay.com1.z0.glb.clouddn.com/d04bd630-b32d-11e6-96cf-69a982993485" alt=""></p>
<p>比尔的另一个理论基础是他在1970年的一次主题演讲中提出的“<a href="https://book.douban.com/subject/26922062/" target="_blank" rel="external">自由机器</a>”理论。所谓自由机器，是这样一种社会-科技系统：它以网络的形式运行，而非层级结构；其中作为行动基础的是信息，而非权力；各个领域的专家知识和实时的信息反馈驱动决策，从而消除官僚体制存在的必要性。比尔甚至构想了在政府机构中这样的自由机器如何实现：它应该是一系列的指挥室，每个指挥室中实时接收和呈现来自各个子系统的信息，指挥室中的各领域专家则基于这些信息提出猜想、并运行模拟程序来验证这些猜想，由猜想汇集而成的决策再从指挥室实时传递到国民经济第一线。</p>
<p>基于可生存系统模型和自由机器理论，比尔的团队向阿连德政府提出了一个系统设计的方案。在他们建议的系统中，国有企业和政府之间会新建起数字化通信的渠道，用于传输实时的生产数据；这些数据随后被送进统计软件程序，用于预测工厂的生产效能，从而使政府能够提前识别和应对异常情况；系统中还包含一个计算机实现的经济模拟器，让政策制订者能够在真正实施他们的经济措施前先在模型中测试；最后，他们还提议建设一个充满未来感的指挥室，让政策制订者们能够聚集在其中，快速掌握国民经济运行的状态，并在数据的支持下快速做出决策。</p>
<p>只有当我们从资料图片中看到这个指挥室，我们才能直观地感受到比尔所说的“未来感”是什么意思。这个建成于1972年的指挥室看上去就像《星际迷航》里“企业号”的舰桥，其中大量塑料与玻璃纤维材质的使用、环绕四周的显示屏、座椅扶手上简洁的操作按钮，都与这个项目的愿景一样，充满了不真实感，就像一部科幻电影。</p>
<p><img src="http://7xpvay.com1.z0.glb.clouddn.com/ec8ebcd0-b3ec-11e6-96cf-69a982993485" alt=""></p>
<p>只是，这不是科幻电影，而是历史上真实存在过的一个IT系统。新生的社会主义智利政府和来自英国的科学家冀望基于这个系统平衡个体自由与自上而下的控制：既保持个人的主观能动性，又使个体为组织（企业或国家）的整体利益共同奋斗、乃至作出必要的牺牲。在智利之外，很多进步人士相信智利能通过经济上的改革探索出一条政治上和意识形态上的“第三条路”，甚至成为冷战的一条出路。阿连德和比尔的IT系统会走向何方，历史在静静注视。</p>
<p>＊    ＊    ＊</p>
<p>站在近半个世纪之后回望这段尘封的历史，我会感到一阵莫名的激动。今天IT技术飞速发展，然而我们看见的却是技术日益被掌握在极少数人手里、并被用于为这部分人牟利。技术发展越是日新月异，这道鸿沟就越是触目惊心。难道IT技术的发展就注定伴随着不平等的加剧？难道<a href="http://gigix.thoughtworkers.org/2016/6/11/evil-technology/">程序员统治的黑暗世界</a>是无可避免的唯一未来？这一前景让作为技术工作者的我感到灰心。而阿连德与比尔、一个智利人与一个英国人、一个政治家与一个科学家、一个政治乌托邦梦想与一个科技乌托邦梦想的交汇处，这段几乎已被遗忘的历史让我们重新看到希望：为技术赋予政治和社会的正面意义、用技术创造更公正的世界，思考这个问题的不是只有我们。</p>
<p>如果今天的一位IT架构师来设计这个名为“Cybersyn”的系统，也许他会参考IBM的<a href="https://www.ibm.com/developerworks/community/files/basic/anonymous/api/library/087482e3-c559-4919-9af1-61564eb247a3/document/b4720f97-63a1-46bb-904b-b8151c295925/media" target="_blank" rel="external">商业技术趋势研究</a>提出一个方案，其中个人移动设备和物联网设备被用于在工厂采集实时的生产数据，数据通过互联网汇集到位于云端的数据库，用大数据和机器学习技术对数据进行加工、分析和预测，并借助社交网络创造政府、企业与工人和谐共处的社会与经济环境。</p>
<p>尽管互联网和手机的时代还有几十年才会到来，比尔提出的方案却与现代的架构方案如出一辙。于是我们不禁要好奇：他所领导的这支团队会如何构建连接厂矿与中央政府的网络，又会用什么技术来实现数据分析与预测功能？当比尔宣称Cybersyn会同时兼顾国家经济运行效率与个人的民主和自由，什么技术能让他掌握全国民众的情绪涨落？在下一篇文章中，我将深入探索Cybersyn系统的设计与实现，敬请期待。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马云在最近的&lt;a href=&quot;http://www.yicai.com/news/5162510.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一次公开演讲&lt;/a&gt;中谈到市场经济与计划经济的比较：“我们过去的一百多年来一直觉得市场经济非常之好，我
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>喧闹的资本盛宴与无力的慈善</title>
    <link href="http://gigix.thoughtworkers.org/2016/9/7/powerless-charity/"/>
    <id>http://gigix.thoughtworkers.org/2016/9/7/powerless-charity/</id>
    <published>2016-09-07T05:01:00.000Z</published>
    <updated>2016-09-07T03:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>（本文是作者于去年9月应破土网之邀而作的时评。一年时间过去，破土网已不知所踪，腾讯公益日照样红红火火，故此旧文重发，以资记念。）</em></p>
<p><img src="/assets/2016/9/7/charity.jpg"></p>
<p>胜利日的假期还没结束，一位做公益的老友就把我拖进微信群里，要我帮助募捐。仔细一问，原来是腾讯发起了“99公益日”的活动，9月7号到9号的三天时间里，在腾讯公益平台上募捐的项目，捐赠人捐多少，腾讯就对应配捐多少。难怪这位从不直接找我募捐的老友也按捺不住，把我也动员成了“梦想召集人”，给我设定了三天募捐1500元的任务。照他的计划，由他动员的100名梦想召集人每人募集1500元，加上腾讯的一比一配捐，三天内就可以募集到30万元善款。</p>
<p>可世事难预料。9月6号半夜，当我想要开始我这一份募捐时，发现腾讯的乐捐平台慢得打不开。群里一看，大家也都在反映同样的问题。等到一觉醒来，募捐页面倒是可以设置了，当我自己先捐上一百元，却没看到传说中的配捐出现。“99公益日”最大的亮点，就这么爽约了。</p>
<p>正当微信群里大家都在奇怪为什么没有收到配捐，腾讯的官方解释出来了：由于捐款来得太多、太过集中，主办方腾讯不得不临时修改游戏规则，配捐总额9999万，平均分到7、8、9三天，每天3333万。几个小时后，腾讯又召开新闻发布会，继续修改规则：9点开始，单人单日配捐上限999元，项目配捐上限999万元。从这个规则修改不难推测，就在第一天的短短几个小时里，捐款额已经超过了三千万，且已经有机构得到了上千万配捐额度。</p>
<p>随着各路消息在朋友圈里逐渐发酵，一幅完整的图景开始浮现。据某NGO发起人透露，自“腾讯公益99公益日三天1:1配捐乐捐平台上的项目”消息传播开始，很多公益机构摩拳擦掌组建各种战团，准备“冲击99高地”。操作指南出现各种版本，“打劫马化腾”的声音多群可见。别人看阅兵时，很多公益人在加班指导捐助人绑卡。7日凌晨起，第一个5分钟完成配捐超500万，15分钟配捐1000万。有章法的基金会和项目事先确定的战术显著见效，某些知名机构几个小时就入手几百万配捐。集中的捐赠，竟然在午夜时分冲垮了腾讯的IT平台，逼得腾讯临时修改规则。</p>
<p>围观群众有一句点评可谓入木三分：不要高估中国公益人抢钱时的吃相。</p>
<p>在笔者看来，腾讯掀起的这场公益圈的资本盛宴，虽然怀揣着美好的愿景，却也恰好暴露出中国公益行业普遍存在的一个痼疾：众多机构缺乏自己的战略规划和实施计划，一切行动以募款为最大驱动。在腾讯“1:1配捐”的“优惠”政策刺激下，很多人的朋友圈突然间被慈善募捐的信息刷屏。本应言益而非言利的公益机构，却跟着资本的指挥棒一窝蜂团团转，这番情景多少让人有些不忍直视。让这些原本就欠缺高效运营能力的公益机构又多增一次折腾，想来也不是腾讯发起“公益日”活动的初衷。</p>
<p>突然刷屏的募捐广告，更是刷出了慈善捐款这种形式根深蒂固的问题：只有慈善，没有团结。面对铺天盖地的募捐信息，很多中产阶级城市白领不禁要问：难道让他们发善心去帮助弱势群体的动力竟然是“打折”吗？齐泽克将星巴克“买一杯咖啡捐一美元”的慈善计划辛辣地称作“消费主义的最高形态”，因为它通过（更多的）消费来消解中产阶级在消费时的负罪感。而“99公益日”堪称更胜一筹：如果中产阶级（暂时还）没有消费，那么就用打折来创造消费的欲望，并且直接用慈善来消解消费的负罪感。这种集中优惠售卖赎罪券的做法，恰好让我们有机会看清没有共情与团结的慈善还剩下什么——中产阶级需要购买赎罪券来抵消自己卷入和积极参与资本主义体系的负罪感，至于捐赠是用于失学儿童、罕见病患者还是流浪猫狗，又于我何有哉？</p>
<p>在“99公益日”的新闻报道中，腾讯宣称自己的目标是“打造公开透明的公益平台”。仅从这场围抢来看，腾讯在后续需要做的项目监控与信息公布的工作还很多。尤其是精心布置、抢到了上千万配捐额度的机构，这些显然不在其年度计划中的意外收入是否得到有效使用，会是一个引人关注的问题。同时，这场热闹的资本盛宴更让我们看到缺乏共情与团结的慈善是何其无力。公益行业不仅需要募捐平台，更需要一个能以募捐作为桥梁在城市中产阶级与弱势群体之间建立共情与团结的平台。惟有当公益能引领中产阶级走出玻璃办公室，走进被剥削、被压迫、被噤声的弱势群体，体会他们的苦楚，与他们建立团结而非居高临下地施舍，公益才有可能真正创造一个更美好的世界。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;（本文是作者于去年9月应破土网之邀而作的时评。一年时间过去，破土网已不知所踪，腾讯公益日照样红红火火，故此旧文重发，以资记念。）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2016/9/7/charity.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;胜利日的假期还没
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用技术治病救人，你来不来？</title>
    <link href="http://gigix.thoughtworkers.org/2016/8/26/bahmni-hiring/"/>
    <id>http://gigix.thoughtworkers.org/2016/8/26/bahmni-hiring/</id>
    <published>2016-08-26T05:01:00.000Z</published>
    <updated>2016-08-26T03:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="太长不读"><a href="#太长不读" class="headerlink" title="太长不读"></a>太长不读</h2><p>如果你想见识非洲、亚洲和拉丁美洲众多发展中国家的丰富与苦难，如果你痛恨这个世界有太多不公，如果你希望用IT技术挽救贫苦人民的生命，如果你有兴趣成为开源软件社区的领导者，如果你想做一个有影响力的软件产品，也许你应该考虑加入Bahmni产品团队，与我们一起用技术治病救人。</p>
<p>你可以<a href="http://www.lagou.com/jobs/2286715.html" target="_blank" rel="external">在线投递简历</a>，或直接与我联系：JXiong at ThoughtWorks dot com</p>
<p><img src="/assets/2016/8/26/surgery.jpg"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>ThoughtWorks是一家跨国软件设计与定制领袖企业，下属的<a href="https://www.thoughtworks.com/cn/global-health" target="_blank" rel="external">ThoughtWorks Global Health</a>部门一直致力于推进全球医疗发展。我们积极投身于改善低资源地区的医疗质量，提高医疗服务覆盖率。通过提供技术解决方案、工具、咨询及开源软件的专业知识，我们为亚洲、非洲及拉丁美洲贫穷国家的医疗工作者提供支持，帮助他们为最贫困的人群提供高质量的医疗服务，并帮助这些国家的政府进行医疗体系的全局优化。</p>
<p><a href="http://www.bahmni.org/" target="_blank" rel="external">Bahmni</a>是ThoughtWorks Global Health的拳头产品。这个开源的医院信息化系统（HIS）可以部署在全世界最贫困地区的医院，帮助那里的医生提高工作效率、减少诊疗错误、优化医疗决策、完善数据汇报。迄今为止，Bahmni已经在印度、孟加拉、尼泊尔、塞拉利昂等国的多家乡村医院实施，获得了极佳的反响。</p>
<p>作为ThoughtWorks全球医疗战略布局的重要环节，我们计划在中国建立一支Bahmni产品研发团队。这支团队将与分布在世界各地的全球医疗团队紧密协作，为Bahmni的实施和产品演进做出关键贡献。我们的目标是十年内在全球5000家最贫困地区的医院实施Bahmni系统，提升全世界最贫困人群的医疗服务水平。</p>
<p>为此，我们将招聘Bahmni产品研发团队的三个核心角色：产品经理，软件架构师和实施经理。</p>
<h2 id="产品经理"><a href="#产品经理" class="headerlink" title="产品经理"></a>产品经理</h2><h3 id="职位要求"><a href="#职位要求" class="headerlink" title="职位要求"></a>职位要求</h3><ul>
<li>具备医疗信息化行业工作经验，有较丰富的行业知识积累</li>
<li>熟悉医疗行业主流业务流程及相关IT系统</li>
<li>有从事EMR/CIS/HIS相关工作经验者优先</li>
<li>良好的产品分析总结归纳能力，熟悉产品运营；   </li>
<li>具有较强的语言表达沟通能力，具备良好客户沟通和管理能力</li>
<li>具有团队精神，较强的组织协调能力，性格稳重扎实</li>
<li>习惯分布式团队协作，英语书面及口头沟通能力佳者优先</li>
<li>熟悉敏捷需求管理及项目管理流程者优先</li>
</ul>
<h3 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h3><ul>
<li>理解并分析贫穷地区医院需求，协调客户关系，保障医疗信息化项目实施</li>
<li>综合分析客户需求，把控医疗信息化产品规划方向</li>
<li>与分布在全球多个国家的医疗信息化产品团队协作，共同保障产品研发及演进</li>
<li>协调位于中国的产品交付和实施团队，负责需求传递及成果验收</li>
<li>代表公司参加国内及国际各类行业相关会议，发表演讲及文章</li>
</ul>
<h2 id="软件架构师"><a href="#软件架构师" class="headerlink" title="软件架构师"></a>软件架构师</h2><h3 id="职位要求-1"><a href="#职位要求-1" class="headerlink" title="职位要求"></a>职位要求</h3><ul>
<li>4年以上开发经验，2年以上团队技术主导者经验</li>
<li>有设计、规划、实现复杂业务系统的工作经验</li>
<li>Java基础扎实，精通常用主流基础框架</li>
<li>熟悉Web系统的设计和部署</li>
<li>有较强的分析设计能力、方案整合能力和解决问题能力</li>
<li>良好的团队合作精神，自我驱动，勤奋好学</li>
<li>具有医疗信息化行业工作经验者优先</li>
<li>习惯分布式团队协作，英语书面及口头沟通能力佳者优先</li>
<li>具有开源项目工作经历者优先</li>
<li>熟悉敏捷软件开发流程和实践者优先</li>
</ul>
<h3 id="工作内容-1"><a href="#工作内容-1" class="headerlink" title="工作内容"></a>工作内容</h3><ul>
<li>理解贫穷地区医院需求，制订技术方案，保障医疗信息化项目实施</li>
<li>与产品经理紧密协作，把控医疗信息化产品技术架构方向</li>
<li>与分布在全球多个国家的医疗信息化产品团队协作，共同保障产品研发及演进</li>
<li>领导位于中国的产品交付和实施团队，形成高效、高质量交付</li>
<li>与世界各地的开源社区领袖协作，共同构建全球医疗IT生态系统</li>
<li>代表公司参加国内及国际各类行业相关会议，发表演讲及文章</li>
</ul>
<h2 id="实施经理"><a href="#实施经理" class="headerlink" title="实施经理"></a>实施经理</h2><h3 id="职位要求-2"><a href="#职位要求-2" class="headerlink" title="职位要求"></a>职位要求</h3><ul>
<li>4年以上实施经验，2年以上领导实施团队经验</li>
<li>熟悉LINUX操作系统及相关的服务和排错方法</li>
<li>熟悉网络相关的基础知识</li>
<li>Java基础扎实，了解常用主流基础框架</li>
<li>具有较好的软件理解和应用能力，能够清晰的向客户传达软件使用方法，进行用户使用培训和指导</li>
<li>有较强的责任心和自我驱动能力，良好的团队合作精神，勤奋好学</li>
<li>习惯分布式团队协作，英语书面及口头沟通能力佳者优先</li>
<li>具有EMR、HIS实施经验者或具有医疗信息化行业工作经验者优先</li>
</ul>
<h3 id="工作内容-2"><a href="#工作内容-2" class="headerlink" title="工作内容"></a>工作内容</h3><ul>
<li>管理和发展产品实施团队；</li>
<li>负责客户项目的软件产品和相关设备的配置、部署及相关技术实施工作；</li>
<li>实施过程中用户培训、需求调研、系统测试等工作；</li>
<li>负责项目实施技术文档、运维资料的编写与归档；</li>
<li>配合销售人员进行必要的业务交流、客户资源调研、售前方案编写等售前工作；</li>
<li>与世界各地的开源社区领袖协作，共同构建全球医疗IT生态系统</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;太长不读&quot;&gt;&lt;a href=&quot;#太长不读&quot; class=&quot;headerlink&quot; title=&quot;太长不读&quot;&gt;&lt;/a&gt;太长不读&lt;/h2&gt;&lt;p&gt;如果你想见识非洲、亚洲和拉丁美洲众多发展中国家的丰富与苦难，如果你痛恨这个世界有太多不公，如果你希望用IT技术挽救贫苦人民的
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务与康威定律</title>
    <link href="http://gigix.thoughtworkers.org/2016/8/9/micro-services-conways-law/"/>
    <id>http://gigix.thoughtworkers.org/2016/8/9/micro-services-conways-law/</id>
    <published>2016-08-09T05:01:00.000Z</published>
    <updated>2016-08-09T03:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>（本文是对《<a href="https://book.douban.com/subject/25881698/" target="_blank" rel="external">Building Microservices</a>》一书第10章的摘录）</em></p>
<h2 id="康威定律"><a href="#康威定律" class="headerlink" title="康威定律"></a>康威定律</h2><p>Melvin Conway于1968年发表的论文《<a href="http://www.melconway.com/Home/pdf/committees.pdf" target="_blank" rel="external">How Do Committees Invent</a>》指出：系统设计的结构必定复制设计该系统的组织的沟通结构。这一论断被称为“康威定律”。在《<a href="http://hbs.me/2aNCbIY" target="_blank" rel="external">Exploring the Duality Between Product and Organizational Architectures</a>》一文中，作者发现紧密耦合的组织（例如典型的商业产品公司，所有员工在同一地点工作，具有高度一致的愿景与目标）开发的软件倾向于较少模块化，而松散耦合的组织（例如分布式的开源社区）开发的软件则倾向于更加模块化、耦合较少。</p>
<p>当一支小型团队负责整个系统的设计与实现时，团队内部可以具有频繁的、细粒度的沟通。而随着团队变大、分布在不同地点甚至时区，协调变更成本急剧增加，紧跟着就有两种可能性：人们要么找到降低协作／沟通成本的办法，或是停止做变更。后者就会导致庞大、难以维护的代码库。最终，各个地点不得不选择各自专门处理的一部分工作，拥有一部分代码，并在团队之间形成更粗粒度的沟通机制。组织结构中的沟通路径会造就与之对应的粗粒度API，形成代码库各个大块之间的边界。</p>
<p>服务的边界应该围绕着约束上下文（<a href="http://martinfowler.com/bliki/BoundedContext.html" target="_blank" rel="external">bounded context</a>）来画，正如我们希望团队结构与约束上下文保持一致。这样做有几方面的好处。首先，团队在一个约束上下文内更容易抓住领域概念；其次，一个约束上下文内的多个服务更可能彼此交互，因此系统设计和发布协作都得以简化；最后，交付团队与业务代表沟通时，团队只需与各自约束上下文中的一两个专家建立良好关系即可。</p>
<h2 id="服务所有权"><a href="#服务所有权" class="headerlink" title="服务所有权"></a>服务所有权</h2><p>一般而言，每个服务属于一个团队，拥有这个服务的团队负责其所有修改。这个团队可以任意调整代码结构，只要这些修改不对服务的消费者造成破坏即可。在很多团队中，“所有权”延伸到了服务的各个方面，从需求来源直到软件的构建、部署和维护。由同一个团队负责开发、部署和维护会促使他们简化部署环节，而不是“写完代码扔过墙”。</p>
<p>有很多团队采用“共享服务所有权”的模式。这种模式并不理想，但有必要了解团队为什么做此选择。常见的理由包括：</p>
<ul>
<li>难以拆分。《Building Microservices》一书的第5章提供了一些关于如何拆分服务的建议。也可以考虑把团队合并，从而使组织结构与软件架构匹配。</li>
<li>特性团队。比起传统的“按技术/职能划分团队”的IT组织结构，“一个团队端到端负责一个特性开发”的结构是一个进步。然而微服务环境下的团队结构可以再向前一步：如果业务领域、服务边界、团队结构三者能保持对齐，一个团队就能聚焦一组客户，以整体视角为这组客户提供服务。横切多个业务领域的修改固然会发生，但可能性会降低很多。</li>
<li>交付瓶颈。有几个办法可以应对交付瓶颈而不必共享服务所有权。第一个办法就是等待，各个服务不一定要以同样的节奏发布，遇到交付瓶颈的服务可以稍后再发布。另外，也可以直接向有交付困难的团队中加人。横跨整个组织的技术栈越标准，临时加人的效果就会越好。当然，另一方面，标准化的技术栈也可能给团队造成束缚。</li>
</ul>
<h2 id="内部开源"><a href="#内部开源" class="headerlink" title="内部开源"></a>内部开源</h2><p>通常的开源项目组织方式可以用在企业内部：一个代码库由一组受信任的提交者（核心团队）管理，并接受未获信任的提交者（外围团队）提交的修改。开源项目以这种方式来保障代码质量和一致性。大多数开源项目在第一个核心版本成型之前倾向于不接受外来的提交。当服务变得成熟且稳定，便可以更放心地开放接受贡献。</p>
<p>分布式版本控制工具允许任何人提交pull request，这是很重要的能力。取决于组织的规模，内部开源体系可能需要考虑借助代码评审工具来讨论和评估是否接受pull request。同时，类似于github提供的pull request评论功能也很有用。最后，需要让提交者很容易构建和部署整个软件，通常这需要定义良好的构建和部署流水线，以及集中管理的构建产物仓库。</p>
<h2 id="案例：REA"><a href="#案例：REA" class="headerlink" title="案例：REA"></a>案例：REA</h2><p>REA的服务由“小队”（squad）拥有，小队负责服务的整个生命周期，包括构建、测试、发布、支持、直到下线。一支交付服务团队给这些小队提供建议和指导，以及必要的工具支持。REA有着强烈的自动化文化，并大量使用AWS使团队更具自主性。</p>
<p>不仅交付团队与业务经营对齐，软件架构也是一样。以服务集成为例：在一条业务线内部，所有服务可以用任何方式自由交流，小队自己可以做决定；然而在业务线之间，所有交流必须以异步批处理的形式发生，这是中央架构团队规定的很少几条“铁律”之一。粗粒度的系统集成与业务线之间已有的粗粒度交流相匹配。</p>
<h2 id="人"><a href="#人" class="headerlink" title="人"></a>人</h2><p>为了对齐业务经营，组织结构和软件架构都需要改变。变革的阻力真实存在：从大一统的系统转到微服务，对于习惯了单一编程语言、不用考虑运维问题的开发者而言是一次痛苦的觉醒；习惯了把软件“丢过墙”的程序员突然发现没有别人可以推诿责任，可能会很不习惯自己对所有工作负责；如果要让开发者承担7*24在线支持工作，甚至可能有劳动合同上的阻碍。变革推动者需要理解员工的喜恶，顺势而为，不能急于求成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;（本文是对《&lt;a href=&quot;https://book.douban.com/subject/25881698/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building Microservices&lt;/a&gt;》一书第10章的摘录）&lt;/em&gt;&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机器学习：概述</title>
    <link href="http://gigix.thoughtworkers.org/2016/8/4/machine-learning-introductions/"/>
    <id>http://gigix.thoughtworkers.org/2016/8/4/machine-learning-introductions/</id>
    <published>2016-08-04T11:30:00.000Z</published>
    <updated>2016-08-04T11:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文摘录了一组关于机器学习的介绍文章，帮助非技术性的读者快速了解机器学习的目的、原理和用途。</p>
<p><img src="/assets/2016/8/4/ml.jpg"></p>
<h2 id="为什么要机器学习？"><a href="#为什么要机器学习？" class="headerlink" title="为什么要机器学习？"></a>为什么要机器学习？</h2><p>机器学习有望解决传统企业软件解决方案的很多问题。首先，在传统企业软件中，数据的质量受限于人类的输入。然而现实是，大部分销售不喜欢更新CRM系统中的数据，真正的销售数据只存在于若干电话会议与数字表格中。同时，传统的企业系统大多构建于关系型数据库上，而关系型数据库并不善于表现信息的时间轴视图，因此大多数企业需要依赖于庞大的数据仓库来不断接收来自企业系统的数据转储。使用这种方法，业务人员必须等待几周甚至几个月才能从数据团队得到有用的洞见。最后，传统的企业系统依赖于成千上万人定的规则，而这些规则是静态的，在业务发展的过程中会逐渐失效。</p>
<p><em>（来源：Crunch Network | <a href="https://techcrunch.com/2015/07/27/the-next-wave-of-enterprise-software-powered-by-machine-learning/" target="_blank" rel="external">The Next Wave Of Enterprise Software Powered By Machine Learning</a>）</em></p>
<p>机器学习的发展可以分作三个阶段：机器学习1.0是“描述”（description），2.0是“预测”（prediction），3.0是“对策”（prescription）。今天的CxO们大约不用太操心“描述”阶段，大多数企业已经拥有对应的IT系统。眼下他们迫切需要拥抱“预测”阶段。今天的科技不仅能让业务人员查看历史数据，而且能预测未来的行为和结果。</p>
<p><em>(来源：McKinsey | <a href="http://www.mckinsey.com/industries/high-tech/our-insights/an-executives-guide-to-machine-learning" target="_blank" rel="external">An executive’s guide to machine learning</a>)</em></p>
<h2 id="机器学习如何工作？"><a href="#机器学习如何工作？" class="headerlink" title="机器学习如何工作？"></a>机器学习如何工作？</h2><p>简单说，机器学习是一类自我改进的算法。计算机从一个模型开始，用试错法反复训练这个模型，然后就可以做出预测，例如预测某一笔金融交易有多大风险。以侦测信用卡欺诈的机器学习算法为例，首先要用大量真实持卡人的交易记录来训练这个模型，并根据历史记录对模型调优。接下来，信用卡交易就会实时地流过这个算法模型，算法模型则对每条交易记录生成一个概率数据，代表该笔交易涉及欺诈的可能性（例如97%）。如果欺诈侦测系统被配置为阻止欺诈概率95%以上的交易，那么这个评估值就会引发POS机拒收这张信用卡。</p>
<p>在判断交易是否欺诈时，机器学习算法会考虑很多因素：商家的可信度、持卡人的购买行为、时间、地点、IP地址等等。数据点越多，预测就会越准确。人类不可能在几分之一秒内评估几千个数据点，只有自动化的算法能让实时的欺诈侦测成为可能。</p>
<p><em>（来源：The Conversation | <a href="https://theconversation.com/machine-learning-and-big-data-know-it-wasnt-you-who-just-swiped-your-credit-card-48561" target="_blank" rel="external">Machine learning and big data know it wasn’t you who just swiped your credit card</a>）</em></p>
<p>机器学习与传统的数据统计有一个重要的区别：使用机器学习时，我们并不关心因果性（causality）。我们可能并不关心什么变化造成什么结果，而是聚焦于预测：只要有一个模型能在当前环境下给出准确的判断就行。可以参考我们如何使用天气预报：天气预报并不告诉我们降雨的原理，只告诉我们下雨的概率，我们参照这个概率判断是否应该带伞出门。机器学习也是一样：个性化推荐就是对人们偏好的预测，尽管并不知道人们为什么喜欢这些东西，但这种预测是有用的。习惯了这个思维方式以后，机器学习的价值就会显而易见。</p>
<p><em>（来源：HBR | <a href="https://hbr.org/2015/07/what-every-manager-should-know-about-machine-learning" target="_blank" rel="external">What Every Manager Should Know About Machine Learning</a>）</em></p>
<h2 id="机器学习用来干嘛？"><a href="#机器学习用来干嘛？" class="headerlink" title="机器学习用来干嘛？"></a>机器学习用来干嘛？</h2><p><img src="/assets/2016/8/4/tata.png"><br><em>（来源：Tata Consultancy Services | <a href="http://www.tcs.com/SiteCollectionDocuments/White%20Papers/Machine-Learning-Analytics-in-Manufacturing-0714-1.pdf" target="_blank" rel="external">Using Big Data for Machine Learning Analytics in Manufacturing</a>）</em></p>
<p>在银行里应用机器学习技术提供个性化服务：</p>
<ul>
<li>基于顾客的信用卡/银行卡使用模式给出推荐；</li>
<li>基于顾客在特定产品/网站上的行为给出推荐；</li>
<li>预测顾客下一步可能的消费行为；</li>
<li>如果顾客错过了航班，预测他们立即的需要；</li>
<li>向顾客推荐有折扣的商品、餐馆、酒吧等；</li>
<li>根据顾客的还款周期及时推送时尚信息</li>
</ul>
<p><em>（来源：Kathiravan Manoharan | <a href="http://tinyurl.com/hcgkkzc" target="_blank" rel="external">Applications of Machine Learning Algorithms in Banking</a>）</em></p>
<p>应用在金融服务领域，机器学习算法可以揭示新的消费模式、识别未知的交互方式、发现新的顾客群体、获得新的洞见，从而助力银行的全渠道建设。</p>
<p><em>（来源：Strands Finance | <a href="http://blog.strands.com/machine-learning-pfm-magic" target="_blank" rel="external">Transparent technology: How machine learning brings magic to next-generation PFM</a>）</em></p>
<p>我们调查了168家年收入5亿美元以上企业的执行官，76%表示机器学习可以通过从大数据中持续学习和优化给销售人员的实时推荐而带来销售增长。超过4成的企业已经开始在销售与市场领域实施机器学习。我们的研究显示，大企业在销售流程中应用机器学习有三个维度：首先是提供数据和流程的可见性，使销售过程更加科学；另外是在销售与市场环境中开展更多数据驱动的实验；第三是通过自动化事务性流程来最大化实际销售活动的时间占比。</p>
<p>在采用机器学习之前，决策的主要依据是静态的数据库、针对历史数据的分析、经验和直觉。机器学习可以用实时数据来驱动决策，并且持续改进预测质量。假说可以快速被提出、测试、调整、并最终用于改进工作流程。在我们的调查中，接近80%的企业认为机器学习显著提升了销售关键绩效指标。</p>
<p><em>（来源：Sloan Review | <a href="http://sloanreview.mit.edu/article/sales-gets-a-machine-learning-makeover/" target="_blank" rel="external">Sales Gets a Machine-Learning Makeover</a>）</em></p>
<p><img src="/assets/2016/8/4/yandex.png"><br><em>（来源：<a href="https://yandexdatafactory.com/industries/retail/" target="_blank" rel="external">Yandex Data Factory</a>）</em></p>
<p>麦肯锡使用机器学习算法扫描超过1万份应聘者简历，预测出来的招聘结果与真实结果高度相关。有趣的是，机器学习算法接受了比真实招聘略多的女性应聘者，也许将来技术可以有效地消除人类面试官隐藏的偏见。</p>
<p><em>(来源：McKinsey | <a href="http://www.mckinsey.com/industries/high-tech/our-insights/an-executives-guide-to-machine-learning" target="_blank" rel="external">An executive’s guide to machine learning</a>)</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文摘录了一组关于机器学习的介绍文章，帮助非技术性的读者快速了解机器学习的目的、原理和用途。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/2016/8/4/ml.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么要机器学习？&quot;&gt;&lt;a href=&quot;#为什么要机器学习？&quot; cla
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深蓝与AlphaGo的对比</title>
    <link href="http://gigix.thoughtworkers.org/2016/7/21/comparing-deep-blue-alphago/"/>
    <id>http://gigix.thoughtworkers.org/2016/7/21/comparing-deep-blue-alphago/</id>
    <published>2016-07-21T05:01:00.000Z</published>
    <updated>2016-07-21T04:10:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>20年前，深蓝与卡斯帕罗夫的对弈使人工智能进入大众视野；20年后，AlphaGo对李世乭的压倒性胜利再次使人工智能成为热议焦点。同样是战胜了棋类世界冠军，两代人工智能最重要的差别在于：深蓝仍然是专注于国际象棋的、以暴力穷举为基础的特定用途人工智能，而AlphaGo是几乎没有特定领域知识的、基于机器学习的、高度通用的人工智能。这一区别决定了深蓝只是一个象征性的里程碑，而AlphaGo则更具实用意义。</p>
<p><img src="/assets/2016/7/21/AI.png"></p>
<h2 id="深蓝的算法"><a href="#深蓝的算法" class="headerlink" title="深蓝的算法"></a>深蓝的算法</h2><p>整体而言，深蓝是一套专用于国际象棋的硬件，大部分逻辑是以“象棋芯片”（Chess Chip）的形式用电路实现的。在象棋芯片之上，有较少量的软件负责调度与一些高阶功能。</p>
<p>深蓝算法的核心是基于暴力穷举：生成所有可能的走法，然后执行尽可能深的搜索，并不断对局面进行评估，尝试找出最佳走法。深蓝的象棋芯片包含三个主要的组件：走棋模块（Move Generator），评估模块（Evaluation Function），以及搜索控制器（Search Controller）。各个组件的设计都服务于“优化搜索速度”这一目标。</p>
<p>走棋模块负责生成可能的走法。走棋模块的核心是一个8*8的组合逻辑电路阵列，代表棋盘的64个格子。国际象棋的走棋规则以硬件电路的方式嵌入到阵列之中，因此走棋模块可以给出合法的走法。在核心之外还有附加的逻辑电路用于探测和生成特殊走法（例如“吃过路兵”和“王车易位”）。</p>
<p>评估模块是整个芯片中最主体的部分，占据了芯片上2/3的面积、超过半数的逻辑三极管和80%以上的存储三极管。评估模块又分为三个部分：棋子位置评估；残局评估；以及慢速评估。棋子位置评估对盘面上所有棋子当前所处的位置计分，不同棋子处于不同位置的分值由软件预先计算好后写入硬件。芯片中输入了大约8000种不同的“模式”，并针对每种模式赋予了一定的分值。残局评估也预存了一系列专门针对残局的估值规则，例如“王在棋盘中央有利”（King centralization bonus）的规则。残局评估子模块还以8*8组合逻辑电路阵列的形式跟踪所有兵所处的位置，并计算兵是否越过了对方的王、是否能一路冲到对方底线晋级。由于逻辑嵌入在硬件中，棋子位置评估和残局评估都只需要一个时钟周期就可以完成计算。</p>
<p>慢速评估子模块是整个芯片上最复杂的元素，占据芯片上约一半的面积，并且完成计算需要10个时钟周期。大量国际象棋特有的逻辑都在慢速评估的过程中计算，包括：</p>
<blockquote>square control, pins, xrays, king safety, pawn structure, passed pawns, ray control, outposts, pawn majority, rook on the 7th, blockade, restraint, color complex, trapped pieces, development and so on</blockquote>

<p>搜索控制器实现了一个最小窗口alpha-beta搜索算法（minimum-window alpha-beta search algorithm)，也称为alpha-beta剪枝算法，能快速削减搜索的规模。</p>
<p>深蓝的软件也是专门设计用于与硬件协同工作的。软件部分负责调度最多32个象棋芯片并行搜索，并负责对大范围规划的局面进行软件评估。深蓝的软件还连接了“仅剩5子”的残局数据库，一旦出现仅剩5子的残局，就会直接从这个数据库中搜索最佳走法。软件中还包含了从30万局棋中抽取出来的开局书，并且工程师还不断优化其中记录的开局走法。</p>
<h2 id="AlphaGo的算法"><a href="#AlphaGo的算法" class="headerlink" title="AlphaGo的算法"></a>AlphaGo的算法</h2><p>AlphaGo是一个能够运行在通用硬件之上的纯软件程序。据称其中<a href="http://www.theverge.com/circuitbreaker/2016/5/19/11716818/google-alphago-hardware-asic-chip-tensor-processor-unit-machine-learning" target="_blank" rel="external">部分程序使用了TensorFlow</a>。</p>
<p>AlphaGo的核心算法基于机器学习。在训练的第一阶段，AlphaGo仅仅根据彼此无关的盘面信息模仿专家棋手的走法。通过3000万个盘面数据训练一个13层的监督式策略网络，这个神经网络随后就能以超过50%的精度预测人类专家的落子。值得注意的是，在这一阶段，AlphaGo对于围棋规则一无所知，只是毫无目的地模仿而已。尽管如此，由于违反规则的走法（例如“自杀”）专家棋手不会走出，所以AlphaGo也相当于学会了遵守围棋规则。</p>
<p>在训练的第二阶段，AlphaGo开始与自己下棋：将过往训练迭代中的策略网络与当前的策略网络对弈，并将对弈过程用于自我强化训练。在这一阶段，引入了唯一的围棋规则：对获胜的棋局加以奖励。经过这一阶段的训练，AlphaGo已经超过所有围棋软件，对弈当时最强的开源围棋软件Pachi可以达到85%胜率。</p>
<p>在训练的第三阶段，AlphaGo在自我对弈中，从不同棋局中采样不同位置生成3000万个新的训练数据，用以训练局面评估函数。经过三阶段训练的策略网络被混和进蒙特卡洛树搜索算法，从而在比赛进行过程中预测棋局未来可能的发展方式、并对各种可能的未来局面进行评估。</p>
<p>在整个算法中，只有“获胜”这个概念作为围棋规则被输入训练过程，除此之外AlphaGo对于围棋规则一无所知，更没有高级围棋专门概念（例如“定式”）。尤其是第一阶段的训练，完全基于简单的盘面信息训练达到相当可观的预测效果，这一过程在很多需要“预测”这一功能的领域具有显著的意义。</p>
<h2 id="规模与复用"><a href="#规模与复用" class="headerlink" title="规模与复用"></a>规模与复用</h2><p>深蓝的一枚象棋芯片包含大约1百万个三极管，其中逻辑三极管45万个、存储三极管55万个。该芯片采用0.6微米CMOS技术，主频30～40兆赫。1997年与卡斯帕罗夫对弈并获胜的深蓝II是一台30个节点的RS/6000超级计算机，每个节点上部署16枚象棋芯片，共计480枚象棋芯片并发。由于内嵌大量国际象棋专用逻辑、且采用硬件方式实现，深蓝对于IBM后续的人工智能（例如Watson）并无太多可复用性。</p>
<p>AlphaGo使用的硬件则要强大得多。与李世乭对弈的分布式版本使用了1920颗CPU和280颗GPU，并且据称该版本的AlphaGo<a href="http://www.theverge.com/circuitbreaker/2016/5/19/11716818/google-alphago-hardware-asic-chip-tensor-processor-unit-machine-learning" target="_blank" rel="external">已经使用了Google自制的“张量处理单元”</a>（TPU）。Google宣称这种芯片专门针对TensorFlow优化，其计算效率比GPU高出一个数量级。由于几乎不包含领域特定知识、且运行于通用硬件基础上，AlphaGo的软件据信非常简单（<a href="https://github.com/Rochester-NRT/RocAlphaGo" target="_blank" rel="external">一个开源项目</a>仅用约1200行代码就实现了AlphaGo的核心算法），且其中大部分算法可以解决用于其它领域的机器学习问题。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>Campbell, M., Hoane Jr., a. J., &amp; Hsu, F. (2002). Deep Blue. <em>Artificial Intelligence</em>, 134(1-2), 57–83.</li>
<li>Ferrucci, D., Brown, E., Chu-Carroll, J., Fan, J., Gondek, D., Kalyanpur, A. a., … Welty, C. (2010). Building Watson: An Overview of the DeepQA Project. <em>AI Magazine</em>, 31(3), 59–79.</li>
<li>Hsu, F., Campbell, M., &amp; Hoane, J. (1995). Deep Blue system overview. In <em>ICS ’95: Proceedings of the 9th international conference on Supercomputing</em> (pp. 240–244). </li>
<li>Silver, D., Huang, A., Maddison, C. J., Guez, A., Sifre, L., van den Driessche, G., … Hassabis, D. (2016). Mastering the game of Go with deep neural networks and tree search. <em>Nature</em>, 529(7587), 484–489. </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;20年前，深蓝与卡斯帕罗夫的对弈使人工智能进入大众视野；20年后，AlphaGo对李世乭的压倒性胜利再次使人工智能成为热议焦点。同样是战胜了棋类世界冠军，两代人工智能最重要的差别在于：深蓝仍然是专注于国际象棋的、以暴力穷举为基础的特定用途人工智能，而AlphaGo是几乎没有
    
    </summary>
    
    
  </entry>
  
</feed>
